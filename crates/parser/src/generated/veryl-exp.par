%start Veryl
%title "Veryl grammar"
%comment "Empty grammar generated by `parol`"
%on ColonColonLAngleTerm %push Generic
%on HashLBracketTerm %push Attr
%on TripleLBraceTerm %push Embed
%user_type Token = crate::veryl_token::Token
%user_type VerylToken = crate::veryl_token::VerylToken

%scanner Embed {
    %auto_newline_off
    %auto_ws_off
    %on LBraceTerm %push EmbedInner
    %on TripleRBraceTerm %pop
}
%scanner EmbedInner {
    %auto_newline_off
    %auto_ws_off
    %on LBraceTerm %push EmbedInner
    %on RBraceTerm %pop
}
%scanner Generic {
    %on ColonColonLAngleTerm %push Generic
    %on RAngleTerm %pop
}
%scanner Attr {
    %on RBracketTerm %pop
}

%%

/*    0 */ CommentsTerm: <INITIAL, Generic, Attr>"(?:(?:(?://.*(?:\r\n|\r|\n)?)|(?:(?ms)/\*(?:[^*]|\*[^/])*\*/))\s*)+" : Token;
/*    1 */ StringLiteralTerm: <INITIAL, Generic, Attr>"\u{0022}(?:\\[\u{0022}\\/bfnrt]|u[0-9a-fA-F]{4}|[^\u{0022}\\\u0000-\u001F])*\u{0022}" : Token;
/*    2 */ ExponentTerm: <INITIAL, Generic>/[0-9]+(?:_[0-9]+)*\.[0-9]+(?:_[0-9]+)*[eE][+-]?[0-9]+(?:_[0-9]+)*/ : Token;
/*    3 */ FixedPointTerm: <INITIAL, Generic>/[0-9]+(?:_[0-9]+)*\.[0-9]+(?:_[0-9]+)*/ : Token;
/*    4 */ BasedTerm: <INITIAL, Generic>/(?:[0-9]+(?:_[0-9]+)*)?'s?[bodh][0-9a-fA-FxzXZ]+(?:_[0-9a-fA-FxzXZ]+)*/ : Token;
/*    5 */ AllBitTerm: <INITIAL, Generic>/(?:[0-9]+(?:_[0-9]+)*)?'[01xzXZ]/ : Token;
/*    6 */ BaseLessTerm: <INITIAL, Generic>/[0-9]+(?:_[0-9]+)*/ : Token;
/*    7 */ MinusColonTerm: '-:' : Token;
/*    8 */ MinusGTTerm: '->' : Token;
/*    9 */ PlusColonTerm: '+:' : Token;
/*   10 */ AssignmentOperatorTerm: "\+=|-=|\*=|/=|%=|&=|\|=|\^=|<<=|>>=|<<<=|>>>=" : Token;
/*   11 */ DiamondOperatorTerm: '<>' : Token;
/*   12 */ Operator12Term: "\*\*" : Token;
/*   13 */ Operator11Term: "/|%" : Token;
/*   14 */ Operator10Term: "\+|-" : Token;
/*   15 */ Operator09Term: "<<<|>>>|<<|>>" : Token;
/*   16 */ Operator08Term: "<=|>=|<:|>:" : Token;
/*   17 */ Operator07Term: "===|==\?|!==|!=\?|==|!=" : Token;
/*   18 */ Operator03Term: "&&" : Token;
/*   19 */ Operator02Term: "\|\|" : Token;
/*   20 */ Operator06Term: "&" : Token;
/*   21 */ Operator05Term: "\^~|\^|~\^" : Token;
/*   22 */ Operator04Term: "\|" : Token;
/*   23 */ UnaryOperatorTerm: "~&|~\||!|~" : Token;
/*   24 */ ColonColonLAngleTerm: <INITIAL, Generic>'::<' : Token;
/*   25 */ ColonColonTerm: <INITIAL, Generic>'::' : Token;
/*   26 */ ColonTerm: <INITIAL, Generic>':' : Token;
/*   27 */ CommaTerm: <INITIAL, Generic, Attr>',' : Token;
/*   28 */ DotDotEquTerm: <INITIAL, Generic>'..=' : Token;
/*   29 */ DotDotTerm: <INITIAL, Generic>'..' : Token;
/*   30 */ DotTerm: <INITIAL, Generic>'.' : Token;
/*   31 */ EquTerm: <INITIAL, Generic>'=' : Token;
/*   32 */ HashLBracketTerm: '#[' : Token;
/*   33 */ HashTerm: <INITIAL, Generic>'#' : Token;
/*   34 */ LAngleTerm: <INITIAL, Generic>'<' : Token;
/*   35 */ QuestionTerm: '?' : Token;
/*   36 */ QuoteLBraceTerm: <INITIAL, Generic>"'\{" : Token;
/*   37 */ QuoteTerm: "'" : Token;
/*   38 */ TripleLBraceTerm: '{{{' : Token;
/*   39 */ LBraceTerm: <INITIAL, Embed, EmbedInner, Generic, Attr>'{' : Token;
/*   40 */ LBracketTerm: <INITIAL, Generic, Attr>'[' : Token;
/*   41 */ LParenTerm: <INITIAL, Generic, Attr>'(' : Token;
/*   42 */ RAngleTerm: <INITIAL, Generic>'>' : Token;
/*   43 */ TripleRBraceTerm: <Embed>'}}}' : Token;
/*   44 */ RBraceTerm: <INITIAL, EmbedInner, Generic, Attr>'}' : Token;
/*   45 */ RBracketTerm: <INITIAL, Generic, Attr>']' : Token;
/*   46 */ RParenTerm: <INITIAL, Generic, Attr>')' : Token;
/*   47 */ SemicolonTerm: <INITIAL, Generic>';' : Token;
/*   48 */ StarTerm: <INITIAL, Generic>'*' : Token;
/*   49 */ AliasTerm: <INITIAL, Generic>'alias' : Token;
/*   50 */ AlwaysCombTerm: <INITIAL, Generic>'always_comb' : Token;
/*   51 */ AlwaysFfTerm: <INITIAL, Generic>'always_ff' : Token;
/*   52 */ AssignTerm: <INITIAL, Generic>'assign' : Token;
/*   53 */ AsTerm: <INITIAL, Generic>'as' : Token;
/*   54 */ BitTerm: <INITIAL, Generic>'bit' : Token;
/*   55 */ BoolTerm: <INITIAL, Generic>'bool' : Token;
/*   56 */ CaseTerm: <INITIAL, Generic>'case' : Token;
/*   57 */ ClockTerm: <INITIAL, Generic>'clock' : Token;
/*   58 */ ClockPosedgeTerm: <INITIAL, Generic>'clock_posedge' : Token;
/*   59 */ ClockNegedgeTerm: <INITIAL, Generic>'clock_negedge' : Token;
/*   60 */ ConnectTerm: <INITIAL, Generic>'connect' : Token;
/*   61 */ ConstTerm: <INITIAL, Generic>'const' : Token;
/*   62 */ ConverseTerm: <INITIAL, Generic>'converse' : Token;
/*   63 */ DefaultTerm: <INITIAL, Generic>'default' : Token;
/*   64 */ ElseTerm: <INITIAL, Generic>'else' : Token;
/*   65 */ EmbedTerm: <INITIAL, Generic>'embed' : Token;
/*   66 */ EnumTerm: <INITIAL, Generic>'enum' : Token;
/*   67 */ F32Term: <INITIAL, Generic>'f32' : Token;
/*   68 */ F64Term: <INITIAL, Generic>'f64' : Token;
/*   69 */ FalseTerm: <INITIAL, Generic>'false' : Token;
/*   70 */ FinalTerm: <INITIAL, Generic>'final' : Token;
/*   71 */ ForTerm: <INITIAL, Generic>'for' : Token;
/*   72 */ FunctionTerm: <INITIAL, Generic>'function' : Token;
/*   73 */ I8Term: <INITIAL, Generic>'i8' : Token;
/*   74 */ I16Term: <INITIAL, Generic>'i16' : Token;
/*   75 */ I32Term: <INITIAL, Generic>'i32' : Token;
/*   76 */ I64Term: <INITIAL, Generic>'i64' : Token;
/*   77 */ IfResetTerm: <INITIAL, Generic>'if_reset' : Token;
/*   78 */ IfTerm: <INITIAL, Generic>'if' : Token;
/*   79 */ ImportTerm: <INITIAL, Generic>'import' : Token;
/*   80 */ IncludeTerm: <INITIAL, Generic>'include' : Token;
/*   81 */ InitialTerm: <INITIAL, Generic>'initial' : Token;
/*   82 */ InoutTerm: <INITIAL, Generic>'inout' : Token;
/*   83 */ InputTerm: <INITIAL, Generic>'input' : Token;
/*   84 */ InsideTerm: <INITIAL, Generic>'inside' : Token;
/*   85 */ InstTerm: <INITIAL, Generic>'inst' : Token;
/*   86 */ InterfaceTerm: <INITIAL, Generic>'interface' : Token;
/*   87 */ InTerm: <INITIAL, Generic>'in' : Token;
/*   88 */ LetTerm: <INITIAL, Generic>'let' : Token;
/*   89 */ LogicTerm: <INITIAL, Generic>'logic' : Token;
/*   90 */ LsbTerm: <INITIAL, Generic>'lsb' : Token;
/*   91 */ ModportTerm: <INITIAL, Generic>'modport' : Token;
/*   92 */ ModuleTerm: <INITIAL, Generic>'module' : Token;
/*   93 */ MsbTerm: <INITIAL, Generic>'msb' : Token;
/*   94 */ OutputTerm: <INITIAL, Generic>'output' : Token;
/*   95 */ OutsideTerm: <INITIAL, Generic>'outside' : Token;
/*   96 */ PackageTerm: <INITIAL, Generic>'package' : Token;
/*   97 */ ParamTerm: <INITIAL, Generic>'param' : Token;
/*   98 */ ProtoTerm: <INITIAL, Generic>'proto' : Token;
/*   99 */ PubTerm: <INITIAL, Generic>'pub' : Token;
/*  100 */ RepeatTerm: <INITIAL, Generic>'repeat' : Token;
/*  101 */ ResetTerm: <INITIAL, Generic>'reset' : Token;
/*  102 */ ResetAsyncHighTerm: <INITIAL, Generic>'reset_async_high' : Token;
/*  103 */ ResetAsyncLowTerm: <INITIAL, Generic>'reset_async_low' : Token;
/*  104 */ ResetSyncHighTerm: <INITIAL, Generic>'reset_sync_high' : Token;
/*  105 */ ResetSyncLowTerm: <INITIAL, Generic>'reset_sync_low' : Token;
/*  106 */ ReturnTerm: <INITIAL, Generic>'return' : Token;
/*  107 */ RevTerm: <INITIAL, Generic>'rev' : Token;
/*  108 */ BreakTerm: <INITIAL, Generic>'break' : Token;
/*  109 */ SameTerm: <INITIAL, Generic>'same' : Token;
/*  110 */ SignedTerm: <INITIAL, Generic>'signed' : Token;
/*  111 */ StepTerm: <INITIAL, Generic>'step' : Token;
/*  112 */ StringTerm: <INITIAL, Generic>'string' : Token;
/*  113 */ StructTerm: <INITIAL, Generic>'struct' : Token;
/*  114 */ SwitchTerm: <INITIAL, Generic>'switch' : Token;
/*  115 */ TriTerm: <INITIAL, Generic>'tri' : Token;
/*  116 */ TrueTerm: <INITIAL, Generic>'true' : Token;
/*  117 */ TypeTerm: <INITIAL, Generic>'type' : Token;
/*  118 */ U8Term: <INITIAL, Generic>'u8' : Token;
/*  119 */ U16Term: <INITIAL, Generic>'u16' : Token;
/*  120 */ U32Term: <INITIAL, Generic>'u32' : Token;
/*  121 */ U64Term: <INITIAL, Generic>'u64' : Token;
/*  122 */ UnionTerm: <INITIAL, Generic>'union' : Token;
/*  123 */ UnsafeTerm: <INITIAL, Generic>'unsafe' : Token;
/*  124 */ VarTerm: <INITIAL, Generic>'var' : Token;
/*  125 */ DollarIdentifierTerm: <INITIAL, Generic>/\$[a-zA-Z_][0-9a-zA-Z_$]*/ : Token;
/*  126 */ IdentifierTerm: <INITIAL, Generic, Attr>/(?:r#)?[a-zA-Z_][0-9a-zA-Z_$]*/ : Token;
/*  127 */ AnyTerm: <Embed, EmbedInner>/[^{}]+/ : Token;
/*  128 */ Comments: CommentsOpt /* Option */;
/*  129 */ CommentsOpt /* Option<T>::Some */: CommentsTerm;
/*  130 */ CommentsOpt /* Option<T>::None */: ;
/*  131 */ StartToken: Comments;
/*  132 */ StringLiteralToken: StringLiteralTerm : Token Comments;
/*  133 */ ExponentToken: ExponentTerm : Token Comments;
/*  134 */ FixedPointToken: FixedPointTerm : Token Comments;
/*  135 */ BasedToken: BasedTerm : Token Comments;
/*  136 */ BaseLessToken: BaseLessTerm : Token Comments;
/*  137 */ AllBitToken: AllBitTerm : Token Comments;
/*  138 */ AssignmentOperatorToken: AssignmentOperatorTerm : Token Comments;
/*  139 */ DiamondOperatorToken: DiamondOperatorTerm : Token Comments;
/*  140 */ Operator02Token: Operator02Term : Token Comments;
/*  141 */ Operator03Token: Operator03Term : Token Comments;
/*  142 */ Operator04Token: Operator04Term : Token Comments;
/*  143 */ Operator05Token: Operator05Term : Token Comments;
/*  144 */ Operator06Token: Operator06Term : Token Comments;
/*  145 */ Operator07Token: Operator07Term : Token Comments;
/*  146 */ Operator08Token: Operator08Term : Token Comments;
/*  147 */ Operator09Token: Operator09Term : Token Comments;
/*  148 */ Operator10Token: Operator10Term : Token Comments;
/*  149 */ Operator11Token: Operator11Term : Token Comments;
/*  150 */ Operator12Token: Operator12Term : Token Comments;
/*  151 */ UnaryOperatorToken: UnaryOperatorTerm : Token Comments;
/*  152 */ ColonToken: ColonTerm : Token Comments;
/*  153 */ ColonColonLAngleToken: ColonColonLAngleTerm : Token Comments;
/*  154 */ ColonColonToken: ColonColonTerm : Token Comments;
/*  155 */ CommaToken: CommaTerm : Token Comments;
/*  156 */ DotDotToken: DotDotTerm : Token Comments;
/*  157 */ DotDotEquToken: DotDotEquTerm : Token Comments;
/*  158 */ DotToken: DotTerm : Token Comments;
/*  159 */ EquToken: EquTerm : Token Comments;
/*  160 */ HashLBracketToken: HashLBracketTerm : Token Comments;
/*  161 */ HashToken: HashTerm : Token Comments;
/*  162 */ QuestionToken: QuestionTerm : Token Comments;
/*  163 */ QuoteLBraceToken: QuoteLBraceTerm : Token Comments;
/*  164 */ QuoteToken: QuoteTerm : Token Comments;
/*  165 */ LAngleToken: LAngleTerm : Token Comments;
/*  166 */ EmbedLBraceToken: LBraceTerm : Token;
/*  167 */ TripleLBraceToken: TripleLBraceTerm : Token;
/*  168 */ LBraceToken: LBraceTerm : Token Comments;
/*  169 */ LBracketToken: LBracketTerm : Token Comments;
/*  170 */ LParenToken: LParenTerm : Token Comments;
/*  171 */ MinusColonToken: MinusColonTerm : Token Comments;
/*  172 */ MinusGTToken: MinusGTTerm : Token Comments;
/*  173 */ PlusColonToken: PlusColonTerm : Token Comments;
/*  174 */ RAngleToken: RAngleTerm : Token Comments;
/*  175 */ EmbedRBraceToken: RBraceTerm : Token;
/*  176 */ TripleRBraceToken: TripleRBraceTerm : Token Comments;
/*  177 */ RBraceToken: RBraceTerm : Token Comments;
/*  178 */ RBracketToken: RBracketTerm : Token Comments;
/*  179 */ RParenToken: RParenTerm : Token Comments;
/*  180 */ SemicolonToken: SemicolonTerm : Token Comments;
/*  181 */ StarToken: StarTerm : Token Comments;
/*  182 */ AliasToken: AliasTerm : Token Comments;
/*  183 */ AlwaysCombToken: AlwaysCombTerm : Token Comments;
/*  184 */ AlwaysFfToken: AlwaysFfTerm : Token Comments;
/*  185 */ AsToken: AsTerm : Token Comments;
/*  186 */ AssignToken: AssignTerm : Token Comments;
/*  187 */ BitToken: BitTerm : Token Comments;
/*  188 */ BoolToken: BoolTerm : Token Comments;
/*  189 */ CaseToken: CaseTerm : Token Comments;
/*  190 */ ClockToken: ClockTerm : Token Comments;
/*  191 */ ClockPosedgeToken: ClockPosedgeTerm : Token Comments;
/*  192 */ ClockNegedgeToken: ClockNegedgeTerm : Token Comments;
/*  193 */ ConnectToken: ConnectTerm : Token Comments;
/*  194 */ ConstToken: ConstTerm : Token Comments;
/*  195 */ ConverseToken: ConverseTerm : Token Comments;
/*  196 */ DefaultToken: DefaultTerm : Token Comments;
/*  197 */ ElseToken: ElseTerm : Token Comments;
/*  198 */ EmbedToken: EmbedTerm : Token Comments;
/*  199 */ EnumToken: EnumTerm : Token Comments;
/*  200 */ F32Token: F32Term : Token Comments;
/*  201 */ F64Token: F64Term : Token Comments;
/*  202 */ FalseToken: FalseTerm : Token Comments;
/*  203 */ FinalToken: FinalTerm : Token Comments;
/*  204 */ ForToken: ForTerm : Token Comments;
/*  205 */ FunctionToken: FunctionTerm : Token Comments;
/*  206 */ I8Token: I8Term : Token Comments;
/*  207 */ I16Token: I16Term : Token Comments;
/*  208 */ I32Token: I32Term : Token Comments;
/*  209 */ I64Token: I64Term : Token Comments;
/*  210 */ IfResetToken: IfResetTerm : Token Comments;
/*  211 */ IfToken: IfTerm : Token Comments;
/*  212 */ ImportToken: ImportTerm : Token Comments;
/*  213 */ IncludeToken: IncludeTerm : Token Comments;
/*  214 */ InitialToken: InitialTerm : Token Comments;
/*  215 */ InoutToken: InoutTerm : Token Comments;
/*  216 */ InputToken: InputTerm : Token Comments;
/*  217 */ InsideToken: InsideTerm : Token Comments;
/*  218 */ InstToken: InstTerm : Token Comments;
/*  219 */ InterfaceToken: InterfaceTerm : Token Comments;
/*  220 */ InToken: InTerm : Token Comments;
/*  221 */ LetToken: LetTerm : Token Comments;
/*  222 */ LogicToken: LogicTerm : Token Comments;
/*  223 */ LsbToken: LsbTerm : Token Comments;
/*  224 */ ModportToken: ModportTerm : Token Comments;
/*  225 */ ModuleToken: ModuleTerm : Token Comments;
/*  226 */ MsbToken: MsbTerm : Token Comments;
/*  227 */ OutputToken: OutputTerm : Token Comments;
/*  228 */ OutsideToken: OutsideTerm : Token Comments;
/*  229 */ PackageToken: PackageTerm : Token Comments;
/*  230 */ ParamToken: ParamTerm : Token Comments;
/*  231 */ ProtoToken: ProtoTerm : Token Comments;
/*  232 */ PubToken: PubTerm : Token Comments;
/*  233 */ RepeatToken: RepeatTerm : Token Comments;
/*  234 */ ResetToken: ResetTerm : Token Comments;
/*  235 */ ResetAsyncHighToken: ResetAsyncHighTerm : Token Comments;
/*  236 */ ResetAsyncLowToken: ResetAsyncLowTerm : Token Comments;
/*  237 */ ResetSyncHighToken: ResetSyncHighTerm : Token Comments;
/*  238 */ ResetSyncLowToken: ResetSyncLowTerm : Token Comments;
/*  239 */ ReturnToken: ReturnTerm : Token Comments;
/*  240 */ RevToken: RevTerm : Token Comments;
/*  241 */ BreakToken: BreakTerm : Token Comments;
/*  242 */ SameToken: SameTerm : Token Comments;
/*  243 */ SignedToken: SignedTerm : Token Comments;
/*  244 */ StepToken: StepTerm : Token Comments;
/*  245 */ StringToken: StringTerm : Token Comments;
/*  246 */ StructToken: StructTerm : Token Comments;
/*  247 */ SwitchToken: SwitchTerm : Token Comments;
/*  248 */ TriToken: TriTerm : Token Comments;
/*  249 */ TrueToken: TrueTerm : Token Comments;
/*  250 */ TypeToken: TypeTerm : Token Comments;
/*  251 */ U8Token: U8Term : Token Comments;
/*  252 */ U16Token: U16Term : Token Comments;
/*  253 */ U32Token: U32Term : Token Comments;
/*  254 */ U64Token: U64Term : Token Comments;
/*  255 */ UnionToken: UnionTerm : Token Comments;
/*  256 */ UnsafeToken: UnsafeTerm : Token Comments;
/*  257 */ VarToken: VarTerm : Token Comments;
/*  258 */ DollarIdentifierToken: DollarIdentifierTerm : Token Comments;
/*  259 */ IdentifierToken: IdentifierTerm : Token Comments;
/*  260 */ AnyToken: AnyTerm : Token;
/*  261 */ Start: StartToken : VerylToken;
/*  262 */ StringLiteral: StringLiteralToken : VerylToken;
/*  263 */ Exponent: ExponentToken : VerylToken;
/*  264 */ FixedPoint: FixedPointToken : VerylToken;
/*  265 */ Based: BasedToken : VerylToken;
/*  266 */ BaseLess: BaseLessToken : VerylToken;
/*  267 */ AllBit: AllBitToken : VerylToken;
/*  268 */ AssignmentOperator: AssignmentOperatorToken : VerylToken;
/*  269 */ DiamondOperator: DiamondOperatorToken : VerylToken;
/*  270 */ Operator02: Operator02Token : VerylToken;
/*  271 */ Operator03: Operator03Token : VerylToken;
/*  272 */ Operator04: Operator04Token : VerylToken;
/*  273 */ Operator05: Operator05Token : VerylToken;
/*  274 */ Operator06: Operator06Token : VerylToken;
/*  275 */ Operator07: Operator07Token : VerylToken;
/*  276 */ Operator08: Operator08Token : VerylToken;
/*  277 */ Operator09: Operator09Token : VerylToken;
/*  278 */ Operator10: Operator10Token : VerylToken;
/*  279 */ Operator11: Operator11Token : VerylToken;
/*  280 */ Operator12: Operator12Token : VerylToken;
/*  281 */ UnaryOperator: UnaryOperatorToken : VerylToken;
/*  282 */ Colon: ColonToken : VerylToken;
/*  283 */ ColonColonLAngle: ColonColonLAngleToken : VerylToken;
/*  284 */ ColonColon: ColonColonToken : VerylToken;
/*  285 */ Comma: CommaToken : VerylToken;
/*  286 */ DotDot: DotDotToken : VerylToken;
/*  287 */ DotDotEqu: DotDotEquToken : VerylToken;
/*  288 */ Dot: DotToken : VerylToken;
/*  289 */ Equ: EquToken : VerylToken;
/*  290 */ HashLBracket: HashLBracketToken : VerylToken;
/*  291 */ Hash: HashToken : VerylToken;
/*  292 */ Question: QuestionToken : VerylToken;
/*  293 */ QuoteLBrace: QuoteLBraceToken : VerylToken;
/*  294 */ Quote: QuoteToken : VerylToken;
/*  295 */ LAngle: LAngleToken : VerylToken;
/*  296 */ EmbedLBrace: EmbedLBraceToken : VerylToken;
/*  297 */ TripleLBrace: TripleLBraceToken : VerylToken;
/*  298 */ LBrace: LBraceToken : VerylToken;
/*  299 */ LBracket: LBracketToken : VerylToken;
/*  300 */ LParen: LParenToken : VerylToken;
/*  301 */ MinusColon: MinusColonToken : VerylToken;
/*  302 */ MinusGT: MinusGTToken : VerylToken;
/*  303 */ PlusColon: PlusColonToken : VerylToken;
/*  304 */ RAngle: RAngleToken : VerylToken;
/*  305 */ EmbedRBrace: EmbedRBraceToken : VerylToken;
/*  306 */ TripleRBrace: TripleRBraceToken : VerylToken;
/*  307 */ RBrace: RBraceToken : VerylToken;
/*  308 */ RBracket: RBracketToken : VerylToken;
/*  309 */ RParen: RParenToken : VerylToken;
/*  310 */ Semicolon: SemicolonToken : VerylToken;
/*  311 */ Star: StarToken : VerylToken;
/*  312 */ Alias: AliasToken : VerylToken;
/*  313 */ AlwaysComb: AlwaysCombToken : VerylToken;
/*  314 */ AlwaysFf: AlwaysFfToken : VerylToken;
/*  315 */ As: AsToken : VerylToken;
/*  316 */ Assign: AssignToken : VerylToken;
/*  317 */ Bit: BitToken : VerylToken;
/*  318 */ Bool: BoolToken : VerylToken;
/*  319 */ Break: BreakToken : VerylToken;
/*  320 */ Case: CaseToken : VerylToken;
/*  321 */ Clock: ClockToken : VerylToken;
/*  322 */ ClockPosedge: ClockPosedgeToken : VerylToken;
/*  323 */ ClockNegedge: ClockNegedgeToken : VerylToken;
/*  324 */ Connect: ConnectToken : VerylToken;
/*  325 */ Const: ConstToken : VerylToken;
/*  326 */ Converse: ConverseToken : VerylToken;
/*  327 */ Defaul: DefaultToken : VerylToken;
/*  328 */ Else: ElseToken : VerylToken;
/*  329 */ Embed: EmbedToken : VerylToken;
/*  330 */ Enum: EnumToken : VerylToken;
/*  331 */ F32: F32Token : VerylToken;
/*  332 */ F64: F64Token : VerylToken;
/*  333 */ False: FalseToken : VerylToken;
/*  334 */ Final: FinalToken : VerylToken;
/*  335 */ For: ForToken : VerylToken;
/*  336 */ Function: FunctionToken : VerylToken;
/*  337 */ I8: I8Token : VerylToken;
/*  338 */ I16: I16Token : VerylToken;
/*  339 */ I32: I32Token : VerylToken;
/*  340 */ I64: I64Token : VerylToken;
/*  341 */ If: IfToken : VerylToken;
/*  342 */ IfReset: IfResetToken : VerylToken;
/*  343 */ Import: ImportToken : VerylToken;
/*  344 */ In: InToken : VerylToken;
/*  345 */ Include: IncludeToken : VerylToken;
/*  346 */ Initial: InitialToken : VerylToken;
/*  347 */ Inout: InoutToken : VerylToken;
/*  348 */ Input: InputToken : VerylToken;
/*  349 */ Inside: InsideToken : VerylToken;
/*  350 */ Inst: InstToken : VerylToken;
/*  351 */ Interface: InterfaceToken : VerylToken;
/*  352 */ Let: LetToken : VerylToken;
/*  353 */ Logic: LogicToken : VerylToken;
/*  354 */ Lsb: LsbToken : VerylToken;
/*  355 */ Modport: ModportToken : VerylToken;
/*  356 */ Module: ModuleToken : VerylToken;
/*  357 */ Msb: MsbToken : VerylToken;
/*  358 */ Output: OutputToken : VerylToken;
/*  359 */ Outside: OutsideToken : VerylToken;
/*  360 */ Package: PackageToken : VerylToken;
/*  361 */ Param: ParamToken : VerylToken;
/*  362 */ Proto: ProtoToken : VerylToken;
/*  363 */ Pub: PubToken : VerylToken;
/*  364 */ Repeat: RepeatToken : VerylToken;
/*  365 */ Reset: ResetToken : VerylToken;
/*  366 */ ResetAsyncHigh: ResetAsyncHighToken : VerylToken;
/*  367 */ ResetAsyncLow: ResetAsyncLowToken : VerylToken;
/*  368 */ ResetSyncHigh: ResetSyncHighToken : VerylToken;
/*  369 */ ResetSyncLow: ResetSyncLowToken : VerylToken;
/*  370 */ Return: ReturnToken : VerylToken;
/*  371 */ Rev: RevToken : VerylToken;
/*  372 */ Same: SameToken : VerylToken;
/*  373 */ Signed: SignedToken : VerylToken;
/*  374 */ Step: StepToken : VerylToken;
/*  375 */ Strin: StringToken : VerylToken;
/*  376 */ Struct: StructToken : VerylToken;
/*  377 */ Switch: SwitchToken : VerylToken;
/*  378 */ Tri: TriToken : VerylToken;
/*  379 */ True: TrueToken : VerylToken;
/*  380 */ Type: TypeToken : VerylToken;
/*  381 */ U8: U8Token : VerylToken;
/*  382 */ U16: U16Token : VerylToken;
/*  383 */ U32: U32Token : VerylToken;
/*  384 */ U64: U64Token : VerylToken;
/*  385 */ Union: UnionToken : VerylToken;
/*  386 */ Unsafe: UnsafeToken : VerylToken;
/*  387 */ Var: VarToken : VerylToken;
/*  388 */ DollarIdentifier: DollarIdentifierToken : VerylToken;
/*  389 */ Identifier: IdentifierToken : VerylToken;
/*  390 */ Any: AnyToken : VerylToken;
/*  391 */ Number: IntegralNumber;
/*  392 */ Number: RealNumber;
/*  393 */ IntegralNumber: Based;
/*  394 */ IntegralNumber: BaseLess;
/*  395 */ IntegralNumber: AllBit;
/*  396 */ RealNumber: FixedPoint;
/*  397 */ RealNumber: Exponent;
/*  398 */ HierarchicalIdentifier: Identifier HierarchicalIdentifierList /* Vec */ HierarchicalIdentifierList0 /* Vec */;
/*  399 */ HierarchicalIdentifierList0 /* Vec<T>::Push */: Dot Identifier HierarchicalIdentifierList0List /* Vec */ HierarchicalIdentifierList0;
/*  400 */ HierarchicalIdentifierList0List /* Vec<T>::Push */: Select HierarchicalIdentifierList0List;
/*  401 */ HierarchicalIdentifierList0List /* Vec<T>::New */: ;
/*  402 */ HierarchicalIdentifierList0 /* Vec<T>::New */: ;
/*  403 */ HierarchicalIdentifierList /* Vec<T>::Push */: Select HierarchicalIdentifierList;
/*  404 */ HierarchicalIdentifierList /* Vec<T>::New */: ;
/*  405 */ ScopedIdentifier: ScopedIdentifierGroup ScopedIdentifierList /* Vec */;
/*  406 */ ScopedIdentifierGroup: DollarIdentifier;
/*  407 */ ScopedIdentifierGroup: Identifier ScopedIdentifierOpt /* Option */;
/*  408 */ ScopedIdentifierList /* Vec<T>::Push */: ColonColon Identifier ScopedIdentifierOpt0 /* Option */ ScopedIdentifierList;
/*  409 */ ScopedIdentifierList /* Vec<T>::New */: ;
/*  410 */ ScopedIdentifierOpt0 /* Option<T>::Some */: WithGenericArgument;
/*  411 */ ScopedIdentifierOpt0 /* Option<T>::None */: ;
/*  412 */ ScopedIdentifierOpt /* Option<T>::Some */: WithGenericArgument;
/*  413 */ ScopedIdentifierOpt /* Option<T>::None */: ;
/*  414 */ ExpressionIdentifier: ScopedIdentifier ExpressionIdentifierOpt /* Option */ ExpressionIdentifierList /* Vec */ ExpressionIdentifierList0 /* Vec */;
/*  415 */ ExpressionIdentifierList0 /* Vec<T>::Push */: Dot Identifier ExpressionIdentifierList0List /* Vec */ ExpressionIdentifierList0;
/*  416 */ ExpressionIdentifierList0List /* Vec<T>::Push */: Select ExpressionIdentifierList0List;
/*  417 */ ExpressionIdentifierList0List /* Vec<T>::New */: ;
/*  418 */ ExpressionIdentifierList0 /* Vec<T>::New */: ;
/*  419 */ ExpressionIdentifierList /* Vec<T>::Push */: Select ExpressionIdentifierList;
/*  420 */ ExpressionIdentifierList /* Vec<T>::New */: ;
/*  421 */ ExpressionIdentifierOpt /* Option<T>::Some */: Width;
/*  422 */ ExpressionIdentifierOpt /* Option<T>::None */: ;
/*  423 */ Expression: IfExpression;
/*  424 */ IfExpression: IfExpressionList /* Vec */ Expression01;
/*  425 */ IfExpressionList /* Vec<T>::Push */: If Expression Question Expression Colon IfExpressionList;
/*  426 */ IfExpressionList /* Vec<T>::New */: ;
/*  427 */ Expression01: Expression02 Expression01List /* Vec */;
/*  428 */ Expression01List /* Vec<T>::Push */: Operator02 Expression02 Expression01List;
/*  429 */ Expression01List /* Vec<T>::New */: ;
/*  430 */ Expression02: Expression03 Expression02List /* Vec */;
/*  431 */ Expression02List /* Vec<T>::Push */: Operator03 Expression03 Expression02List;
/*  432 */ Expression02List /* Vec<T>::New */: ;
/*  433 */ Expression03: Expression04 Expression03List /* Vec */;
/*  434 */ Expression03List /* Vec<T>::Push */: Operator04 Expression04 Expression03List;
/*  435 */ Expression03List /* Vec<T>::New */: ;
/*  436 */ Expression04: Expression05 Expression04List /* Vec */;
/*  437 */ Expression04List /* Vec<T>::Push */: Operator05 Expression05 Expression04List;
/*  438 */ Expression04List /* Vec<T>::New */: ;
/*  439 */ Expression05: Expression06 Expression05List /* Vec */;
/*  440 */ Expression05List /* Vec<T>::Push */: Operator06 Expression06 Expression05List;
/*  441 */ Expression05List /* Vec<T>::New */: ;
/*  442 */ Expression06: Expression07 Expression06List /* Vec */;
/*  443 */ Expression06List /* Vec<T>::Push */: Operator07 Expression07 Expression06List;
/*  444 */ Expression06List /* Vec<T>::New */: ;
/*  445 */ Expression07: Expression08 Expression07List /* Vec */;
/*  446 */ Expression07List /* Vec<T>::Push */: Operator08 Expression08 Expression07List;
/*  447 */ Expression07List /* Vec<T>::New */: ;
/*  448 */ Expression08: Expression09 Expression08List /* Vec */;
/*  449 */ Expression08List /* Vec<T>::Push */: Operator09 Expression09 Expression08List;
/*  450 */ Expression08List /* Vec<T>::New */: ;
/*  451 */ Expression09: Expression10 Expression09List /* Vec */;
/*  452 */ Expression09List /* Vec<T>::Push */: Operator10 Expression10 Expression09List;
/*  453 */ Expression09List /* Vec<T>::New */: ;
/*  454 */ Expression10: Expression11 Expression10List /* Vec */;
/*  455 */ Expression10List /* Vec<T>::Push */: Expression10ListGroup Expression11 Expression10List;
/*  456 */ Expression10ListGroup: Operator11;
/*  457 */ Expression10ListGroup: Star;
/*  458 */ Expression10List /* Vec<T>::New */: ;
/*  459 */ Expression11: Expression12 Expression11List /* Vec */;
/*  460 */ Expression11List /* Vec<T>::Push */: Operator12 Expression12 Expression11List;
/*  461 */ Expression11List /* Vec<T>::New */: ;
/*  462 */ Expression12: Expression13 Expression12Opt /* Option */;
/*  463 */ Expression12Opt /* Option<T>::Some */: As CastingType;
/*  464 */ Expression12Opt /* Option<T>::None */: ;
/*  465 */ Expression13: Expression13List /* Vec */ Factor;
/*  466 */ Expression13List /* Vec<T>::Push */: Expression13ListGroup Expression13List;
/*  467 */ Expression13ListGroup: UnaryOperator;
/*  468 */ Expression13ListGroup: Operator10;
/*  469 */ Expression13ListGroup: Operator06;
/*  470 */ Expression13ListGroup: Operator04;
/*  471 */ Expression13ListGroup: Operator05;
/*  472 */ Expression13List /* Vec<T>::New */: ;
/*  473 */ Factor: Number;
/*  474 */ Factor: BooleanLiteral;
/*  475 */ Factor: IdentifierFactor;
/*  476 */ Factor: LParen Expression RParen;
/*  477 */ Factor: LBrace ConcatenationList RBrace;
/*  478 */ Factor: QuoteLBrace ArrayLiteralList RBrace;
/*  479 */ Factor: CaseExpression;
/*  480 */ Factor: SwitchExpression;
/*  481 */ Factor: StringLiteral;
/*  482 */ Factor: FactorGroup;
/*  483 */ FactorGroup: Msb;
/*  484 */ FactorGroup: Lsb;
/*  485 */ Factor: InsideExpression;
/*  486 */ Factor: OutsideExpression;
/*  487 */ Factor: TypeExpression;
/*  488 */ Factor: FactorTypeFactor;
/*  489 */ BooleanLiteral: True;
/*  490 */ BooleanLiteral: False;
/*  491 */ IdentifierFactor: ExpressionIdentifier IdentifierFactorOpt /* Option */;
/*  492 */ IdentifierFactorOpt /* Option<T>::Some */: IdentifierFactorOptGroup;
/*  493 */ IdentifierFactorOptGroup: FunctionCall;
/*  494 */ IdentifierFactorOptGroup: StructConstructor;
/*  495 */ IdentifierFactorOpt /* Option<T>::None */: ;
/*  496 */ FactorTypeFactor: FactorTypeFactorList /* Vec */ FactorType;
/*  497 */ FactorTypeFactorList /* Vec<T>::Push */: TypeModifier FactorTypeFactorList;
/*  498 */ FactorTypeFactorList /* Vec<T>::New */: ;
/*  499 */ FunctionCall: LParen FunctionCallOpt /* Option */ RParen;
/*  500 */ FunctionCallOpt /* Option<T>::Some */: ArgumentList;
/*  501 */ FunctionCallOpt /* Option<T>::None */: ;
/*  502 */ ArgumentList: ArgumentItem ArgumentListList /* Vec */ ArgumentListOpt /* Option */;
/*  503 */ ArgumentListList /* Vec<T>::Push */: Comma ArgumentItem ArgumentListList;
/*  504 */ ArgumentListList /* Vec<T>::New */: ;
/*  505 */ ArgumentListOpt /* Option<T>::Some */: Comma;
/*  506 */ ArgumentListOpt /* Option<T>::None */: ;
/*  507 */ ArgumentItem: ArgumentExpression ArgumentItemOpt /* Option */;
/*  508 */ ArgumentItemOpt /* Option<T>::Some */: Colon Expression;
/*  509 */ ArgumentItemOpt /* Option<T>::None */: ;
/*  510 */ ArgumentExpression: Expression;
/*  511 */ StructConstructor: QuoteLBrace StructConstructorList StructConstructorOpt /* Option */ RBrace;
/*  512 */ StructConstructorOpt /* Option<T>::Some */: DotDot Defaul LParen Expression RParen;
/*  513 */ StructConstructorOpt /* Option<T>::None */: ;
/*  514 */ StructConstructorList: StructConstructorItem StructConstructorListList /* Vec */ StructConstructorListOpt /* Option */;
/*  515 */ StructConstructorListList /* Vec<T>::Push */: Comma StructConstructorItem StructConstructorListList;
/*  516 */ StructConstructorListList /* Vec<T>::New */: ;
/*  517 */ StructConstructorListOpt /* Option<T>::Some */: Comma;
/*  518 */ StructConstructorListOpt /* Option<T>::None */: ;
/*  519 */ StructConstructorItem: Identifier Colon Expression;
/*  520 */ ConcatenationList: ConcatenationItem ConcatenationListList /* Vec */ ConcatenationListOpt /* Option */;
/*  521 */ ConcatenationListList /* Vec<T>::Push */: Comma ConcatenationItem ConcatenationListList;
/*  522 */ ConcatenationListList /* Vec<T>::New */: ;
/*  523 */ ConcatenationListOpt /* Option<T>::Some */: Comma;
/*  524 */ ConcatenationListOpt /* Option<T>::None */: ;
/*  525 */ ConcatenationItem: Expression ConcatenationItemOpt /* Option */;
/*  526 */ ConcatenationItemOpt /* Option<T>::Some */: Repeat Expression;
/*  527 */ ConcatenationItemOpt /* Option<T>::None */: ;
/*  528 */ ArrayLiteralList: ArrayLiteralItem ArrayLiteralListList /* Vec */ ArrayLiteralListOpt /* Option */;
/*  529 */ ArrayLiteralListList /* Vec<T>::Push */: Comma ArrayLiteralItem ArrayLiteralListList;
/*  530 */ ArrayLiteralListList /* Vec<T>::New */: ;
/*  531 */ ArrayLiteralListOpt /* Option<T>::Some */: Comma;
/*  532 */ ArrayLiteralListOpt /* Option<T>::None */: ;
/*  533 */ ArrayLiteralItem: ArrayLiteralItemGroup;
/*  534 */ ArrayLiteralItemGroup: Expression ArrayLiteralItemOpt /* Option */;
/*  535 */ ArrayLiteralItemGroup: Defaul Colon Expression;
/*  536 */ ArrayLiteralItemOpt /* Option<T>::Some */: Repeat Expression;
/*  537 */ ArrayLiteralItemOpt /* Option<T>::None */: ;
/*  538 */ CaseExpression: Case Expression LBrace CaseCondition Colon Expression Comma CaseExpressionList /* Vec */ Defaul Colon Expression CaseExpressionOpt /* Option */ RBrace;
/*  539 */ CaseExpressionList /* Vec<T>::Push */: CaseCondition Colon Expression Comma CaseExpressionList;
/*  540 */ CaseExpressionList /* Vec<T>::New */: ;
/*  541 */ CaseExpressionOpt /* Option<T>::Some */: Comma;
/*  542 */ CaseExpressionOpt /* Option<T>::None */: ;
/*  543 */ SwitchExpression: Switch LBrace SwitchCondition Colon Expression Comma SwitchExpressionList /* Vec */ Defaul Colon Expression SwitchExpressionOpt /* Option */ RBrace;
/*  544 */ SwitchExpressionList /* Vec<T>::Push */: SwitchCondition Colon Expression Comma SwitchExpressionList;
/*  545 */ SwitchExpressionList /* Vec<T>::New */: ;
/*  546 */ SwitchExpressionOpt /* Option<T>::Some */: Comma;
/*  547 */ SwitchExpressionOpt /* Option<T>::None */: ;
/*  548 */ TypeExpression: Type LParen Expression RParen;
/*  549 */ InsideExpression: Inside Expression LBrace RangeList RBrace;
/*  550 */ OutsideExpression: Outside Expression LBrace RangeList RBrace;
/*  551 */ RangeList: RangeItem RangeListList /* Vec */ RangeListOpt /* Option */;
/*  552 */ RangeListList /* Vec<T>::Push */: Comma RangeItem RangeListList;
/*  553 */ RangeListList /* Vec<T>::New */: ;
/*  554 */ RangeListOpt /* Option<T>::Some */: Comma;
/*  555 */ RangeListOpt /* Option<T>::None */: ;
/*  556 */ RangeItem: Range;
/*  557 */ Select: LBracket Expression SelectOpt /* Option */ RBracket;
/*  558 */ SelectOpt /* Option<T>::Some */: SelectOperator Expression;
/*  559 */ SelectOpt /* Option<T>::None */: ;
/*  560 */ SelectOperator: Colon;
/*  561 */ SelectOperator: PlusColon;
/*  562 */ SelectOperator: MinusColon;
/*  563 */ SelectOperator: Step;
/*  564 */ Width: LAngle Expression WidthList /* Vec */ RAngle;
/*  565 */ WidthList /* Vec<T>::Push */: Comma Expression WidthList;
/*  566 */ WidthList /* Vec<T>::New */: ;
/*  567 */ Array: LBracket Expression ArrayList /* Vec */ RBracket;
/*  568 */ ArrayList /* Vec<T>::Push */: Comma Expression ArrayList;
/*  569 */ ArrayList /* Vec<T>::New */: ;
/*  570 */ Range: Expression RangeOpt /* Option */;
/*  571 */ RangeOpt /* Option<T>::Some */: RangeOperator Expression;
/*  572 */ RangeOpt /* Option<T>::None */: ;
/*  573 */ RangeOperator: DotDot;
/*  574 */ RangeOperator: DotDotEqu;
/*  575 */ FixedType: U8;
/*  576 */ FixedType: U16;
/*  577 */ FixedType: U32;
/*  578 */ FixedType: U64;
/*  579 */ FixedType: I8;
/*  580 */ FixedType: I16;
/*  581 */ FixedType: I32;
/*  582 */ FixedType: I64;
/*  583 */ FixedType: F32;
/*  584 */ FixedType: F64;
/*  585 */ FixedType: Bool;
/*  586 */ FixedType: Strin;
/*  587 */ VariableType: Clock;
/*  588 */ VariableType: ClockPosedge;
/*  589 */ VariableType: ClockNegedge;
/*  590 */ VariableType: Reset;
/*  591 */ VariableType: ResetAsyncHigh;
/*  592 */ VariableType: ResetAsyncLow;
/*  593 */ VariableType: ResetSyncHigh;
/*  594 */ VariableType: ResetSyncLow;
/*  595 */ VariableType: Logic;
/*  596 */ VariableType: Bit;
/*  597 */ UserDefinedType: ScopedIdentifier;
/*  598 */ TypeModifier: Tri;
/*  599 */ TypeModifier: Signed;
/*  600 */ TypeModifier: Defaul;
/*  601 */ FactorType: FactorTypeGroup;
/*  602 */ FactorTypeGroup: VariableType FactorTypeOpt /* Option */;
/*  603 */ FactorTypeGroup: FixedType;
/*  604 */ FactorTypeOpt /* Option<T>::Some */: Width;
/*  605 */ FactorTypeOpt /* Option<T>::None */: ;
/*  606 */ ScalarType: ScalarTypeList /* Vec */ ScalarTypeGroup;
/*  607 */ ScalarTypeGroup: UserDefinedType ScalarTypeOpt /* Option */;
/*  608 */ ScalarTypeGroup: FactorType;
/*  609 */ ScalarTypeList /* Vec<T>::Push */: TypeModifier ScalarTypeList;
/*  610 */ ScalarTypeList /* Vec<T>::New */: ;
/*  611 */ ScalarTypeOpt /* Option<T>::Some */: Width;
/*  612 */ ScalarTypeOpt /* Option<T>::None */: ;
/*  613 */ ArrayType: ScalarType ArrayTypeOpt /* Option */;
/*  614 */ ArrayTypeOpt /* Option<T>::Some */: Array;
/*  615 */ ArrayTypeOpt /* Option<T>::None */: ;
/*  616 */ CastingType: U8;
/*  617 */ CastingType: U16;
/*  618 */ CastingType: U32;
/*  619 */ CastingType: U64;
/*  620 */ CastingType: I8;
/*  621 */ CastingType: I16;
/*  622 */ CastingType: I32;
/*  623 */ CastingType: I64;
/*  624 */ CastingType: F32;
/*  625 */ CastingType: F64;
/*  626 */ CastingType: Bool;
/*  627 */ CastingType: Clock;
/*  628 */ CastingType: ClockPosedge;
/*  629 */ CastingType: ClockNegedge;
/*  630 */ CastingType: Reset;
/*  631 */ CastingType: ResetAsyncHigh;
/*  632 */ CastingType: ResetAsyncLow;
/*  633 */ CastingType: ResetSyncHigh;
/*  634 */ CastingType: ResetSyncLow;
/*  635 */ CastingType: UserDefinedType;
/*  636 */ CastingType: Based;
/*  637 */ CastingType: BaseLess;
/*  638 */ ClockDomain: Quote Identifier;
/*  639 */ StatementBlock: LBrace StatementBlockList /* Vec */ RBrace;
/*  640 */ StatementBlockList /* Vec<T>::Push */: StatementBlockGroup StatementBlockList;
/*  641 */ StatementBlockList /* Vec<T>::New */: ;
/*  642 */ StatementBlockGroup: StatementBlockGroupList /* Vec */ StatementBlockGroupGroup;
/*  643 */ StatementBlockGroupGroup: LBrace StatementBlockGroupGroupList /* Vec */ RBrace;
/*  644 */ StatementBlockGroupGroupList /* Vec<T>::Push */: StatementBlockGroup StatementBlockGroupGroupList;
/*  645 */ StatementBlockGroupGroupList /* Vec<T>::New */: ;
/*  646 */ StatementBlockGroupGroup: StatementBlockItem;
/*  647 */ StatementBlockGroupList /* Vec<T>::Push */: Attribute StatementBlockGroupList;
/*  648 */ StatementBlockGroupList /* Vec<T>::New */: ;
/*  649 */ StatementBlockItem: VarDeclaration;
/*  650 */ StatementBlockItem: LetStatement;
/*  651 */ StatementBlockItem: ConstDeclaration;
/*  652 */ StatementBlockItem: Statement;
/*  653 */ Statement: IdentifierStatement;
/*  654 */ Statement: IfStatement;
/*  655 */ Statement: IfResetStatement;
/*  656 */ Statement: ReturnStatement;
/*  657 */ Statement: BreakStatement;
/*  658 */ Statement: ForStatement;
/*  659 */ Statement: CaseStatement;
/*  660 */ Statement: SwitchStatement;
/*  661 */ LetStatement: Let Identifier Colon LetStatementOpt /* Option */ ArrayType Equ Expression Semicolon;
/*  662 */ LetStatementOpt /* Option<T>::Some */: ClockDomain;
/*  663 */ LetStatementOpt /* Option<T>::None */: ;
/*  664 */ IdentifierStatement: ExpressionIdentifier IdentifierStatementGroup Semicolon;
/*  665 */ IdentifierStatementGroup: FunctionCall;
/*  666 */ IdentifierStatementGroup: Assignment;
/*  667 */ Assignment: AssignmentGroup Expression;
/*  668 */ AssignmentGroup: Equ;
/*  669 */ AssignmentGroup: AssignmentOperator;
/*  670 */ AssignmentGroup: DiamondOperator;
/*  671 */ IfStatement: If Expression StatementBlock IfStatementList /* Vec */ IfStatementOpt /* Option */;
/*  672 */ IfStatementList /* Vec<T>::Push */: Else If Expression StatementBlock IfStatementList;
/*  673 */ IfStatementList /* Vec<T>::New */: ;
/*  674 */ IfStatementOpt /* Option<T>::Some */: Else StatementBlock;
/*  675 */ IfStatementOpt /* Option<T>::None */: ;
/*  676 */ IfResetStatement: IfReset StatementBlock IfResetStatementList /* Vec */ IfResetStatementOpt /* Option */;
/*  677 */ IfResetStatementList /* Vec<T>::Push */: Else If Expression StatementBlock IfResetStatementList;
/*  678 */ IfResetStatementList /* Vec<T>::New */: ;
/*  679 */ IfResetStatementOpt /* Option<T>::Some */: Else StatementBlock;
/*  680 */ IfResetStatementOpt /* Option<T>::None */: ;
/*  681 */ ReturnStatement: Return Expression Semicolon;
/*  682 */ BreakStatement: Break Semicolon;
/*  683 */ ForStatement: For Identifier Colon ScalarType In ForStatementOpt /* Option */ Range ForStatementOpt0 /* Option */ StatementBlock;
/*  684 */ ForStatementOpt0 /* Option<T>::Some */: Step AssignmentOperator Expression;
/*  685 */ ForStatementOpt0 /* Option<T>::None */: ;
/*  686 */ ForStatementOpt /* Option<T>::Some */: Rev;
/*  687 */ ForStatementOpt /* Option<T>::None */: ;
/*  688 */ CaseStatement: Case Expression LBrace CaseStatementList /* Vec */ RBrace;
/*  689 */ CaseStatementList /* Vec<T>::Push */: CaseItem CaseStatementList;
/*  690 */ CaseStatementList /* Vec<T>::New */: ;
/*  691 */ CaseItem: CaseItemGroup Colon CaseItemGroup0;
/*  692 */ CaseItemGroup0: Statement;
/*  693 */ CaseItemGroup0: StatementBlock;
/*  694 */ CaseItemGroup: CaseCondition;
/*  695 */ CaseItemGroup: Defaul;
/*  696 */ CaseCondition: RangeItem CaseConditionList /* Vec */;
/*  697 */ CaseConditionList /* Vec<T>::Push */: Comma RangeItem CaseConditionList;
/*  698 */ CaseConditionList /* Vec<T>::New */: ;
/*  699 */ SwitchStatement: Switch LBrace SwitchStatementList /* Vec */ RBrace;
/*  700 */ SwitchStatementList /* Vec<T>::Push */: SwitchItem SwitchStatementList;
/*  701 */ SwitchStatementList /* Vec<T>::New */: ;
/*  702 */ SwitchItem: SwitchItemGroup Colon SwitchItemGroup0;
/*  703 */ SwitchItemGroup0: Statement;
/*  704 */ SwitchItemGroup0: StatementBlock;
/*  705 */ SwitchItemGroup: SwitchCondition;
/*  706 */ SwitchItemGroup: Defaul;
/*  707 */ SwitchCondition: Expression SwitchConditionList /* Vec */;
/*  708 */ SwitchConditionList /* Vec<T>::Push */: Comma Expression SwitchConditionList;
/*  709 */ SwitchConditionList /* Vec<T>::New */: ;
/*  710 */ Attribute: HashLBracket Identifier AttributeOpt /* Option */ RBracket;
/*  711 */ AttributeOpt /* Option<T>::Some */: LParen AttributeList RParen;
/*  712 */ AttributeOpt /* Option<T>::None */: ;
/*  713 */ AttributeList: AttributeItem AttributeListList /* Vec */ AttributeListOpt /* Option */;
/*  714 */ AttributeListList /* Vec<T>::Push */: Comma AttributeItem AttributeListList;
/*  715 */ AttributeListList /* Vec<T>::New */: ;
/*  716 */ AttributeListOpt /* Option<T>::Some */: Comma;
/*  717 */ AttributeListOpt /* Option<T>::None */: ;
/*  718 */ AttributeItem: Identifier;
/*  719 */ AttributeItem: StringLiteral;
/*  720 */ LetDeclaration: Let Identifier Colon LetDeclarationOpt /* Option */ ArrayType Equ Expression Semicolon;
/*  721 */ LetDeclarationOpt /* Option<T>::Some */: ClockDomain;
/*  722 */ LetDeclarationOpt /* Option<T>::None */: ;
/*  723 */ VarDeclaration: Var Identifier Colon VarDeclarationOpt /* Option */ ArrayType Semicolon;
/*  724 */ VarDeclarationOpt /* Option<T>::Some */: ClockDomain;
/*  725 */ VarDeclarationOpt /* Option<T>::None */: ;
/*  726 */ ConstDeclaration: Const Identifier Colon ConstDeclarationGroup Equ Expression Semicolon;
/*  727 */ ConstDeclarationGroup: ArrayType;
/*  728 */ ConstDeclarationGroup: Type;
/*  729 */ TypeDefDeclaration: Type Identifier Equ ArrayType Semicolon;
/*  730 */ AlwaysFfDeclaration: AlwaysFf AlwaysFfDeclarationOpt /* Option */ StatementBlock;
/*  731 */ AlwaysFfDeclarationOpt /* Option<T>::Some */: AlwaysFfEventList;
/*  732 */ AlwaysFfDeclarationOpt /* Option<T>::None */: ;
/*  733 */ AlwaysFfEventList: LParen AlwaysFfClock AlwaysFfEventListOpt /* Option */ RParen;
/*  734 */ AlwaysFfEventListOpt /* Option<T>::Some */: Comma AlwaysFfReset;
/*  735 */ AlwaysFfEventListOpt /* Option<T>::None */: ;
/*  736 */ AlwaysFfClock: HierarchicalIdentifier;
/*  737 */ AlwaysFfReset: HierarchicalIdentifier;
/*  738 */ AlwaysCombDeclaration: AlwaysComb StatementBlock;
/*  739 */ AssignDeclaration: Assign AssignDestination Equ Expression Semicolon;
/*  740 */ AssignDestination: HierarchicalIdentifier;
/*  741 */ AssignDestination: LBrace AssignConcatenationList RBrace;
/*  742 */ AssignConcatenationList: AssignConcatenationItem AssignConcatenationListList /* Vec */ AssignConcatenationListOpt /* Option */;
/*  743 */ AssignConcatenationListList /* Vec<T>::Push */: Comma AssignConcatenationItem AssignConcatenationListList;
/*  744 */ AssignConcatenationListList /* Vec<T>::New */: ;
/*  745 */ AssignConcatenationListOpt /* Option<T>::Some */: Comma;
/*  746 */ AssignConcatenationListOpt /* Option<T>::None */: ;
/*  747 */ AssignConcatenationItem: HierarchicalIdentifier;
/*  748 */ ConnectDeclaration: Connect HierarchicalIdentifier DiamondOperator Expression Semicolon;
/*  749 */ ModportDeclaration: Modport Identifier LBrace ModportDeclarationOpt /* Option */ ModportDeclarationOpt0 /* Option */ RBrace;
/*  750 */ ModportDeclarationOpt0 /* Option<T>::Some */: DotDot ModportDefault;
/*  751 */ ModportDeclarationOpt0 /* Option<T>::None */: ;
/*  752 */ ModportDeclarationOpt /* Option<T>::Some */: ModportList;
/*  753 */ ModportDeclarationOpt /* Option<T>::None */: ;
/*  754 */ ModportList: ModportGroup ModportListList /* Vec */ ModportListOpt /* Option */;
/*  755 */ ModportListList /* Vec<T>::Push */: Comma ModportGroup ModportListList;
/*  756 */ ModportListList /* Vec<T>::New */: ;
/*  757 */ ModportListOpt /* Option<T>::Some */: Comma;
/*  758 */ ModportListOpt /* Option<T>::None */: ;
/*  759 */ ModportGroup: ModportGroupList /* Vec */ ModportGroupGroup;
/*  760 */ ModportGroupGroup: LBrace ModportList RBrace;
/*  761 */ ModportGroupGroup: ModportItem;
/*  762 */ ModportGroupList /* Vec<T>::Push */: Attribute ModportGroupList;
/*  763 */ ModportGroupList /* Vec<T>::New */: ;
/*  764 */ ModportItem: Identifier Colon Direction;
/*  765 */ ModportDefault: Input;
/*  766 */ ModportDefault: Output;
/*  767 */ ModportDefault: Same LParen Identifier RParen;
/*  768 */ ModportDefault: Converse LParen Identifier RParen;
/*  769 */ EnumDeclaration: Enum Identifier EnumDeclarationOpt /* Option */ LBrace EnumList RBrace;
/*  770 */ EnumDeclarationOpt /* Option<T>::Some */: Colon ScalarType;
/*  771 */ EnumDeclarationOpt /* Option<T>::None */: ;
/*  772 */ EnumList: EnumGroup EnumListList /* Vec */ EnumListOpt /* Option */;
/*  773 */ EnumListList /* Vec<T>::Push */: Comma EnumGroup EnumListList;
/*  774 */ EnumListList /* Vec<T>::New */: ;
/*  775 */ EnumListOpt /* Option<T>::Some */: Comma;
/*  776 */ EnumListOpt /* Option<T>::None */: ;
/*  777 */ EnumGroup: EnumGroupList /* Vec */ EnumGroupGroup;
/*  778 */ EnumGroupGroup: LBrace EnumList RBrace;
/*  779 */ EnumGroupGroup: EnumItem;
/*  780 */ EnumGroupList /* Vec<T>::Push */: Attribute EnumGroupList;
/*  781 */ EnumGroupList /* Vec<T>::New */: ;
/*  782 */ EnumItem: Identifier EnumItemOpt /* Option */;
/*  783 */ EnumItemOpt /* Option<T>::Some */: Equ Expression;
/*  784 */ EnumItemOpt /* Option<T>::None */: ;
/*  785 */ StructUnion: Struct;
/*  786 */ StructUnion: Union;
/*  787 */ StructUnionDeclaration: StructUnion Identifier StructUnionDeclarationOpt /* Option */ LBrace StructUnionList RBrace;
/*  788 */ StructUnionDeclarationOpt /* Option<T>::Some */: WithGenericParameter;
/*  789 */ StructUnionDeclarationOpt /* Option<T>::None */: ;
/*  790 */ StructUnionList: StructUnionGroup StructUnionListList /* Vec */ StructUnionListOpt /* Option */;
/*  791 */ StructUnionListList /* Vec<T>::Push */: Comma StructUnionGroup StructUnionListList;
/*  792 */ StructUnionListList /* Vec<T>::New */: ;
/*  793 */ StructUnionListOpt /* Option<T>::Some */: Comma;
/*  794 */ StructUnionListOpt /* Option<T>::None */: ;
/*  795 */ StructUnionGroup: StructUnionGroupList /* Vec */ StructUnionGroupGroup;
/*  796 */ StructUnionGroupGroup: LBrace StructUnionList RBrace;
/*  797 */ StructUnionGroupGroup: StructUnionItem;
/*  798 */ StructUnionGroupList /* Vec<T>::Push */: Attribute StructUnionGroupList;
/*  799 */ StructUnionGroupList /* Vec<T>::New */: ;
/*  800 */ StructUnionItem: Identifier Colon ScalarType;
/*  801 */ InitialDeclaration: Initial StatementBlock;
/*  802 */ FinalDeclaration: Final StatementBlock;
/*  803 */ InstDeclaration: Inst Identifier Colon InstDeclarationOpt /* Option */ ScopedIdentifier InstDeclarationOpt0 /* Option */ InstDeclarationOpt1 /* Option */ InstDeclarationOpt2 /* Option */ Semicolon;
/*  804 */ InstDeclarationOpt2 /* Option<T>::Some */: LParen InstDeclarationOpt3 /* Option */ RParen;
/*  805 */ InstDeclarationOpt3 /* Option<T>::Some */: InstPortList;
/*  806 */ InstDeclarationOpt3 /* Option<T>::None */: ;
/*  807 */ InstDeclarationOpt2 /* Option<T>::None */: ;
/*  808 */ InstDeclarationOpt1 /* Option<T>::Some */: InstParameter;
/*  809 */ InstDeclarationOpt1 /* Option<T>::None */: ;
/*  810 */ InstDeclarationOpt0 /* Option<T>::Some */: Array;
/*  811 */ InstDeclarationOpt0 /* Option<T>::None */: ;
/*  812 */ InstDeclarationOpt /* Option<T>::Some */: ClockDomain;
/*  813 */ InstDeclarationOpt /* Option<T>::None */: ;
/*  814 */ InstParameter: Hash LParen InstParameterOpt /* Option */ RParen;
/*  815 */ InstParameterOpt /* Option<T>::Some */: InstParameterList;
/*  816 */ InstParameterOpt /* Option<T>::None */: ;
/*  817 */ InstParameterList: InstParameterGroup InstParameterListList /* Vec */ InstParameterListOpt /* Option */;
/*  818 */ InstParameterListList /* Vec<T>::Push */: Comma InstParameterGroup InstParameterListList;
/*  819 */ InstParameterListList /* Vec<T>::New */: ;
/*  820 */ InstParameterListOpt /* Option<T>::Some */: Comma;
/*  821 */ InstParameterListOpt /* Option<T>::None */: ;
/*  822 */ InstParameterGroup: InstParameterGroupList /* Vec */ InstParameterGroupGroup;
/*  823 */ InstParameterGroupGroup: LBrace InstParameterList RBrace;
/*  824 */ InstParameterGroupGroup: InstParameterItem;
/*  825 */ InstParameterGroupList /* Vec<T>::Push */: Attribute InstParameterGroupList;
/*  826 */ InstParameterGroupList /* Vec<T>::New */: ;
/*  827 */ InstParameterItem: Identifier InstParameterItemOpt /* Option */;
/*  828 */ InstParameterItemOpt /* Option<T>::Some */: Colon Expression;
/*  829 */ InstParameterItemOpt /* Option<T>::None */: ;
/*  830 */ InstPortList: InstPortGroup InstPortListList /* Vec */ InstPortListOpt /* Option */;
/*  831 */ InstPortListList /* Vec<T>::Push */: Comma InstPortGroup InstPortListList;
/*  832 */ InstPortListList /* Vec<T>::New */: ;
/*  833 */ InstPortListOpt /* Option<T>::Some */: Comma;
/*  834 */ InstPortListOpt /* Option<T>::None */: ;
/*  835 */ InstPortGroup: InstPortGroupList /* Vec */ InstPortGroupGroup;
/*  836 */ InstPortGroupGroup: LBrace InstPortList RBrace;
/*  837 */ InstPortGroupGroup: InstPortItem;
/*  838 */ InstPortGroupList /* Vec<T>::Push */: Attribute InstPortGroupList;
/*  839 */ InstPortGroupList /* Vec<T>::New */: ;
/*  840 */ InstPortItem: Identifier InstPortItemOpt /* Option */;
/*  841 */ InstPortItemOpt /* Option<T>::Some */: Colon Expression;
/*  842 */ InstPortItemOpt /* Option<T>::None */: ;
/*  843 */ WithParameter: Hash LParen WithParameterOpt /* Option */ RParen;
/*  844 */ WithParameterOpt /* Option<T>::Some */: WithParameterList;
/*  845 */ WithParameterOpt /* Option<T>::None */: ;
/*  846 */ WithParameterList: WithParameterGroup WithParameterListList /* Vec */ WithParameterListOpt /* Option */;
/*  847 */ WithParameterListList /* Vec<T>::Push */: Comma WithParameterGroup WithParameterListList;
/*  848 */ WithParameterListList /* Vec<T>::New */: ;
/*  849 */ WithParameterListOpt /* Option<T>::Some */: Comma;
/*  850 */ WithParameterListOpt /* Option<T>::None */: ;
/*  851 */ WithParameterGroup: WithParameterGroupList /* Vec */ WithParameterGroupGroup;
/*  852 */ WithParameterGroupGroup: LBrace WithParameterList RBrace;
/*  853 */ WithParameterGroupGroup: WithParameterItem;
/*  854 */ WithParameterGroupList /* Vec<T>::Push */: Attribute WithParameterGroupList;
/*  855 */ WithParameterGroupList /* Vec<T>::New */: ;
/*  856 */ WithParameterItem: WithParameterItemGroup Identifier Colon WithParameterItemGroup0 WithParameterItemOpt /* Option */;
/*  857 */ WithParameterItemGroup0: ArrayType;
/*  858 */ WithParameterItemGroup0: Type;
/*  859 */ WithParameterItemGroup: Param;
/*  860 */ WithParameterItemGroup: Const;
/*  861 */ WithParameterItemOpt /* Option<T>::Some */: Equ Expression;
/*  862 */ WithParameterItemOpt /* Option<T>::None */: ;
/*  863 */ GenericBound: Type;
/*  864 */ GenericBound: Inst ScopedIdentifier;
/*  865 */ GenericBound: GenericProtoBound;
/*  866 */ WithGenericParameter: ColonColonLAngle WithGenericParameterList RAngle;
/*  867 */ WithGenericParameterList: WithGenericParameterItem WithGenericParameterListList /* Vec */ WithGenericParameterListOpt /* Option */;
/*  868 */ WithGenericParameterListList /* Vec<T>::Push */: Comma WithGenericParameterItem WithGenericParameterListList;
/*  869 */ WithGenericParameterListList /* Vec<T>::New */: ;
/*  870 */ WithGenericParameterListOpt /* Option<T>::Some */: Comma;
/*  871 */ WithGenericParameterListOpt /* Option<T>::None */: ;
/*  872 */ WithGenericParameterItem: Identifier Colon GenericBound WithGenericParameterItemOpt /* Option */;
/*  873 */ WithGenericParameterItemOpt /* Option<T>::Some */: Equ WithGenericArgumentItem;
/*  874 */ WithGenericParameterItemOpt /* Option<T>::None */: ;
/*  875 */ GenericProtoBound: ScopedIdentifier;
/*  876 */ GenericProtoBound: FixedType;
/*  877 */ WithGenericArgument: ColonColonLAngle WithGenericArgumentOpt /* Option */ RAngle;
/*  878 */ WithGenericArgumentOpt /* Option<T>::Some */: WithGenericArgumentList;
/*  879 */ WithGenericArgumentOpt /* Option<T>::None */: ;
/*  880 */ WithGenericArgumentList: WithGenericArgumentItem WithGenericArgumentListList /* Vec */ WithGenericArgumentListOpt /* Option */;
/*  881 */ WithGenericArgumentListList /* Vec<T>::Push */: Comma WithGenericArgumentItem WithGenericArgumentListList;
/*  882 */ WithGenericArgumentListList /* Vec<T>::New */: ;
/*  883 */ WithGenericArgumentListOpt /* Option<T>::Some */: Comma;
/*  884 */ WithGenericArgumentListOpt /* Option<T>::None */: ;
/*  885 */ WithGenericArgumentItem: ExpressionIdentifier;
/*  886 */ WithGenericArgumentItem: FixedType;
/*  887 */ WithGenericArgumentItem: Number;
/*  888 */ WithGenericArgumentItem: BooleanLiteral;
/*  889 */ PortDeclaration: LParen PortDeclarationOpt /* Option */ RParen;
/*  890 */ PortDeclarationOpt /* Option<T>::Some */: PortDeclarationList;
/*  891 */ PortDeclarationOpt /* Option<T>::None */: ;
/*  892 */ PortDeclarationList: PortDeclarationGroup PortDeclarationListList /* Vec */ PortDeclarationListOpt /* Option */;
/*  893 */ PortDeclarationListList /* Vec<T>::Push */: Comma PortDeclarationGroup PortDeclarationListList;
/*  894 */ PortDeclarationListList /* Vec<T>::New */: ;
/*  895 */ PortDeclarationListOpt /* Option<T>::Some */: Comma;
/*  896 */ PortDeclarationListOpt /* Option<T>::None */: ;
/*  897 */ PortDeclarationGroup: PortDeclarationGroupList /* Vec */ PortDeclarationGroupGroup;
/*  898 */ PortDeclarationGroupGroup: LBrace PortDeclarationList RBrace;
/*  899 */ PortDeclarationGroupGroup: PortDeclarationItem;
/*  900 */ PortDeclarationGroupList /* Vec<T>::Push */: Attribute PortDeclarationGroupList;
/*  901 */ PortDeclarationGroupList /* Vec<T>::New */: ;
/*  902 */ PortDeclarationItem: Identifier Colon PortDeclarationItemGroup;
/*  903 */ PortDeclarationItemGroup: PortTypeConcrete;
/*  904 */ PortDeclarationItemGroup: PortTypeAbstract;
/*  905 */ PortTypeConcrete: Direction PortTypeConcreteOpt /* Option */ ArrayType PortTypeConcreteOpt0 /* Option */;
/*  906 */ PortTypeConcreteOpt0 /* Option<T>::Some */: Equ PortDefaultValue;
/*  907 */ PortTypeConcreteOpt0 /* Option<T>::None */: ;
/*  908 */ PortTypeConcreteOpt /* Option<T>::Some */: ClockDomain;
/*  909 */ PortTypeConcreteOpt /* Option<T>::None */: ;
/*  910 */ PortDefaultValue: Expression;
/*  911 */ PortTypeAbstract: PortTypeAbstractOpt /* Option */ Interface PortTypeAbstractOpt0 /* Option */ PortTypeAbstractOpt1 /* Option */;
/*  912 */ PortTypeAbstractOpt1 /* Option<T>::Some */: Array;
/*  913 */ PortTypeAbstractOpt1 /* Option<T>::None */: ;
/*  914 */ PortTypeAbstractOpt0 /* Option<T>::Some */: ColonColon Identifier;
/*  915 */ PortTypeAbstractOpt0 /* Option<T>::None */: ;
/*  916 */ PortTypeAbstractOpt /* Option<T>::Some */: ClockDomain;
/*  917 */ PortTypeAbstractOpt /* Option<T>::None */: ;
/*  918 */ Direction: Input;
/*  919 */ Direction: Output;
/*  920 */ Direction: Inout;
/*  921 */ Direction: Modport;
/*  922 */ Direction: Import;
/*  923 */ FunctionDeclaration: Function Identifier FunctionDeclarationOpt /* Option */ FunctionDeclarationOpt0 /* Option */ FunctionDeclarationOpt1 /* Option */ StatementBlock;
/*  924 */ FunctionDeclarationOpt1 /* Option<T>::Some */: MinusGT ScalarType;
/*  925 */ FunctionDeclarationOpt1 /* Option<T>::None */: ;
/*  926 */ FunctionDeclarationOpt0 /* Option<T>::Some */: PortDeclaration;
/*  927 */ FunctionDeclarationOpt0 /* Option<T>::None */: ;
/*  928 */ FunctionDeclarationOpt /* Option<T>::Some */: WithGenericParameter;
/*  929 */ FunctionDeclarationOpt /* Option<T>::None */: ;
/*  930 */ ImportDeclaration: Import ScopedIdentifier ImportDeclarationOpt /* Option */ Semicolon;
/*  931 */ ImportDeclarationOpt /* Option<T>::Some */: ColonColon Star;
/*  932 */ ImportDeclarationOpt /* Option<T>::None */: ;
/*  933 */ UnsafeBlock: Unsafe LParen Identifier RParen LBrace UnsafeBlockList /* Vec */ RBrace;
/*  934 */ UnsafeBlockList /* Vec<T>::Push */: GenerateGroup UnsafeBlockList;
/*  935 */ UnsafeBlockList /* Vec<T>::New */: ;
/*  936 */ ModuleDeclaration: Module Identifier ModuleDeclarationOpt /* Option */ ModuleDeclarationOpt0 /* Option */ ModuleDeclarationOpt1 /* Option */ ModuleDeclarationOpt2 /* Option */ LBrace ModuleDeclarationList /* Vec */ RBrace;
/*  937 */ ModuleDeclarationList /* Vec<T>::Push */: ModuleGroup ModuleDeclarationList;
/*  938 */ ModuleDeclarationList /* Vec<T>::New */: ;
/*  939 */ ModuleDeclarationOpt2 /* Option<T>::Some */: PortDeclaration;
/*  940 */ ModuleDeclarationOpt2 /* Option<T>::None */: ;
/*  941 */ ModuleDeclarationOpt1 /* Option<T>::Some */: WithParameter;
/*  942 */ ModuleDeclarationOpt1 /* Option<T>::None */: ;
/*  943 */ ModuleDeclarationOpt0 /* Option<T>::Some */: For ScopedIdentifier;
/*  944 */ ModuleDeclarationOpt0 /* Option<T>::None */: ;
/*  945 */ ModuleDeclarationOpt /* Option<T>::Some */: WithGenericParameter;
/*  946 */ ModuleDeclarationOpt /* Option<T>::None */: ;
/*  947 */ ModuleGroup: ModuleGroupList /* Vec */ ModuleGroupGroup;
/*  948 */ ModuleGroupGroup: LBrace ModuleGroupGroupList /* Vec */ RBrace;
/*  949 */ ModuleGroupGroupList /* Vec<T>::Push */: ModuleGroup ModuleGroupGroupList;
/*  950 */ ModuleGroupGroupList /* Vec<T>::New */: ;
/*  951 */ ModuleGroupGroup: ModuleItem;
/*  952 */ ModuleGroupList /* Vec<T>::Push */: Attribute ModuleGroupList;
/*  953 */ ModuleGroupList /* Vec<T>::New */: ;
/*  954 */ ModuleItem: GenerateItem;
/*  955 */ InterfaceDeclaration: Interface Identifier InterfaceDeclarationOpt /* Option */ InterfaceDeclarationOpt0 /* Option */ InterfaceDeclarationOpt1 /* Option */ LBrace InterfaceDeclarationList /* Vec */ RBrace;
/*  956 */ InterfaceDeclarationList /* Vec<T>::Push */: InterfaceGroup InterfaceDeclarationList;
/*  957 */ InterfaceDeclarationList /* Vec<T>::New */: ;
/*  958 */ InterfaceDeclarationOpt1 /* Option<T>::Some */: WithParameter;
/*  959 */ InterfaceDeclarationOpt1 /* Option<T>::None */: ;
/*  960 */ InterfaceDeclarationOpt0 /* Option<T>::Some */: For ScopedIdentifier;
/*  961 */ InterfaceDeclarationOpt0 /* Option<T>::None */: ;
/*  962 */ InterfaceDeclarationOpt /* Option<T>::Some */: WithGenericParameter;
/*  963 */ InterfaceDeclarationOpt /* Option<T>::None */: ;
/*  964 */ InterfaceGroup: InterfaceGroupList /* Vec */ InterfaceGroupGroup;
/*  965 */ InterfaceGroupGroup: LBrace InterfaceGroupGroupList /* Vec */ RBrace;
/*  966 */ InterfaceGroupGroupList /* Vec<T>::Push */: InterfaceGroup InterfaceGroupGroupList;
/*  967 */ InterfaceGroupGroupList /* Vec<T>::New */: ;
/*  968 */ InterfaceGroupGroup: InterfaceItem;
/*  969 */ InterfaceGroupList /* Vec<T>::Push */: Attribute InterfaceGroupList;
/*  970 */ InterfaceGroupList /* Vec<T>::New */: ;
/*  971 */ InterfaceItem: GenerateItem;
/*  972 */ InterfaceItem: ModportDeclaration;
/*  973 */ GenerateIfDeclaration: If Expression GenerateNamedBlock GenerateIfDeclarationList /* Vec */ GenerateIfDeclarationOpt /* Option */;
/*  974 */ GenerateIfDeclarationList /* Vec<T>::Push */: Else If Expression GenerateOptionalNamedBlock GenerateIfDeclarationList;
/*  975 */ GenerateIfDeclarationList /* Vec<T>::New */: ;
/*  976 */ GenerateIfDeclarationOpt /* Option<T>::Some */: Else GenerateOptionalNamedBlock;
/*  977 */ GenerateIfDeclarationOpt /* Option<T>::None */: ;
/*  978 */ GenerateForDeclaration: For Identifier In GenerateForDeclarationOpt /* Option */ Range GenerateForDeclarationOpt0 /* Option */ GenerateNamedBlock;
/*  979 */ GenerateForDeclarationOpt0 /* Option<T>::Some */: Step AssignmentOperator Expression;
/*  980 */ GenerateForDeclarationOpt0 /* Option<T>::None */: ;
/*  981 */ GenerateForDeclarationOpt /* Option<T>::Some */: Rev;
/*  982 */ GenerateForDeclarationOpt /* Option<T>::None */: ;
/*  983 */ GenerateBlockDeclaration: GenerateNamedBlock;
/*  984 */ GenerateNamedBlock: Colon Identifier LBrace GenerateNamedBlockList /* Vec */ RBrace;
/*  985 */ GenerateNamedBlockList /* Vec<T>::Push */: GenerateGroup GenerateNamedBlockList;
/*  986 */ GenerateNamedBlockList /* Vec<T>::New */: ;
/*  987 */ GenerateOptionalNamedBlock: GenerateOptionalNamedBlockOpt /* Option */ LBrace GenerateOptionalNamedBlockList /* Vec */ RBrace;
/*  988 */ GenerateOptionalNamedBlockList /* Vec<T>::Push */: GenerateGroup GenerateOptionalNamedBlockList;
/*  989 */ GenerateOptionalNamedBlockList /* Vec<T>::New */: ;
/*  990 */ GenerateOptionalNamedBlockOpt /* Option<T>::Some */: Colon Identifier;
/*  991 */ GenerateOptionalNamedBlockOpt /* Option<T>::None */: ;
/*  992 */ GenerateGroup: GenerateGroupList /* Vec */ GenerateGroupGroup;
/*  993 */ GenerateGroupGroup: LBrace GenerateGroupGroupList /* Vec */ RBrace;
/*  994 */ GenerateGroupGroupList /* Vec<T>::Push */: GenerateGroup GenerateGroupGroupList;
/*  995 */ GenerateGroupGroupList /* Vec<T>::New */: ;
/*  996 */ GenerateGroupGroup: GenerateItem;
/*  997 */ GenerateGroupList /* Vec<T>::Push */: Attribute GenerateGroupList;
/*  998 */ GenerateGroupList /* Vec<T>::New */: ;
/*  999 */ GenerateItem: LetDeclaration;
/* 1000 */ GenerateItem: VarDeclaration;
/* 1001 */ GenerateItem: InstDeclaration;
/* 1002 */ GenerateItem: ConstDeclaration;
/* 1003 */ GenerateItem: AlwaysFfDeclaration;
/* 1004 */ GenerateItem: AlwaysCombDeclaration;
/* 1005 */ GenerateItem: AssignDeclaration;
/* 1006 */ GenerateItem: ConnectDeclaration;
/* 1007 */ GenerateItem: FunctionDeclaration;
/* 1008 */ GenerateItem: GenerateIfDeclaration;
/* 1009 */ GenerateItem: GenerateForDeclaration;
/* 1010 */ GenerateItem: GenerateBlockDeclaration;
/* 1011 */ GenerateItem: TypeDefDeclaration;
/* 1012 */ GenerateItem: EnumDeclaration;
/* 1013 */ GenerateItem: StructUnionDeclaration;
/* 1014 */ GenerateItem: ImportDeclaration;
/* 1015 */ GenerateItem: AliasDeclaration;
/* 1016 */ GenerateItem: InitialDeclaration;
/* 1017 */ GenerateItem: FinalDeclaration;
/* 1018 */ GenerateItem: UnsafeBlock;
/* 1019 */ GenerateItem: EmbedDeclaration;
/* 1020 */ PackageDeclaration: Package Identifier PackageDeclarationOpt /* Option */ PackageDeclarationOpt0 /* Option */ LBrace PackageDeclarationList /* Vec */ RBrace;
/* 1021 */ PackageDeclarationList /* Vec<T>::Push */: PackageGroup PackageDeclarationList;
/* 1022 */ PackageDeclarationList /* Vec<T>::New */: ;
/* 1023 */ PackageDeclarationOpt0 /* Option<T>::Some */: For ScopedIdentifier;
/* 1024 */ PackageDeclarationOpt0 /* Option<T>::None */: ;
/* 1025 */ PackageDeclarationOpt /* Option<T>::Some */: WithGenericParameter;
/* 1026 */ PackageDeclarationOpt /* Option<T>::None */: ;
/* 1027 */ PackageGroup: PackageGroupList /* Vec */ PackageGroupGroup;
/* 1028 */ PackageGroupGroup: LBrace PackageGroupGroupList /* Vec */ RBrace;
/* 1029 */ PackageGroupGroupList /* Vec<T>::Push */: PackageGroup PackageGroupGroupList;
/* 1030 */ PackageGroupGroupList /* Vec<T>::New */: ;
/* 1031 */ PackageGroupGroup: PackageItem;
/* 1032 */ PackageGroupList /* Vec<T>::Push */: Attribute PackageGroupList;
/* 1033 */ PackageGroupList /* Vec<T>::New */: ;
/* 1034 */ PackageItem: ConstDeclaration;
/* 1035 */ PackageItem: TypeDefDeclaration;
/* 1036 */ PackageItem: EnumDeclaration;
/* 1037 */ PackageItem: StructUnionDeclaration;
/* 1038 */ PackageItem: FunctionDeclaration;
/* 1039 */ PackageItem: ImportDeclaration;
/* 1040 */ PackageItem: AliasDeclaration;
/* 1041 */ PackageItem: EmbedDeclaration;
/* 1042 */ AliasDeclaration: Alias AliasDeclarationGroup Identifier Equ ScopedIdentifier Semicolon;
/* 1043 */ AliasDeclarationGroup: Module;
/* 1044 */ AliasDeclarationGroup: Interface;
/* 1045 */ AliasDeclarationGroup: Package;
/* 1046 */ ProtoDeclaration: Proto ProtoDeclarationGroup;
/* 1047 */ ProtoDeclarationGroup: ProtoModuleDeclaration;
/* 1048 */ ProtoDeclarationGroup: ProtoInterfaceDeclaration;
/* 1049 */ ProtoDeclarationGroup: ProtoPackageDeclaration;
/* 1050 */ ProtoModuleDeclaration: Module Identifier ProtoModuleDeclarationOpt /* Option */ ProtoModuleDeclarationOpt0 /* Option */ Semicolon;
/* 1051 */ ProtoModuleDeclarationOpt0 /* Option<T>::Some */: PortDeclaration;
/* 1052 */ ProtoModuleDeclarationOpt0 /* Option<T>::None */: ;
/* 1053 */ ProtoModuleDeclarationOpt /* Option<T>::Some */: WithParameter;
/* 1054 */ ProtoModuleDeclarationOpt /* Option<T>::None */: ;
/* 1055 */ ProtoInterfaceDeclaration: Interface Identifier ProtoInterfaceDeclarationOpt /* Option */ LBrace ProtoInterfaceDeclarationList /* Vec */ RBrace;
/* 1056 */ ProtoInterfaceDeclarationList /* Vec<T>::Push */: ProtoInterfaceItem ProtoInterfaceDeclarationList;
/* 1057 */ ProtoInterfaceDeclarationList /* Vec<T>::New */: ;
/* 1058 */ ProtoInterfaceDeclarationOpt /* Option<T>::Some */: WithParameter;
/* 1059 */ ProtoInterfaceDeclarationOpt /* Option<T>::None */: ;
/* 1060 */ ProtoInterfaceItem: VarDeclaration;
/* 1061 */ ProtoInterfaceItem: ProtoConstDeclaration;
/* 1062 */ ProtoInterfaceItem: ProtoFunctionDeclaration;
/* 1063 */ ProtoInterfaceItem: ProtoTypeDefDeclaration;
/* 1064 */ ProtoInterfaceItem: ProtoAliasDeclaration;
/* 1065 */ ProtoInterfaceItem: ModportDeclaration;
/* 1066 */ ProtoInterfaceItem: ImportDeclaration;
/* 1067 */ ProtoPackageDeclaration: Package Identifier LBrace ProtoPackageDeclarationList /* Vec */ RBrace;
/* 1068 */ ProtoPackageDeclarationList /* Vec<T>::Push */: ProtoPacakgeItem ProtoPackageDeclarationList;
/* 1069 */ ProtoPackageDeclarationList /* Vec<T>::New */: ;
/* 1070 */ ProtoPacakgeItem: ProtoConstDeclaration;
/* 1071 */ ProtoPacakgeItem: ProtoTypeDefDeclaration;
/* 1072 */ ProtoPacakgeItem: EnumDeclaration;
/* 1073 */ ProtoPacakgeItem: StructUnionDeclaration;
/* 1074 */ ProtoPacakgeItem: ProtoFunctionDeclaration;
/* 1075 */ ProtoPacakgeItem: ProtoAliasDeclaration;
/* 1076 */ ProtoPacakgeItem: ImportDeclaration;
/* 1077 */ ProtoConstDeclaration: Const Identifier Colon ProtoConstDeclarationGroup Semicolon;
/* 1078 */ ProtoConstDeclarationGroup: ArrayType;
/* 1079 */ ProtoConstDeclarationGroup: Type;
/* 1080 */ ProtoTypeDefDeclaration: Type Identifier ProtoTypeDefDeclarationOpt /* Option */ Semicolon;
/* 1081 */ ProtoTypeDefDeclarationOpt /* Option<T>::Some */: Equ ArrayType;
/* 1082 */ ProtoTypeDefDeclarationOpt /* Option<T>::None */: ;
/* 1083 */ ProtoFunctionDeclaration: Function Identifier ProtoFunctionDeclarationOpt /* Option */ ProtoFunctionDeclarationOpt0 /* Option */ ProtoFunctionDeclarationOpt1 /* Option */ Semicolon;
/* 1084 */ ProtoFunctionDeclarationOpt1 /* Option<T>::Some */: MinusGT ScalarType;
/* 1085 */ ProtoFunctionDeclarationOpt1 /* Option<T>::None */: ;
/* 1086 */ ProtoFunctionDeclarationOpt0 /* Option<T>::Some */: PortDeclaration;
/* 1087 */ ProtoFunctionDeclarationOpt0 /* Option<T>::None */: ;
/* 1088 */ ProtoFunctionDeclarationOpt /* Option<T>::Some */: WithGenericParameter;
/* 1089 */ ProtoFunctionDeclarationOpt /* Option<T>::None */: ;
/* 1090 */ ProtoAliasDeclaration: Alias ProtoAliasDeclarationGroup Identifier Colon ScopedIdentifier Semicolon;
/* 1091 */ ProtoAliasDeclarationGroup: Module;
/* 1092 */ ProtoAliasDeclarationGroup: Interface;
/* 1093 */ ProtoAliasDeclarationGroup: Package;
/* 1094 */ EmbedDeclaration: Embed LParen Identifier RParen Identifier EmbedContent;
/* 1095 */ EmbedContent: TripleLBrace EmbedContentList /* Vec */ TripleRBrace;
/* 1096 */ EmbedContentList /* Vec<T>::Push */: EmbedItem EmbedContentList;
/* 1097 */ EmbedContentList /* Vec<T>::New */: ;
/* 1098 */ EmbedItem: EmbedLBrace EmbedItemList /* Vec */ EmbedRBrace;
/* 1099 */ EmbedItemList /* Vec<T>::Push */: EmbedItem EmbedItemList;
/* 1100 */ EmbedItemList /* Vec<T>::New */: ;
/* 1101 */ EmbedItem: Any;
/* 1102 */ IncludeDeclaration: Include LParen Identifier Comma StringLiteral RParen Semicolon;
/* 1103 */ DescriptionGroup: DescriptionGroupList /* Vec */ DescriptionGroupGroup;
/* 1104 */ DescriptionGroupGroup: LBrace DescriptionGroupGroupList /* Vec */ RBrace;
/* 1105 */ DescriptionGroupGroupList /* Vec<T>::Push */: DescriptionGroup DescriptionGroupGroupList;
/* 1106 */ DescriptionGroupGroupList /* Vec<T>::New */: ;
/* 1107 */ DescriptionGroupGroup: DescriptionItem;
/* 1108 */ DescriptionGroupList /* Vec<T>::Push */: Attribute DescriptionGroupList;
/* 1109 */ DescriptionGroupList /* Vec<T>::New */: ;
/* 1110 */ DescriptionItem: DescriptionItemOpt /* Option */ PublicDescriptionItem;
/* 1111 */ DescriptionItem: ImportDeclaration;
/* 1112 */ DescriptionItem: EmbedDeclaration;
/* 1113 */ DescriptionItem: IncludeDeclaration;
/* 1114 */ DescriptionItemOpt /* Option<T>::Some */: Pub;
/* 1115 */ DescriptionItemOpt /* Option<T>::None */: ;
/* 1116 */ PublicDescriptionItem: ModuleDeclaration;
/* 1117 */ PublicDescriptionItem: InterfaceDeclaration;
/* 1118 */ PublicDescriptionItem: PackageDeclaration;
/* 1119 */ PublicDescriptionItem: AliasDeclaration;
/* 1120 */ PublicDescriptionItem: ProtoDeclaration;
/* 1121 */ Veryl: Start VerylList /* Vec */;
/* 1122 */ VerylList /* Vec<T>::Push */: DescriptionGroup VerylList;
/* 1123 */ VerylList /* Vec<T>::New */: ;
