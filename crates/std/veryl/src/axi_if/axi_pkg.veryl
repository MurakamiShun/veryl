///### AXI4 bus package prototype
pub proto package axi4_prototype {
    const ADDRESS_WIDTH   : u32;
    const DATA_WIDTH_BYTES: u32;
    const NUM_BURSTS_LEN  : u32;
    const LOCK_LEN        : u32;
    const ID_LENGTH       : u32;
    const AWUSER_LENGTH   : u32;
    const WUSER_LENGTH    : u32;
    const BUSER_LENGTH    : u32;
    const ARUSER_LENGTH   : u32;
    const RUSER_LENGTH    : u32;

    type addr_t      ;
    type data_t      ;
    type strb_t      ;
    type num_bursts_t;
    type lock_t      ;
    type id_t        ;
    type awuser_t    ;
    type wuser_t     ;
    type buser_t     ;
    type aruser_t    ;
    type ruser_t     ;

    type size_t ;
    type burst_t;
    type cache_t;
    type prot_t ;
    type bresp_t;
    type rresp_t;
}

///### AXI3 bus package prototype
pub proto package axi3_prototype {
    const ADDRESS_WIDTH   : u32;
    const DATA_WIDTH_BYTES: u32;
    const NUM_BURSTS_LEN  : u32;
    const LOCK_LEN        : u32;
    const ID_LENGTH       : u32;

    type addr_t      ;
    type data_t      ;
    type strb_t      ;
    type num_bursts_t;
    type lock_t      ;
    type id_t        ;

    type size_t ;
    type burst_t;
    type cache_t;
    type prot_t ;
    type bresp_t;
    type rresp_t;
}

///### AXI4-Lite bus package prototype
pub proto package axi4_lite_prototype {
    const ADDRESS_WIDTH   : u32;
    const DATA_WIDTH_BYTES: u32;
    type addr_t          ;
    type data_t          ;
    type strb_t          ;
    type prot_t          ;
    type id_t            ;

    type bresp_t;
    type rresp_t;
}

///### AXI4 configuration definitions
pub package axi4_config {

    enum axsize_variants: logic<3> {
        BYTES_PER_TRANSFER_1 = 3'b000,
        BYTES_PER_TRANSFER_2 = 3'b001,
        BYTES_PER_TRANSFER_4 = 3'b010,
        BYTES_PER_TRANSFER_8 = 3'b011,
        BYTES_PER_TRANSFER_16 = 3'b100,
        BYTES_PER_TRANSFER_32 = 3'b101,
        BYTES_PER_TRANSFER_64 = 3'b110,
        BYTES_PER_TRANSFER_128 = 3'b111,
    }

    enum axburst_variants: logic<2> {
        FIXED_BURST = 2'b00,
        INCREMENTING_BURST = 2'b01,
        WRAPPNG_BURST = 2'b10,
    }

    const AWCACHE_BUFFERABLE    : logic<4> = 4'b0001;
    const AWCACHE_MODIFIABLE    : logic<4> = 4'b0010;
    const AWCACHE_OTHER_ALLOCATE: logic<4> = 4'b0100;
    const AWCACHE_ALLOCATE      : logic<4> = 4'b1000;

    const ARCACHE_BUFFERABLE    : logic<4> = 4'b0001;
    const ARCACHE_MODIFIABLE    : logic<4> = 4'b0010;
    const ARCACHE_ALLOCATE      : logic<4> = 4'b0100;
    const ARCACHE_OTHER_ALLOCATE: logic<4> = 4'b1000;

    const AXPROT_PRIVILEGED        : logic<3> = 3'b001;
    const AXPROT_NON_SECURE        : logic<3> = 3'b010;
    const AXPROT_INSTRUCTION_ACCESS: logic<3> = 3'b100;

    enum bresp_variants: logic<2> {
        OKAY = 2'b00,
        EXOKAY = 2'b01,
        SLVERR = 2'b10,
        DECERR = 2'b11,
    }

    enum rresp_variants: logic<2> {
        OKAY = 2'b00,
        EXOKAY = 2'b01,
        SLVERR = 2'b10,
        DECERR = 2'b11,
    }

}

///### AXI4 bus package
pub package axi4_pkg::<ADDR_W: u32, DATA_W_BYTES: u32, ID_W: u32, AWUSER_W: u32, WUSER_W: u32, BUSER_W: u32, ARUSER_W: u32, RUSER_W: u32> for axi4_prototype {
    const ADDRESS_WIDTH   : u32 = ADDR_W;
    const DATA_WIDTH_BYTES: u32 = DATA_W_BYTES;
    const NUM_BURSTS_LEN  : u32 = 8;
    const LOCK_LEN        : u32 = 1;
    const ID_LENGTH       : u32 = ID_W;
    const AWUSER_LENGTH   : u32 = AWUSER_W;
    const WUSER_LENGTH    : u32 = WUSER_W;
    const BUSER_LENGTH    : u32 = BUSER_W;
    const ARUSER_LENGTH   : u32 = ARUSER_W;
    const RUSER_LENGTH    : u32 = RUSER_W;

    type addr_t       = logic<ADDRESS_WIDTH>         ;
    type data_t       = logic<(DATA_WIDTH_BYTES * 8)>;
    type strb_t       = logic<DATA_WIDTH_BYTES>      ;
    type num_bursts_t = logic<NUM_BURSTS_LEN>        ;
    type lock_t       = logic<LOCK_LEN>              ;
    type id_t         = logic<ID_LENGTH>             ;
    type awuser_t     = logic<AWUSER_LENGTH>         ;
    type wuser_t      = logic<WUSER_LENGTH>          ;
    type buser_t      = logic<BUSER_LENGTH>          ;
    type aruser_t     = logic<ARUSER_LENGTH>         ;
    type ruser_t      = logic<RUSER_LENGTH>          ;

    type size_t  = axi4_config::axsize_variants    ;
    type burst_t = axi4_config::axburst_variants   ;
    type cache_t = logic                        <4>;
    type prot_t  = logic                        <3>;
    type bresp_t = axi4_config::bresp_variants     ;
    type rresp_t = axi4_config::rresp_variants     ;

}

///### AXI3 configuration definitions
pub package axi3_config {

    enum axsize_variants: logic<3> {
        BYTES_PER_TRANSFER_1 = 3'b000,
        BYTES_PER_TRANSFER_2 = 3'b001,
        BYTES_PER_TRANSFER_4 = 3'b010,
        BYTES_PER_TRANSFER_8 = 3'b011,
        BYTES_PER_TRANSFER_16 = 3'b100,
        BYTES_PER_TRANSFER_32 = 3'b101,
        BYTES_PER_TRANSFER_64 = 3'b110,
        BYTES_PER_TRANSFER_128 = 3'b111,
    }

    enum axburst_variants: logic<2> {
        FIXED_BURST = 2'b00,
        INCREMENTING_BURST = 2'b01,
        WRAPPNG_BURST = 2'b10,
    }

    const AXCACHE_BUFFERABLE    : logic<4> = 4'b0001;
    const AXCACHE_CACHEABLE     : logic<4> = 4'b0010;
    const AXCACHE_READ_ALLOCATE : logic<4> = 4'b0100;
    const AXCACHE_WRITE_ALLOCATE: logic<4> = 4'b1000;

    const AXPROT_PRIVILEGED        : logic<3> = 3'b001;
    const AXPROT_NON_SECURE        : logic<3> = 3'b010;
    const AXPROT_INSTRUCTION_ACCESS: logic<3> = 3'b100;

    enum bresp_variants: logic<2> {
        OKAY = 2'b00,
        EXOKAY = 2'b01,
        SLVERR = 2'b10,
        DECERR = 2'b11,
    }

    enum rresp_variants: logic<2> {
        OKAY = 2'b00,
        EXOKAY = 2'b01,
        SLVERR = 2'b10,
        DECERR = 2'b11,
    }

}

///### AXI3 bus package
pub package axi3_pkg::<ADDR_W: u32, DATA_W_BYTES: u32, ID_W: u32> for axi3_prototype {
    const ADDRESS_WIDTH   : u32 = ADDR_W;
    const DATA_WIDTH_BYTES: u32 = DATA_W_BYTES;
    const NUM_BURSTS_LEN  : u32 = 4;
    const LOCK_LEN        : u32 = 2;
    const ID_LENGTH       : u32 = ID_W;

    type addr_t       = logic<ADDRESS_WIDTH>         ;
    type data_t       = logic<(DATA_WIDTH_BYTES * 8)>;
    type strb_t       = logic<DATA_WIDTH_BYTES>      ;
    type num_bursts_t = logic<NUM_BURSTS_LEN>        ;
    type lock_t       = logic<LOCK_LEN>              ;
    type id_t         = logic<ID_LENGTH>             ;

    type size_t  = axi3_config::axsize_variants    ;
    type burst_t = axi3_config::axburst_variants   ;
    type cache_t = logic                        <4>;
    type prot_t  = logic                        <3>;
    type bresp_t = axi3_config::bresp_variants     ;
    type rresp_t = axi3_config::rresp_variants     ;
}

///### AXI4-Lite configuration definitions
pub package axi4_lite_config {

    const AXPROT_PRIVILEGED        : logic<3> = 3'b001;
    const AXPROT_NON_SECURE        : logic<3> = 3'b010;
    const AXPROT_INSTRUCTION_ACCESS: logic<3> = 3'b100;

    enum bresp_variants: logic<2> {
        OKAY = 2'b00,
        EXOKAY = 2'b01,
        SLVERR = 2'b10,
        DECERR = 2'b11,
    }

    enum rresp_variants: logic<2> {
        OKAY = 2'b00,
        EXOKAY = 2'b01,
        SLVERR = 2'b10,
        DECERR = 2'b11,
    }

}

///### AXI4-Lite bus package
pub package axi4_lite_pkg::<ADDR_W: u32, DATA_W_BYTES: u32, ID_W: u32> for axi4_lite_prototype {
    const ADDRESS_WIDTH   : u32 = ADDR_W;
    const DATA_WIDTH_BYTES: u32 = DATA_W_BYTES;
    const ID_LENGTH       : u32 = ID_W;

    type addr_t = logic<ADDRESS_WIDTH>         ;
    type data_t = logic<(DATA_WIDTH_BYTES * 8)>;
    type strb_t = logic<DATA_WIDTH_BYTES>      ;

    type id_t = logic<ID_LENGTH>;

    type prot_t  = logic                           <3>;
    type bresp_t = axi4_lite_config::bresp_variants   ;
    type rresp_t = axi4_lite_config::rresp_variants   ;

}
