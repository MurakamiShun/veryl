%start Veryl
%title "Veryl grammar"
%comment "Empty grammar generated by `parol`"
%user_type Token = crate::veryl_token::Token
%user_type VerylToken = crate::veryl_token::VerylToken

%scanner Embed {
    %auto_newline_off
    %auto_ws_off
}
%scanner Generic {}

%%

/*    0 */ CommentsTerm: <INITIAL, Generic>"(?:(?:(?://.*(?:\r\n|\r|\n|$))|(?:(?ms)/\u{2a}.*?\u{2a}/))\s*)+" : Token;
/*    1 */ StringLiteralTerm: <INITIAL, Generic>"\u{0022}(?:\\[\u{0022}\\/bfnrt]|u[0-9a-fA-F]{4}|[^\u{0022}\\\u0000-\u001F])*\u{0022}" : Token;
/*    2 */ ExponentTerm: <INITIAL, Generic>/[0-9]+(?:_[0-9]+)*\.[0-9]+(?:_[0-9]+)*[eE][+-]?[0-9]+(?:_[0-9]+)*/ : Token;
/*    3 */ FixedPointTerm: <INITIAL, Generic>/[0-9]+(?:_[0-9]+)*\.[0-9]+(?:_[0-9]+)*/ : Token;
/*    4 */ BasedTerm: <INITIAL, Generic>/(?:[0-9]+(?:_[0-9]+)*)?'s?[bodh][0-9a-fA-FxzXZ]+(?:_[0-9a-fA-FxzXZ]+)*/ : Token;
/*    5 */ AllBitTerm: <INITIAL, Generic>/(?:[0-9]+(?:_[0-9]+)*)?'[01xzXZ]/ : Token;
/*    6 */ BaseLessTerm: <INITIAL, Generic>/[0-9]+(?:_[0-9]+)*/ : Token;
/*    7 */ MinusColonTerm: '-:' : Token;
/*    8 */ MinusGTTerm: '->' : Token;
/*    9 */ PlusColonTerm: '+:' : Token;
/*   10 */ AssignmentOperatorTerm: "\+=|-=|\*=|/=|%=|&=|\|=|\^=|<<=|>>=|<<<=|>>>=" : Token;
/*   11 */ Operator11Term: "\*\*" : Token;
/*   12 */ Operator10Term: "/|%" : Token;
/*   13 */ Operator09Term: "\+|-" : Token;
/*   14 */ Operator08Term: "<<<|>>>|<<|>>" : Token;
/*   15 */ Operator07Term: "<=|>=|<:|>:" : Token;
/*   16 */ Operator06Term: "===|==\?|!==|!=\?|==|!=" : Token;
/*   17 */ Operator02Term: "&&" : Token;
/*   18 */ Operator01Term: "\|\|" : Token;
/*   19 */ Operator05Term: "&" : Token;
/*   20 */ Operator04Term: "\^~|\^|~\^" : Token;
/*   21 */ Operator03Term: "\|" : Token;
/*   22 */ UnaryOperatorTerm: "~&|~\||!|~" : Token;
/*   23 */ BackQuoteTerm: <INITIAL, Generic>"`" : Token;
/*   24 */ ColonColonLAngleTerm: <INITIAL, Generic>'::<' : Token;
/*   25 */ ColonColonTerm: <INITIAL, Generic>'::' : Token;
/*   26 */ ColonTerm: <INITIAL, Generic>':' : Token;
/*   27 */ CommaTerm: <INITIAL, Generic>',' : Token;
/*   28 */ DotDotEquTerm: <INITIAL, Generic>'..=' : Token;
/*   29 */ DotDotTerm: <INITIAL, Generic>'..' : Token;
/*   30 */ DotTerm: <INITIAL, Generic>'.' : Token;
/*   31 */ EquTerm: <INITIAL, Generic>'=' : Token;
/*   32 */ HashTerm: <INITIAL, Generic>'#' : Token;
/*   33 */ LAngleTerm: <INITIAL, Generic>'<' : Token;
/*   34 */ QuoteLBraceTerm: <INITIAL, Generic>"'\{" : Token;
/*   35 */ LBraceTerm: <INITIAL, Embed, Generic>'{' : Token;
/*   36 */ LBracketTerm: <INITIAL, Generic>'[' : Token;
/*   37 */ LParenTerm: <INITIAL, Generic>'(' : Token;
/*   38 */ RAngleTerm: <INITIAL, Generic>'>' : Token;
/*   39 */ RBraceTerm: <INITIAL, Embed, Generic>'}' : Token;
/*   40 */ RBracketTerm: <INITIAL, Generic>']' : Token;
/*   41 */ RParenTerm: <INITIAL, Generic>')' : Token;
/*   42 */ SemicolonTerm: <INITIAL, Generic>';' : Token;
/*   43 */ StarTerm: <INITIAL, Generic>'*' : Token;
/*   44 */ AliasTerm: <INITIAL, Generic>/(?-u:\b)alias(?-u:\b)/ : Token;
/*   45 */ AlwaysCombTerm: <INITIAL, Generic>/(?-u:\b)always_comb(?-u:\b)/ : Token;
/*   46 */ AlwaysFfTerm: <INITIAL, Generic>/(?-u:\b)always_ff(?-u:\b)/ : Token;
/*   47 */ AssignTerm: <INITIAL, Generic>/(?-u:\b)assign(?-u:\b)/ : Token;
/*   48 */ AsTerm: <INITIAL, Generic>/(?-u:\b)as(?-u:\b)/ : Token;
/*   49 */ BitTerm: <INITIAL, Generic>/(?-u:\b)bit(?-u:\b)/ : Token;
/*   50 */ CaseTerm: <INITIAL, Generic>/(?-u:\b)case(?-u:\b)/ : Token;
/*   51 */ ClockTerm: <INITIAL, Generic>/(?-u:\b)clock(?-u:\b)/ : Token;
/*   52 */ ClockPosedgeTerm: <INITIAL, Generic>/(?-u:\b)clock_posedge(?-u:\b)/ : Token;
/*   53 */ ClockNegedgeTerm: <INITIAL, Generic>/(?-u:\b)clock_negedge(?-u:\b)/ : Token;
/*   54 */ ConstTerm: <INITIAL, Generic>/(?-u:\b)const(?-u:\b)/ : Token;
/*   55 */ ConverseTerm: <INITIAL, Generic>/(?-u:\b)converse(?-u:\b)/ : Token;
/*   56 */ DefaultTerm: <INITIAL, Generic>/(?-u:\b)default(?-u:\b)/ : Token;
/*   57 */ ElseTerm: <INITIAL, Generic>/(?-u:\b)else(?-u:\b)/ : Token;
/*   58 */ EmbedTerm: <INITIAL, Generic>/(?-u:\b)embed(?-u:\b)/ : Token;
/*   59 */ EnumTerm: <INITIAL, Generic>/(?-u:\b)enum(?-u:\b)/ : Token;
/*   60 */ F32Term: <INITIAL, Generic>/(?-u:\b)f32(?-u:\b)/ : Token;
/*   61 */ F64Term: <INITIAL, Generic>/(?-u:\b)f64(?-u:\b)/ : Token;
/*   62 */ FinalTerm: <INITIAL, Generic>/(?-u:\b)final(?-u:\b)/ : Token;
/*   63 */ ForTerm: <INITIAL, Generic>/(?-u:\b)for(?-u:\b)/ : Token;
/*   64 */ FunctionTerm: <INITIAL, Generic>/(?-u:\b)function(?-u:\b)/ : Token;
/*   65 */ I32Term: <INITIAL, Generic>/(?-u:\b)i32(?-u:\b)/ : Token;
/*   66 */ I64Term: <INITIAL, Generic>/(?-u:\b)i64(?-u:\b)/ : Token;
/*   67 */ IfResetTerm: <INITIAL, Generic>/(?-u:\b)if_reset(?-u:\b)/ : Token;
/*   68 */ IfTerm: <INITIAL, Generic>/(?-u:\b)if(?-u:\b)/ : Token;
/*   69 */ ImportTerm: <INITIAL, Generic>/(?-u:\b)import(?-u:\b)/ : Token;
/*   70 */ IncludeTerm: <INITIAL, Generic>/(?-u:\b)include(?-u:\b)/ : Token;
/*   71 */ InitialTerm: <INITIAL, Generic>/(?-u:\b)initial(?-u:\b)/ : Token;
/*   72 */ InoutTerm: <INITIAL, Generic>/(?-u:\b)inout(?-u:\b)/ : Token;
/*   73 */ InputTerm: <INITIAL, Generic>/(?-u:\b)input(?-u:\b)/ : Token;
/*   74 */ InsideTerm: <INITIAL, Generic>/(?-u:\b)inside(?-u:\b)/ : Token;
/*   75 */ InstTerm: <INITIAL, Generic>/(?-u:\b)inst(?-u:\b)/ : Token;
/*   76 */ InterfaceTerm: <INITIAL, Generic>/(?-u:\b)interface(?-u:\b)/ : Token;
/*   77 */ InTerm: <INITIAL, Generic>/(?-u:\b)in(?-u:\b)/ : Token;
/*   78 */ LetTerm: <INITIAL, Generic>/(?-u:\b)let(?-u:\b)/ : Token;
/*   79 */ LogicTerm: <INITIAL, Generic>/(?-u:\b)logic(?-u:\b)/ : Token;
/*   80 */ LsbTerm: <INITIAL, Generic>/(?-u:\b)lsb(?-u:\b)/ : Token;
/*   81 */ ModportTerm: <INITIAL, Generic>/(?-u:\b)modport(?-u:\b)/ : Token;
/*   82 */ ModuleTerm: <INITIAL, Generic>/(?-u:\b)module(?-u:\b)/ : Token;
/*   83 */ MsbTerm: <INITIAL, Generic>/(?-u:\b)msb(?-u:\b)/ : Token;
/*   84 */ OutputTerm: <INITIAL, Generic>/(?-u:\b)output(?-u:\b)/ : Token;
/*   85 */ OutsideTerm: <INITIAL, Generic>/(?-u:\b)outside(?-u:\b)/ : Token;
/*   86 */ PackageTerm: <INITIAL, Generic>/(?-u:\b)package(?-u:\b)/ : Token;
/*   87 */ ParamTerm: <INITIAL, Generic>/(?-u:\b)param(?-u:\b)/ : Token;
/*   88 */ ProtoTerm: <INITIAL, Generic>/(?-u:\b)proto(?-u:\b)/ : Token;
/*   89 */ PubTerm: <INITIAL, Generic>/(?-u:\b)pub(?-u:\b)/ : Token;
/*   90 */ RepeatTerm: <INITIAL, Generic>/(?-u:\b)repeat(?-u:\b)/ : Token;
/*   91 */ ResetTerm: <INITIAL, Generic>/(?-u:\b)reset(?-u:\b)/ : Token;
/*   92 */ ResetAsyncHighTerm: <INITIAL, Generic>/(?-u:\b)reset_async_high(?-u:\b)/ : Token;
/*   93 */ ResetAsyncLowTerm: <INITIAL, Generic>/(?-u:\b)reset_async_low(?-u:\b)/ : Token;
/*   94 */ ResetSyncHighTerm: <INITIAL, Generic>/(?-u:\b)reset_sync_high(?-u:\b)/ : Token;
/*   95 */ ResetSyncLowTerm: <INITIAL, Generic>/(?-u:\b)reset_sync_low(?-u:\b)/ : Token;
/*   96 */ ReturnTerm: <INITIAL, Generic>/(?-u:\b)return(?-u:\b)/ : Token;
/*   97 */ BreakTerm: <INITIAL, Generic>/(?-u:\b)break(?-u:\b)/ : Token;
/*   98 */ SameTerm: <INITIAL, Generic>/(?-u:\b)same(?-u:\b)/ : Token;
/*   99 */ SignedTerm: <INITIAL, Generic>/(?-u:\b)signed(?-u:\b)/ : Token;
/*  100 */ StepTerm: <INITIAL, Generic>/(?-u:\b)step(?-u:\b)/ : Token;
/*  101 */ StringTerm: <INITIAL, Generic>/(?-u:\b)string(?-u:\b)/ : Token;
/*  102 */ StructTerm: <INITIAL, Generic>/(?-u:\b)struct(?-u:\b)/ : Token;
/*  103 */ SwitchTerm: <INITIAL, Generic>/(?-u:\b)switch(?-u:\b)/ : Token;
/*  104 */ TriTerm: <INITIAL, Generic>/(?-u:\b)tri(?-u:\b)/ : Token;
/*  105 */ TypeTerm: <INITIAL, Generic>/(?-u:\b)type(?-u:\b)/ : Token;
/*  106 */ U32Term: <INITIAL, Generic>/(?-u:\b)u32(?-u:\b)/ : Token;
/*  107 */ U64Term: <INITIAL, Generic>/(?-u:\b)u64(?-u:\b)/ : Token;
/*  108 */ UnionTerm: <INITIAL, Generic>/(?-u:\b)union(?-u:\b)/ : Token;
/*  109 */ UnsafeTerm: <INITIAL, Generic>/(?-u:\b)unsafe(?-u:\b)/ : Token;
/*  110 */ VarTerm: <INITIAL, Generic>/(?-u:\b)var(?-u:\b)/ : Token;
/*  111 */ DollarIdentifierTerm: <INITIAL, Generic>/\$[a-zA-Z_][0-9a-zA-Z_$]*/ : Token;
/*  112 */ IdentifierTerm: <INITIAL, Generic>/(?:r#)?[a-zA-Z_][0-9a-zA-Z_$]*/ : Token;
/*  113 */ AnyTerm: <Embed>/[^{}]+/ : Token;
/*  114 */ Comments: CommentsOpt /* Option */;
/*  115 */ CommentsOpt /* Option<T>::Some */: CommentsTerm;
/*  116 */ CommentsOpt /* Option<T>::None */: ;
/*  117 */ StartToken: Comments;
/*  118 */ StringLiteralToken: StringLiteralTerm : Token Comments;
/*  119 */ ExponentToken: ExponentTerm : Token Comments;
/*  120 */ FixedPointToken: FixedPointTerm : Token Comments;
/*  121 */ BasedToken: BasedTerm : Token Comments;
/*  122 */ BaseLessToken: BaseLessTerm : Token Comments;
/*  123 */ AllBitToken: AllBitTerm : Token Comments;
/*  124 */ AssignmentOperatorToken: AssignmentOperatorTerm : Token Comments;
/*  125 */ Operator01Token: Operator01Term : Token Comments;
/*  126 */ Operator02Token: Operator02Term : Token Comments;
/*  127 */ Operator03Token: Operator03Term : Token Comments;
/*  128 */ Operator04Token: Operator04Term : Token Comments;
/*  129 */ Operator05Token: Operator05Term : Token Comments;
/*  130 */ Operator06Token: Operator06Term : Token Comments;
/*  131 */ Operator07Token: Operator07Term : Token Comments;
/*  132 */ Operator08Token: Operator08Term : Token Comments;
/*  133 */ Operator09Token: Operator09Term : Token Comments;
/*  134 */ Operator10Token: Operator10Term : Token Comments;
/*  135 */ Operator11Token: Operator11Term : Token Comments;
/*  136 */ UnaryOperatorToken: UnaryOperatorTerm : Token Comments;
/*  137 */ BackQuoteToken: BackQuoteTerm : Token Comments;
/*  138 */ ColonToken: ColonTerm : Token Comments;
/*  139 */ ColonColonLAngleToken: ColonColonLAngleTerm : Token Comments;
/*  140 */ ColonColonToken: ColonColonTerm : Token Comments;
/*  141 */ CommaToken: CommaTerm : Token Comments;
/*  142 */ DotDotToken: DotDotTerm : Token Comments;
/*  143 */ DotDotEquToken: DotDotEquTerm : Token Comments;
/*  144 */ DotToken: DotTerm : Token Comments;
/*  145 */ EquToken: EquTerm : Token Comments;
/*  146 */ HashToken: HashTerm : Token Comments;
/*  147 */ QuoteLBraceToken: QuoteLBraceTerm : Token Comments;
/*  148 */ LAngleToken: LAngleTerm : Token Comments;
/*  149 */ LBraceToken: LBraceTerm : Token Comments;
/*  150 */ LBracketToken: LBracketTerm : Token Comments;
/*  151 */ LParenToken: LParenTerm : Token Comments;
/*  152 */ MinusColonToken: MinusColonTerm : Token Comments;
/*  153 */ MinusGTToken: MinusGTTerm : Token Comments;
/*  154 */ PlusColonToken: PlusColonTerm : Token Comments;
/*  155 */ RAngleToken: RAngleTerm : Token Comments;
/*  156 */ RBraceToken: RBraceTerm : Token Comments;
/*  157 */ RBracketToken: RBracketTerm : Token Comments;
/*  158 */ RParenToken: RParenTerm : Token Comments;
/*  159 */ SemicolonToken: SemicolonTerm : Token Comments;
/*  160 */ StarToken: StarTerm : Token Comments;
/*  161 */ AliasToken: AliasTerm : Token Comments;
/*  162 */ AlwaysCombToken: AlwaysCombTerm : Token Comments;
/*  163 */ AlwaysFfToken: AlwaysFfTerm : Token Comments;
/*  164 */ AsToken: AsTerm : Token Comments;
/*  165 */ AssignToken: AssignTerm : Token Comments;
/*  166 */ BitToken: BitTerm : Token Comments;
/*  167 */ CaseToken: CaseTerm : Token Comments;
/*  168 */ ClockToken: ClockTerm : Token Comments;
/*  169 */ ClockPosedgeToken: ClockPosedgeTerm : Token Comments;
/*  170 */ ClockNegedgeToken: ClockNegedgeTerm : Token Comments;
/*  171 */ ConstToken: ConstTerm : Token Comments;
/*  172 */ ConverseToken: ConverseTerm : Token Comments;
/*  173 */ DefaultToken: DefaultTerm : Token Comments;
/*  174 */ ElseToken: ElseTerm : Token Comments;
/*  175 */ EmbedToken: EmbedTerm : Token Comments;
/*  176 */ EnumToken: EnumTerm : Token Comments;
/*  177 */ F32Token: F32Term : Token Comments;
/*  178 */ F64Token: F64Term : Token Comments;
/*  179 */ FinalToken: FinalTerm : Token Comments;
/*  180 */ ForToken: ForTerm : Token Comments;
/*  181 */ FunctionToken: FunctionTerm : Token Comments;
/*  182 */ I32Token: I32Term : Token Comments;
/*  183 */ I64Token: I64Term : Token Comments;
/*  184 */ IfResetToken: IfResetTerm : Token Comments;
/*  185 */ IfToken: IfTerm : Token Comments;
/*  186 */ ImportToken: ImportTerm : Token Comments;
/*  187 */ IncludeToken: IncludeTerm : Token Comments;
/*  188 */ InitialToken: InitialTerm : Token Comments;
/*  189 */ InoutToken: InoutTerm : Token Comments;
/*  190 */ InputToken: InputTerm : Token Comments;
/*  191 */ InsideToken: InsideTerm : Token Comments;
/*  192 */ InstToken: InstTerm : Token Comments;
/*  193 */ InterfaceToken: InterfaceTerm : Token Comments;
/*  194 */ InToken: InTerm : Token Comments;
/*  195 */ LetToken: LetTerm : Token Comments;
/*  196 */ LogicToken: LogicTerm : Token Comments;
/*  197 */ LsbToken: LsbTerm : Token Comments;
/*  198 */ ModportToken: ModportTerm : Token Comments;
/*  199 */ ModuleToken: ModuleTerm : Token Comments;
/*  200 */ MsbToken: MsbTerm : Token Comments;
/*  201 */ OutputToken: OutputTerm : Token Comments;
/*  202 */ OutsideToken: OutsideTerm : Token Comments;
/*  203 */ PackageToken: PackageTerm : Token Comments;
/*  204 */ ParamToken: ParamTerm : Token Comments;
/*  205 */ ProtoToken: ProtoTerm : Token Comments;
/*  206 */ PubToken: PubTerm : Token Comments;
/*  207 */ RepeatToken: RepeatTerm : Token Comments;
/*  208 */ ResetToken: ResetTerm : Token Comments;
/*  209 */ ResetAsyncHighToken: ResetAsyncHighTerm : Token Comments;
/*  210 */ ResetAsyncLowToken: ResetAsyncLowTerm : Token Comments;
/*  211 */ ResetSyncHighToken: ResetSyncHighTerm : Token Comments;
/*  212 */ ResetSyncLowToken: ResetSyncLowTerm : Token Comments;
/*  213 */ ReturnToken: ReturnTerm : Token Comments;
/*  214 */ BreakToken: BreakTerm : Token Comments;
/*  215 */ SameToken: SameTerm : Token Comments;
/*  216 */ SignedToken: SignedTerm : Token Comments;
/*  217 */ StepToken: StepTerm : Token Comments;
/*  218 */ StringToken: StringTerm : Token Comments;
/*  219 */ StructToken: StructTerm : Token Comments;
/*  220 */ SwitchToken: SwitchTerm : Token Comments;
/*  221 */ TriToken: TriTerm : Token Comments;
/*  222 */ TypeToken: TypeTerm : Token Comments;
/*  223 */ U32Token: U32Term : Token Comments;
/*  224 */ U64Token: U64Term : Token Comments;
/*  225 */ UnionToken: UnionTerm : Token Comments;
/*  226 */ UnsafeToken: UnsafeTerm : Token Comments;
/*  227 */ VarToken: VarTerm : Token Comments;
/*  228 */ DollarIdentifierToken: DollarIdentifierTerm : Token Comments;
/*  229 */ IdentifierToken: IdentifierTerm : Token Comments;
/*  230 */ Start: StartToken : VerylToken;
/*  231 */ StringLiteral: StringLiteralToken : VerylToken;
/*  232 */ Exponent: ExponentToken : VerylToken;
/*  233 */ FixedPoint: FixedPointToken : VerylToken;
/*  234 */ Based: BasedToken : VerylToken;
/*  235 */ BaseLess: BaseLessToken : VerylToken;
/*  236 */ AllBit: AllBitToken : VerylToken;
/*  237 */ AssignmentOperator: AssignmentOperatorToken : VerylToken;
/*  238 */ Operator01: Operator01Token : VerylToken;
/*  239 */ Operator02: Operator02Token : VerylToken;
/*  240 */ Operator03: Operator03Token : VerylToken;
/*  241 */ Operator04: Operator04Token : VerylToken;
/*  242 */ Operator05: Operator05Token : VerylToken;
/*  243 */ Operator06: Operator06Token : VerylToken;
/*  244 */ Operator07: Operator07Token : VerylToken;
/*  245 */ Operator08: Operator08Token : VerylToken;
/*  246 */ Operator09: Operator09Token : VerylToken;
/*  247 */ Operator10: Operator10Token : VerylToken;
/*  248 */ Operator11: Operator11Token : VerylToken;
/*  249 */ UnaryOperator: UnaryOperatorToken : VerylToken;
/*  250 */ BackQuote: BackQuoteToken : VerylToken;
/*  251 */ Colon: ColonToken : VerylToken;
/*  252 */ ColonColonLAngle: ColonColonLAngleToken : VerylToken;
/*  253 */ ColonColon: ColonColonToken : VerylToken;
/*  254 */ Comma: CommaToken : VerylToken;
/*  255 */ DotDot: DotDotToken : VerylToken;
/*  256 */ DotDotEqu: DotDotEquToken : VerylToken;
/*  257 */ Dot: DotToken : VerylToken;
/*  258 */ Equ: EquToken : VerylToken;
/*  259 */ Hash: HashToken : VerylToken;
/*  260 */ QuoteLBrace: QuoteLBraceToken : VerylToken;
/*  261 */ LAngle: LAngleToken : VerylToken;
/*  262 */ LBrace: LBraceToken : VerylToken;
/*  263 */ LBracket: LBracketToken : VerylToken;
/*  264 */ LParen: LParenToken : VerylToken;
/*  265 */ MinusColon: MinusColonToken : VerylToken;
/*  266 */ MinusGT: MinusGTToken : VerylToken;
/*  267 */ PlusColon: PlusColonToken : VerylToken;
/*  268 */ RAngle: RAngleToken : VerylToken;
/*  269 */ RBrace: RBraceToken : VerylToken;
/*  270 */ RBracket: RBracketToken : VerylToken;
/*  271 */ RParen: RParenToken : VerylToken;
/*  272 */ Semicolon: SemicolonToken : VerylToken;
/*  273 */ Star: StarToken : VerylToken;
/*  274 */ Alias: AliasToken : VerylToken;
/*  275 */ AlwaysComb: AlwaysCombToken : VerylToken;
/*  276 */ AlwaysFf: AlwaysFfToken : VerylToken;
/*  277 */ As: AsToken : VerylToken;
/*  278 */ Assign: AssignToken : VerylToken;
/*  279 */ Bit: BitToken : VerylToken;
/*  280 */ Break: BreakToken : VerylToken;
/*  281 */ Case: CaseToken : VerylToken;
/*  282 */ Clock: ClockToken : VerylToken;
/*  283 */ ClockPosedge: ClockPosedgeToken : VerylToken;
/*  284 */ ClockNegedge: ClockNegedgeToken : VerylToken;
/*  285 */ Const: ConstToken : VerylToken;
/*  286 */ Converse: ConverseToken : VerylToken;
/*  287 */ Defaul: DefaultToken : VerylToken;
/*  288 */ Else: ElseToken : VerylToken;
/*  289 */ Embed: EmbedToken : VerylToken;
/*  290 */ Enum: EnumToken : VerylToken;
/*  291 */ F32: F32Token : VerylToken;
/*  292 */ F64: F64Token : VerylToken;
/*  293 */ Final: FinalToken : VerylToken;
/*  294 */ For: ForToken : VerylToken;
/*  295 */ Function: FunctionToken : VerylToken;
/*  296 */ I32: I32Token : VerylToken;
/*  297 */ I64: I64Token : VerylToken;
/*  298 */ If: IfToken : VerylToken;
/*  299 */ IfReset: IfResetToken : VerylToken;
/*  300 */ Import: ImportToken : VerylToken;
/*  301 */ In: InToken : VerylToken;
/*  302 */ Include: IncludeToken : VerylToken;
/*  303 */ Initial: InitialToken : VerylToken;
/*  304 */ Inout: InoutToken : VerylToken;
/*  305 */ Input: InputToken : VerylToken;
/*  306 */ Inside: InsideToken : VerylToken;
/*  307 */ Inst: InstToken : VerylToken;
/*  308 */ Interface: InterfaceToken : VerylToken;
/*  309 */ Let: LetToken : VerylToken;
/*  310 */ Logic: LogicToken : VerylToken;
/*  311 */ Lsb: LsbToken : VerylToken;
/*  312 */ Modport: ModportToken : VerylToken;
/*  313 */ Module: ModuleToken : VerylToken;
/*  314 */ Msb: MsbToken : VerylToken;
/*  315 */ Output: OutputToken : VerylToken;
/*  316 */ Outside: OutsideToken : VerylToken;
/*  317 */ Package: PackageToken : VerylToken;
/*  318 */ Param: ParamToken : VerylToken;
/*  319 */ Proto: ProtoToken : VerylToken;
/*  320 */ Pub: PubToken : VerylToken;
/*  321 */ Repeat: RepeatToken : VerylToken;
/*  322 */ Reset: ResetToken : VerylToken;
/*  323 */ ResetAsyncHigh: ResetAsyncHighToken : VerylToken;
/*  324 */ ResetAsyncLow: ResetAsyncLowToken : VerylToken;
/*  325 */ ResetSyncHigh: ResetSyncHighToken : VerylToken;
/*  326 */ ResetSyncLow: ResetSyncLowToken : VerylToken;
/*  327 */ Return: ReturnToken : VerylToken;
/*  328 */ Same: SameToken : VerylToken;
/*  329 */ Signed: SignedToken : VerylToken;
/*  330 */ Step: StepToken : VerylToken;
/*  331 */ Strin: StringToken : VerylToken;
/*  332 */ Struct: StructToken : VerylToken;
/*  333 */ Switch: SwitchToken : VerylToken;
/*  334 */ Tri: TriToken : VerylToken;
/*  335 */ Type: TypeToken : VerylToken;
/*  336 */ U32: U32Token : VerylToken;
/*  337 */ U64: U64Token : VerylToken;
/*  338 */ Union: UnionToken : VerylToken;
/*  339 */ Unsafe: UnsafeToken : VerylToken;
/*  340 */ Var: VarToken : VerylToken;
/*  341 */ DollarIdentifier: DollarIdentifierToken : VerylToken;
/*  342 */ Identifier: IdentifierToken : VerylToken;
/*  343 */ Number: IntegralNumber;
/*  344 */ Number: RealNumber;
/*  345 */ IntegralNumber: Based;
/*  346 */ IntegralNumber: BaseLess;
/*  347 */ IntegralNumber: AllBit;
/*  348 */ RealNumber: FixedPoint;
/*  349 */ RealNumber: Exponent;
/*  350 */ HierarchicalIdentifier: Identifier HierarchicalIdentifierList /* Vec */ HierarchicalIdentifierList0 /* Vec */;
/*  351 */ HierarchicalIdentifierList0 /* Vec<T>::Push */: Dot Identifier HierarchicalIdentifierList0List /* Vec */ HierarchicalIdentifierList0;
/*  352 */ HierarchicalIdentifierList0List /* Vec<T>::Push */: Select HierarchicalIdentifierList0List;
/*  353 */ HierarchicalIdentifierList0List /* Vec<T>::New */: ;
/*  354 */ HierarchicalIdentifierList0 /* Vec<T>::New */: ;
/*  355 */ HierarchicalIdentifierList /* Vec<T>::Push */: Select HierarchicalIdentifierList;
/*  356 */ HierarchicalIdentifierList /* Vec<T>::New */: ;
/*  357 */ ScopedIdentifier: ScopedIdentifierGroup ScopedIdentifierList /* Vec */;
/*  358 */ ScopedIdentifierGroup: DollarIdentifier;
/*  359 */ ScopedIdentifierGroup: Identifier ScopedIdentifierOpt /* Option */;
/*  360 */ ScopedIdentifierList /* Vec<T>::Push */: ColonColon Identifier ScopedIdentifierOpt0 /* Option */ ScopedIdentifierList;
/*  361 */ ScopedIdentifierList /* Vec<T>::New */: ;
/*  362 */ ScopedIdentifierOpt0 /* Option<T>::Some */: WithGenericArgument;
/*  363 */ ScopedIdentifierOpt0 /* Option<T>::None */: ;
/*  364 */ ScopedIdentifierOpt /* Option<T>::Some */: WithGenericArgument;
/*  365 */ ScopedIdentifierOpt /* Option<T>::None */: ;
/*  366 */ ExpressionIdentifier: ScopedIdentifier ExpressionIdentifierOpt /* Option */ ExpressionIdentifierList /* Vec */ ExpressionIdentifierList0 /* Vec */;
/*  367 */ ExpressionIdentifierList0 /* Vec<T>::Push */: Dot Identifier ExpressionIdentifierList0List /* Vec */ ExpressionIdentifierList0;
/*  368 */ ExpressionIdentifierList0List /* Vec<T>::Push */: Select ExpressionIdentifierList0List;
/*  369 */ ExpressionIdentifierList0List /* Vec<T>::New */: ;
/*  370 */ ExpressionIdentifierList0 /* Vec<T>::New */: ;
/*  371 */ ExpressionIdentifierList /* Vec<T>::Push */: Select ExpressionIdentifierList;
/*  372 */ ExpressionIdentifierList /* Vec<T>::New */: ;
/*  373 */ ExpressionIdentifierOpt /* Option<T>::Some */: Width;
/*  374 */ ExpressionIdentifierOpt /* Option<T>::None */: ;
/*  375 */ Expression: Expression01 ExpressionList /* Vec */;
/*  376 */ ExpressionList /* Vec<T>::Push */: Operator01 Expression01 ExpressionList;
/*  377 */ ExpressionList /* Vec<T>::New */: ;
/*  378 */ Expression01: Expression02 Expression01List /* Vec */;
/*  379 */ Expression01List /* Vec<T>::Push */: Operator02 Expression02 Expression01List;
/*  380 */ Expression01List /* Vec<T>::New */: ;
/*  381 */ Expression02: Expression03 Expression02List /* Vec */;
/*  382 */ Expression02List /* Vec<T>::Push */: Operator03 Expression03 Expression02List;
/*  383 */ Expression02List /* Vec<T>::New */: ;
/*  384 */ Expression03: Expression04 Expression03List /* Vec */;
/*  385 */ Expression03List /* Vec<T>::Push */: Operator04 Expression04 Expression03List;
/*  386 */ Expression03List /* Vec<T>::New */: ;
/*  387 */ Expression04: Expression05 Expression04List /* Vec */;
/*  388 */ Expression04List /* Vec<T>::Push */: Operator05 Expression05 Expression04List;
/*  389 */ Expression04List /* Vec<T>::New */: ;
/*  390 */ Expression05: Expression06 Expression05List /* Vec */;
/*  391 */ Expression05List /* Vec<T>::Push */: Operator06 Expression06 Expression05List;
/*  392 */ Expression05List /* Vec<T>::New */: ;
/*  393 */ Expression06: Expression07 Expression06List /* Vec */;
/*  394 */ Expression06List /* Vec<T>::Push */: Operator07 Expression07 Expression06List;
/*  395 */ Expression06List /* Vec<T>::New */: ;
/*  396 */ Expression07: Expression08 Expression07List /* Vec */;
/*  397 */ Expression07List /* Vec<T>::Push */: Operator08 Expression08 Expression07List;
/*  398 */ Expression07List /* Vec<T>::New */: ;
/*  399 */ Expression08: Expression09 Expression08List /* Vec */;
/*  400 */ Expression08List /* Vec<T>::Push */: Operator09 Expression09 Expression08List;
/*  401 */ Expression08List /* Vec<T>::New */: ;
/*  402 */ Expression09: Expression10 Expression09List /* Vec */;
/*  403 */ Expression09List /* Vec<T>::Push */: Expression09ListGroup Expression10 Expression09List;
/*  404 */ Expression09ListGroup: Operator10;
/*  405 */ Expression09ListGroup: Star;
/*  406 */ Expression09List /* Vec<T>::New */: ;
/*  407 */ Expression10: Expression11 Expression10List /* Vec */;
/*  408 */ Expression10List /* Vec<T>::Push */: Operator11 Expression11 Expression10List;
/*  409 */ Expression10List /* Vec<T>::New */: ;
/*  410 */ Expression11: Expression12 Expression11Opt /* Option */;
/*  411 */ Expression11Opt /* Option<T>::Some */: As CastingType;
/*  412 */ Expression11Opt /* Option<T>::None */: ;
/*  413 */ Expression12: Expression12List /* Vec */ Factor;
/*  414 */ Expression12List /* Vec<T>::Push */: Expression12ListGroup Expression12List;
/*  415 */ Expression12ListGroup: UnaryOperator;
/*  416 */ Expression12ListGroup: Operator09;
/*  417 */ Expression12ListGroup: Operator05;
/*  418 */ Expression12ListGroup: Operator03;
/*  419 */ Expression12ListGroup: Operator04;
/*  420 */ Expression12List /* Vec<T>::New */: ;
/*  421 */ Factor: Number;
/*  422 */ Factor: IdentifierFactor;
/*  423 */ Factor: LParen Expression RParen;
/*  424 */ Factor: LBrace ConcatenationList RBrace;
/*  425 */ Factor: QuoteLBrace ArrayLiteralList RBrace;
/*  426 */ Factor: IfExpression;
/*  427 */ Factor: CaseExpression;
/*  428 */ Factor: SwitchExpression;
/*  429 */ Factor: StringLiteral;
/*  430 */ Factor: FactorGroup;
/*  431 */ FactorGroup: Msb;
/*  432 */ FactorGroup: Lsb;
/*  433 */ Factor: InsideExpression;
/*  434 */ Factor: OutsideExpression;
/*  435 */ Factor: TypeExpression;
/*  436 */ Factor: FactorTypeFactor;
/*  437 */ IdentifierFactor: ExpressionIdentifier IdentifierFactorOpt /* Option */;
/*  438 */ IdentifierFactorOpt /* Option<T>::Some */: FunctionCall;
/*  439 */ IdentifierFactorOpt /* Option<T>::None */: ;
/*  440 */ FactorTypeFactor: FactorTypeFactorList /* Vec */ FactorType;
/*  441 */ FactorTypeFactorList /* Vec<T>::Push */: TypeModifier FactorTypeFactorList;
/*  442 */ FactorTypeFactorList /* Vec<T>::New */: ;
/*  443 */ FunctionCall: LParen FunctionCallOpt /* Option */ RParen;
/*  444 */ FunctionCallOpt /* Option<T>::Some */: ArgumentList;
/*  445 */ FunctionCallOpt /* Option<T>::None */: ;
/*  446 */ ArgumentList: ArgumentItem ArgumentListList /* Vec */ ArgumentListOpt /* Option */;
/*  447 */ ArgumentListList /* Vec<T>::Push */: Comma ArgumentItem ArgumentListList;
/*  448 */ ArgumentListList /* Vec<T>::New */: ;
/*  449 */ ArgumentListOpt /* Option<T>::Some */: Comma;
/*  450 */ ArgumentListOpt /* Option<T>::None */: ;
/*  451 */ ArgumentItem: Expression;
/*  452 */ ConcatenationList: ConcatenationItem ConcatenationListList /* Vec */ ConcatenationListOpt /* Option */;
/*  453 */ ConcatenationListList /* Vec<T>::Push */: Comma ConcatenationItem ConcatenationListList;
/*  454 */ ConcatenationListList /* Vec<T>::New */: ;
/*  455 */ ConcatenationListOpt /* Option<T>::Some */: Comma;
/*  456 */ ConcatenationListOpt /* Option<T>::None */: ;
/*  457 */ ConcatenationItem: Expression ConcatenationItemOpt /* Option */;
/*  458 */ ConcatenationItemOpt /* Option<T>::Some */: Repeat Expression;
/*  459 */ ConcatenationItemOpt /* Option<T>::None */: ;
/*  460 */ ArrayLiteralList: ArrayLiteralItem ArrayLiteralListList /* Vec */ ArrayLiteralListOpt /* Option */;
/*  461 */ ArrayLiteralListList /* Vec<T>::Push */: Comma ArrayLiteralItem ArrayLiteralListList;
/*  462 */ ArrayLiteralListList /* Vec<T>::New */: ;
/*  463 */ ArrayLiteralListOpt /* Option<T>::Some */: Comma;
/*  464 */ ArrayLiteralListOpt /* Option<T>::None */: ;
/*  465 */ ArrayLiteralItem: ArrayLiteralItemGroup;
/*  466 */ ArrayLiteralItemGroup: Expression ArrayLiteralItemOpt /* Option */;
/*  467 */ ArrayLiteralItemGroup: Defaul Colon Expression;
/*  468 */ ArrayLiteralItemOpt /* Option<T>::Some */: Repeat Expression;
/*  469 */ ArrayLiteralItemOpt /* Option<T>::None */: ;
/*  470 */ IfExpression: If Expression LBrace Expression RBrace IfExpressionList /* Vec */ Else LBrace Expression RBrace;
/*  471 */ IfExpressionList /* Vec<T>::Push */: Else If Expression LBrace Expression RBrace IfExpressionList;
/*  472 */ IfExpressionList /* Vec<T>::New */: ;
/*  473 */ CaseExpression: Case Expression LBrace CaseCondition Colon Expression Comma CaseExpressionList /* Vec */ Defaul Colon Expression CaseExpressionOpt /* Option */ RBrace;
/*  474 */ CaseExpressionList /* Vec<T>::Push */: CaseCondition Colon Expression Comma CaseExpressionList;
/*  475 */ CaseExpressionList /* Vec<T>::New */: ;
/*  476 */ CaseExpressionOpt /* Option<T>::Some */: Comma;
/*  477 */ CaseExpressionOpt /* Option<T>::None */: ;
/*  478 */ SwitchExpression: Switch LBrace SwitchCondition Colon Expression Comma SwitchExpressionList /* Vec */ Defaul Colon Expression SwitchExpressionOpt /* Option */ RBrace;
/*  479 */ SwitchExpressionList /* Vec<T>::Push */: SwitchCondition Colon Expression Comma SwitchExpressionList;
/*  480 */ SwitchExpressionList /* Vec<T>::New */: ;
/*  481 */ SwitchExpressionOpt /* Option<T>::Some */: Comma;
/*  482 */ SwitchExpressionOpt /* Option<T>::None */: ;
/*  483 */ TypeExpression: Type LParen Expression RParen;
/*  484 */ InsideExpression: Inside Expression LBrace RangeList RBrace;
/*  485 */ OutsideExpression: Outside Expression LBrace RangeList RBrace;
/*  486 */ RangeList: RangeItem RangeListList /* Vec */ RangeListOpt /* Option */;
/*  487 */ RangeListList /* Vec<T>::Push */: Comma RangeItem RangeListList;
/*  488 */ RangeListList /* Vec<T>::New */: ;
/*  489 */ RangeListOpt /* Option<T>::Some */: Comma;
/*  490 */ RangeListOpt /* Option<T>::None */: ;
/*  491 */ RangeItem: Range;
/*  492 */ Select: LBracket Expression SelectOpt /* Option */ RBracket;
/*  493 */ SelectOpt /* Option<T>::Some */: SelectOperator Expression;
/*  494 */ SelectOpt /* Option<T>::None */: ;
/*  495 */ SelectOperator: Colon;
/*  496 */ SelectOperator: PlusColon;
/*  497 */ SelectOperator: MinusColon;
/*  498 */ SelectOperator: Step;
/*  499 */ Width: LAngle Expression WidthList /* Vec */ RAngle;
/*  500 */ WidthList /* Vec<T>::Push */: Comma Expression WidthList;
/*  501 */ WidthList /* Vec<T>::New */: ;
/*  502 */ Array: LBracket Expression ArrayList /* Vec */ RBracket;
/*  503 */ ArrayList /* Vec<T>::Push */: Comma Expression ArrayList;
/*  504 */ ArrayList /* Vec<T>::New */: ;
/*  505 */ Range: Expression RangeOpt /* Option */;
/*  506 */ RangeOpt /* Option<T>::Some */: RangeOperator Expression;
/*  507 */ RangeOpt /* Option<T>::None */: ;
/*  508 */ RangeOperator: DotDot;
/*  509 */ RangeOperator: DotDotEqu;
/*  510 */ FixedType: U32;
/*  511 */ FixedType: U64;
/*  512 */ FixedType: I32;
/*  513 */ FixedType: I64;
/*  514 */ FixedType: F32;
/*  515 */ FixedType: F64;
/*  516 */ FixedType: Strin;
/*  517 */ VariableType: Clock;
/*  518 */ VariableType: ClockPosedge;
/*  519 */ VariableType: ClockNegedge;
/*  520 */ VariableType: Reset;
/*  521 */ VariableType: ResetAsyncHigh;
/*  522 */ VariableType: ResetAsyncLow;
/*  523 */ VariableType: ResetSyncHigh;
/*  524 */ VariableType: ResetSyncLow;
/*  525 */ VariableType: Logic;
/*  526 */ VariableType: Bit;
/*  527 */ UserDefinedType: ScopedIdentifier;
/*  528 */ TypeModifier: Tri;
/*  529 */ TypeModifier: Signed;
/*  530 */ TypeModifier: Defaul;
/*  531 */ FactorType: FactorTypeGroup;
/*  532 */ FactorTypeGroup: VariableType FactorTypeOpt /* Option */;
/*  533 */ FactorTypeGroup: FixedType;
/*  534 */ FactorTypeOpt /* Option<T>::Some */: Width;
/*  535 */ FactorTypeOpt /* Option<T>::None */: ;
/*  536 */ ScalarType: ScalarTypeList /* Vec */ ScalarTypeGroup;
/*  537 */ ScalarTypeGroup: UserDefinedType ScalarTypeOpt /* Option */;
/*  538 */ ScalarTypeGroup: FactorType;
/*  539 */ ScalarTypeList /* Vec<T>::Push */: TypeModifier ScalarTypeList;
/*  540 */ ScalarTypeList /* Vec<T>::New */: ;
/*  541 */ ScalarTypeOpt /* Option<T>::Some */: Width;
/*  542 */ ScalarTypeOpt /* Option<T>::None */: ;
/*  543 */ ArrayType: ScalarType ArrayTypeOpt /* Option */;
/*  544 */ ArrayTypeOpt /* Option<T>::Some */: Array;
/*  545 */ ArrayTypeOpt /* Option<T>::None */: ;
/*  546 */ CastingType: U32;
/*  547 */ CastingType: U64;
/*  548 */ CastingType: I32;
/*  549 */ CastingType: I64;
/*  550 */ CastingType: F32;
/*  551 */ CastingType: F64;
/*  552 */ CastingType: Clock;
/*  553 */ CastingType: ClockPosedge;
/*  554 */ CastingType: ClockNegedge;
/*  555 */ CastingType: Reset;
/*  556 */ CastingType: ResetAsyncHigh;
/*  557 */ CastingType: ResetAsyncLow;
/*  558 */ CastingType: ResetSyncHigh;
/*  559 */ CastingType: ResetSyncLow;
/*  560 */ CastingType: UserDefinedType;
/*  561 */ CastingType: Based;
/*  562 */ CastingType: BaseLess;
/*  563 */ ClockDomain: BackQuote Identifier;
/*  564 */ StatementBlock: LBrace StatementBlockList /* Vec */ RBrace;
/*  565 */ StatementBlockList /* Vec<T>::Push */: StatementBlockGroup StatementBlockList;
/*  566 */ StatementBlockList /* Vec<T>::New */: ;
/*  567 */ StatementBlockGroup: StatementBlockGroupList /* Vec */ StatementBlockGroupGroup;
/*  568 */ StatementBlockGroupGroup: LBrace StatementBlockGroupGroupList /* Vec */ RBrace;
/*  569 */ StatementBlockGroupGroupList /* Vec<T>::Push */: StatementBlockGroup StatementBlockGroupGroupList;
/*  570 */ StatementBlockGroupGroupList /* Vec<T>::New */: ;
/*  571 */ StatementBlockGroupGroup: StatementBlockItem;
/*  572 */ StatementBlockGroupList /* Vec<T>::Push */: Attribute StatementBlockGroupList;
/*  573 */ StatementBlockGroupList /* Vec<T>::New */: ;
/*  574 */ StatementBlockItem: VarDeclaration;
/*  575 */ StatementBlockItem: LetStatement;
/*  576 */ StatementBlockItem: Statement;
/*  577 */ Statement: IdentifierStatement;
/*  578 */ Statement: IfStatement;
/*  579 */ Statement: IfResetStatement;
/*  580 */ Statement: ReturnStatement;
/*  581 */ Statement: BreakStatement;
/*  582 */ Statement: ForStatement;
/*  583 */ Statement: CaseStatement;
/*  584 */ Statement: SwitchStatement;
/*  585 */ LetStatement: Let Identifier Colon LetStatementOpt /* Option */ ArrayType Equ Expression Semicolon;
/*  586 */ LetStatementOpt /* Option<T>::Some */: ClockDomain;
/*  587 */ LetStatementOpt /* Option<T>::None */: ;
/*  588 */ IdentifierStatement: ExpressionIdentifier IdentifierStatementGroup Semicolon;
/*  589 */ IdentifierStatementGroup: FunctionCall;
/*  590 */ IdentifierStatementGroup: Assignment;
/*  591 */ Assignment: AssignmentGroup Expression;
/*  592 */ AssignmentGroup: Equ;
/*  593 */ AssignmentGroup: AssignmentOperator;
/*  594 */ IfStatement: If Expression StatementBlock IfStatementList /* Vec */ IfStatementOpt /* Option */;
/*  595 */ IfStatementList /* Vec<T>::Push */: Else If Expression StatementBlock IfStatementList;
/*  596 */ IfStatementList /* Vec<T>::New */: ;
/*  597 */ IfStatementOpt /* Option<T>::Some */: Else StatementBlock;
/*  598 */ IfStatementOpt /* Option<T>::None */: ;
/*  599 */ IfResetStatement: IfReset StatementBlock IfResetStatementList /* Vec */ IfResetStatementOpt /* Option */;
/*  600 */ IfResetStatementList /* Vec<T>::Push */: Else If Expression StatementBlock IfResetStatementList;
/*  601 */ IfResetStatementList /* Vec<T>::New */: ;
/*  602 */ IfResetStatementOpt /* Option<T>::Some */: Else StatementBlock;
/*  603 */ IfResetStatementOpt /* Option<T>::None */: ;
/*  604 */ ReturnStatement: Return Expression Semicolon;
/*  605 */ BreakStatement: Break Semicolon;
/*  606 */ ForStatement: For Identifier Colon ScalarType In Range ForStatementOpt /* Option */ StatementBlock;
/*  607 */ ForStatementOpt /* Option<T>::Some */: Step AssignmentOperator Expression;
/*  608 */ ForStatementOpt /* Option<T>::None */: ;
/*  609 */ CaseStatement: Case Expression LBrace CaseStatementList /* Vec */ RBrace;
/*  610 */ CaseStatementList /* Vec<T>::Push */: CaseItem CaseStatementList;
/*  611 */ CaseStatementList /* Vec<T>::New */: ;
/*  612 */ CaseItem: CaseItemGroup Colon CaseItemGroup0;
/*  613 */ CaseItemGroup0: Statement;
/*  614 */ CaseItemGroup0: StatementBlock;
/*  615 */ CaseItemGroup: CaseCondition;
/*  616 */ CaseItemGroup: Defaul;
/*  617 */ CaseCondition: RangeItem CaseConditionList /* Vec */;
/*  618 */ CaseConditionList /* Vec<T>::Push */: Comma RangeItem CaseConditionList;
/*  619 */ CaseConditionList /* Vec<T>::New */: ;
/*  620 */ SwitchStatement: Switch LBrace SwitchStatementList /* Vec */ RBrace;
/*  621 */ SwitchStatementList /* Vec<T>::Push */: SwitchItem SwitchStatementList;
/*  622 */ SwitchStatementList /* Vec<T>::New */: ;
/*  623 */ SwitchItem: SwitchItemGroup Colon SwitchItemGroup0;
/*  624 */ SwitchItemGroup0: Statement;
/*  625 */ SwitchItemGroup0: StatementBlock;
/*  626 */ SwitchItemGroup: SwitchCondition;
/*  627 */ SwitchItemGroup: Defaul;
/*  628 */ SwitchCondition: Expression SwitchConditionList /* Vec */;
/*  629 */ SwitchConditionList /* Vec<T>::Push */: Comma Expression SwitchConditionList;
/*  630 */ SwitchConditionList /* Vec<T>::New */: ;
/*  631 */ Attribute: Hash LBracket Identifier AttributeOpt /* Option */ RBracket;
/*  632 */ AttributeOpt /* Option<T>::Some */: LParen AttributeList RParen;
/*  633 */ AttributeOpt /* Option<T>::None */: ;
/*  634 */ AttributeList: AttributeItem AttributeListList /* Vec */ AttributeListOpt /* Option */;
/*  635 */ AttributeListList /* Vec<T>::Push */: Comma AttributeItem AttributeListList;
/*  636 */ AttributeListList /* Vec<T>::New */: ;
/*  637 */ AttributeListOpt /* Option<T>::Some */: Comma;
/*  638 */ AttributeListOpt /* Option<T>::None */: ;
/*  639 */ AttributeItem: Identifier;
/*  640 */ AttributeItem: StringLiteral;
/*  641 */ LetDeclaration: Let Identifier Colon LetDeclarationOpt /* Option */ ArrayType Equ Expression Semicolon;
/*  642 */ LetDeclarationOpt /* Option<T>::Some */: ClockDomain;
/*  643 */ LetDeclarationOpt /* Option<T>::None */: ;
/*  644 */ VarDeclaration: Var Identifier Colon VarDeclarationOpt /* Option */ ArrayType Semicolon;
/*  645 */ VarDeclarationOpt /* Option<T>::Some */: ClockDomain;
/*  646 */ VarDeclarationOpt /* Option<T>::None */: ;
/*  647 */ ConstDeclaration: Const Identifier Colon ConstDeclarationGroup Equ Expression Semicolon;
/*  648 */ ConstDeclarationGroup: ArrayType;
/*  649 */ ConstDeclarationGroup: Type;
/*  650 */ TypeDefDeclaration: Type Identifier Equ ArrayType Semicolon;
/*  651 */ AlwaysFfDeclaration: AlwaysFf AlwaysFfDeclarationOpt /* Option */ StatementBlock;
/*  652 */ AlwaysFfDeclarationOpt /* Option<T>::Some */: AlwaysFfEventList;
/*  653 */ AlwaysFfDeclarationOpt /* Option<T>::None */: ;
/*  654 */ AlwaysFfEventList: LParen AlwaysFfClock AlwaysFfEventListOpt /* Option */ RParen;
/*  655 */ AlwaysFfEventListOpt /* Option<T>::Some */: Comma AlwaysFfReset;
/*  656 */ AlwaysFfEventListOpt /* Option<T>::None */: ;
/*  657 */ AlwaysFfClock: HierarchicalIdentifier;
/*  658 */ AlwaysFfReset: HierarchicalIdentifier;
/*  659 */ AlwaysCombDeclaration: AlwaysComb StatementBlock;
/*  660 */ AssignDeclaration: Assign AssignDestination Equ Expression Semicolon;
/*  661 */ AssignDestination: HierarchicalIdentifier;
/*  662 */ AssignDestination: LBrace AssignConcatenationList RBrace;
/*  663 */ AssignConcatenationList: AssignConcatenationItem AssignConcatenationListList /* Vec */ AssignConcatenationListOpt /* Option */;
/*  664 */ AssignConcatenationListList /* Vec<T>::Push */: Comma AssignConcatenationItem AssignConcatenationListList;
/*  665 */ AssignConcatenationListList /* Vec<T>::New */: ;
/*  666 */ AssignConcatenationListOpt /* Option<T>::Some */: Comma;
/*  667 */ AssignConcatenationListOpt /* Option<T>::None */: ;
/*  668 */ AssignConcatenationItem: HierarchicalIdentifier;
/*  669 */ ModportDeclaration: Modport Identifier LBrace ModportDeclarationOpt /* Option */ ModportDeclarationOpt0 /* Option */ RBrace;
/*  670 */ ModportDeclarationOpt0 /* Option<T>::Some */: DotDot ModportDefault;
/*  671 */ ModportDeclarationOpt0 /* Option<T>::None */: ;
/*  672 */ ModportDeclarationOpt /* Option<T>::Some */: ModportList;
/*  673 */ ModportDeclarationOpt /* Option<T>::None */: ;
/*  674 */ ModportList: ModportGroup ModportListList /* Vec */ ModportListOpt /* Option */;
/*  675 */ ModportListList /* Vec<T>::Push */: Comma ModportGroup ModportListList;
/*  676 */ ModportListList /* Vec<T>::New */: ;
/*  677 */ ModportListOpt /* Option<T>::Some */: Comma;
/*  678 */ ModportListOpt /* Option<T>::None */: ;
/*  679 */ ModportGroup: ModportGroupList /* Vec */ ModportGroupGroup;
/*  680 */ ModportGroupGroup: LBrace ModportList RBrace;
/*  681 */ ModportGroupGroup: ModportItem;
/*  682 */ ModportGroupList /* Vec<T>::Push */: Attribute ModportGroupList;
/*  683 */ ModportGroupList /* Vec<T>::New */: ;
/*  684 */ ModportItem: Identifier Colon Direction;
/*  685 */ ModportDefault: Input;
/*  686 */ ModportDefault: Output;
/*  687 */ ModportDefault: Same LParen Identifier RParen;
/*  688 */ ModportDefault: Converse LParen Identifier RParen;
/*  689 */ EnumDeclaration: Enum Identifier EnumDeclarationOpt /* Option */ LBrace EnumList RBrace;
/*  690 */ EnumDeclarationOpt /* Option<T>::Some */: Colon ScalarType;
/*  691 */ EnumDeclarationOpt /* Option<T>::None */: ;
/*  692 */ EnumList: EnumGroup EnumListList /* Vec */ EnumListOpt /* Option */;
/*  693 */ EnumListList /* Vec<T>::Push */: Comma EnumGroup EnumListList;
/*  694 */ EnumListList /* Vec<T>::New */: ;
/*  695 */ EnumListOpt /* Option<T>::Some */: Comma;
/*  696 */ EnumListOpt /* Option<T>::None */: ;
/*  697 */ EnumGroup: EnumGroupList /* Vec */ EnumGroupGroup;
/*  698 */ EnumGroupGroup: LBrace EnumList RBrace;
/*  699 */ EnumGroupGroup: EnumItem;
/*  700 */ EnumGroupList /* Vec<T>::Push */: Attribute EnumGroupList;
/*  701 */ EnumGroupList /* Vec<T>::New */: ;
/*  702 */ EnumItem: Identifier EnumItemOpt /* Option */;
/*  703 */ EnumItemOpt /* Option<T>::Some */: Equ Expression;
/*  704 */ EnumItemOpt /* Option<T>::None */: ;
/*  705 */ StructUnion: Struct;
/*  706 */ StructUnion: Union;
/*  707 */ StructUnionDeclaration: StructUnion Identifier StructUnionDeclarationOpt /* Option */ LBrace StructUnionList RBrace;
/*  708 */ StructUnionDeclarationOpt /* Option<T>::Some */: WithGenericParameter;
/*  709 */ StructUnionDeclarationOpt /* Option<T>::None */: ;
/*  710 */ StructUnionList: StructUnionGroup StructUnionListList /* Vec */ StructUnionListOpt /* Option */;
/*  711 */ StructUnionListList /* Vec<T>::Push */: Comma StructUnionGroup StructUnionListList;
/*  712 */ StructUnionListList /* Vec<T>::New */: ;
/*  713 */ StructUnionListOpt /* Option<T>::Some */: Comma;
/*  714 */ StructUnionListOpt /* Option<T>::None */: ;
/*  715 */ StructUnionGroup: StructUnionGroupList /* Vec */ StructUnionGroupGroup;
/*  716 */ StructUnionGroupGroup: LBrace StructUnionList RBrace;
/*  717 */ StructUnionGroupGroup: StructUnionItem;
/*  718 */ StructUnionGroupList /* Vec<T>::Push */: Attribute StructUnionGroupList;
/*  719 */ StructUnionGroupList /* Vec<T>::New */: ;
/*  720 */ StructUnionItem: Identifier Colon ScalarType;
/*  721 */ InitialDeclaration: Initial StatementBlock;
/*  722 */ FinalDeclaration: Final StatementBlock;
/*  723 */ InstDeclaration: Inst Identifier Colon InstDeclarationOpt /* Option */ ScopedIdentifier InstDeclarationOpt0 /* Option */ InstDeclarationOpt1 /* Option */ InstDeclarationOpt2 /* Option */ Semicolon;
/*  724 */ InstDeclarationOpt2 /* Option<T>::Some */: LParen InstDeclarationOpt3 /* Option */ RParen;
/*  725 */ InstDeclarationOpt3 /* Option<T>::Some */: InstPortList;
/*  726 */ InstDeclarationOpt3 /* Option<T>::None */: ;
/*  727 */ InstDeclarationOpt2 /* Option<T>::None */: ;
/*  728 */ InstDeclarationOpt1 /* Option<T>::Some */: InstParameter;
/*  729 */ InstDeclarationOpt1 /* Option<T>::None */: ;
/*  730 */ InstDeclarationOpt0 /* Option<T>::Some */: Array;
/*  731 */ InstDeclarationOpt0 /* Option<T>::None */: ;
/*  732 */ InstDeclarationOpt /* Option<T>::Some */: ClockDomain;
/*  733 */ InstDeclarationOpt /* Option<T>::None */: ;
/*  734 */ InstParameter: Hash LParen InstParameterOpt /* Option */ RParen;
/*  735 */ InstParameterOpt /* Option<T>::Some */: InstParameterList;
/*  736 */ InstParameterOpt /* Option<T>::None */: ;
/*  737 */ InstParameterList: InstParameterGroup InstParameterListList /* Vec */ InstParameterListOpt /* Option */;
/*  738 */ InstParameterListList /* Vec<T>::Push */: Comma InstParameterGroup InstParameterListList;
/*  739 */ InstParameterListList /* Vec<T>::New */: ;
/*  740 */ InstParameterListOpt /* Option<T>::Some */: Comma;
/*  741 */ InstParameterListOpt /* Option<T>::None */: ;
/*  742 */ InstParameterGroup: InstParameterGroupList /* Vec */ InstParameterGroupGroup;
/*  743 */ InstParameterGroupGroup: LBrace InstParameterList RBrace;
/*  744 */ InstParameterGroupGroup: InstParameterItem;
/*  745 */ InstParameterGroupList /* Vec<T>::Push */: Attribute InstParameterGroupList;
/*  746 */ InstParameterGroupList /* Vec<T>::New */: ;
/*  747 */ InstParameterItem: Identifier InstParameterItemOpt /* Option */;
/*  748 */ InstParameterItemOpt /* Option<T>::Some */: Colon Expression;
/*  749 */ InstParameterItemOpt /* Option<T>::None */: ;
/*  750 */ InstPortList: InstPortGroup InstPortListList /* Vec */ InstPortListOpt /* Option */;
/*  751 */ InstPortListList /* Vec<T>::Push */: Comma InstPortGroup InstPortListList;
/*  752 */ InstPortListList /* Vec<T>::New */: ;
/*  753 */ InstPortListOpt /* Option<T>::Some */: Comma;
/*  754 */ InstPortListOpt /* Option<T>::None */: ;
/*  755 */ InstPortGroup: InstPortGroupList /* Vec */ InstPortGroupGroup;
/*  756 */ InstPortGroupGroup: LBrace InstPortList RBrace;
/*  757 */ InstPortGroupGroup: InstPortItem;
/*  758 */ InstPortGroupList /* Vec<T>::Push */: Attribute InstPortGroupList;
/*  759 */ InstPortGroupList /* Vec<T>::New */: ;
/*  760 */ InstPortItem: Identifier InstPortItemOpt /* Option */;
/*  761 */ InstPortItemOpt /* Option<T>::Some */: Colon Expression;
/*  762 */ InstPortItemOpt /* Option<T>::None */: ;
/*  763 */ WithParameter: Hash LParen WithParameterOpt /* Option */ RParen;
/*  764 */ WithParameterOpt /* Option<T>::Some */: WithParameterList;
/*  765 */ WithParameterOpt /* Option<T>::None */: ;
/*  766 */ WithParameterList: WithParameterGroup WithParameterListList /* Vec */ WithParameterListOpt /* Option */;
/*  767 */ WithParameterListList /* Vec<T>::Push */: Comma WithParameterGroup WithParameterListList;
/*  768 */ WithParameterListList /* Vec<T>::New */: ;
/*  769 */ WithParameterListOpt /* Option<T>::Some */: Comma;
/*  770 */ WithParameterListOpt /* Option<T>::None */: ;
/*  771 */ WithParameterGroup: WithParameterGroupList /* Vec */ WithParameterGroupGroup;
/*  772 */ WithParameterGroupGroup: LBrace WithParameterList RBrace;
/*  773 */ WithParameterGroupGroup: WithParameterItem;
/*  774 */ WithParameterGroupList /* Vec<T>::Push */: Attribute WithParameterGroupList;
/*  775 */ WithParameterGroupList /* Vec<T>::New */: ;
/*  776 */ WithParameterItem: WithParameterItemGroup Identifier Colon WithParameterItemGroup0 Equ Expression;
/*  777 */ WithParameterItemGroup0: ArrayType;
/*  778 */ WithParameterItemGroup0: Type;
/*  779 */ WithParameterItemGroup: Param;
/*  780 */ WithParameterItemGroup: Const;
/*  781 */ GenericBound: Const;
/*  782 */ GenericBound: Type;
/*  783 */ GenericBound: Inst ScopedIdentifier;
/*  784 */ GenericBound: ScopedIdentifier;
/*  785 */ WithGenericParameter: ColonColonLAngle WithGenericParameterList RAngle;
/*  786 */ WithGenericParameterList: WithGenericParameterItem WithGenericParameterListList /* Vec */ WithGenericParameterListOpt /* Option */;
/*  787 */ WithGenericParameterListList /* Vec<T>::Push */: Comma WithGenericParameterItem WithGenericParameterListList;
/*  788 */ WithGenericParameterListList /* Vec<T>::New */: ;
/*  789 */ WithGenericParameterListOpt /* Option<T>::Some */: Comma;
/*  790 */ WithGenericParameterListOpt /* Option<T>::None */: ;
/*  791 */ WithGenericParameterItem: Identifier Colon GenericBound WithGenericParameterItemOpt /* Option */;
/*  792 */ WithGenericParameterItemOpt /* Option<T>::Some */: Equ WithGenericArgumentItem;
/*  793 */ WithGenericParameterItemOpt /* Option<T>::None */: ;
/*  794 */ WithGenericArgument: ColonColonLAngle %push(Generic) WithGenericArgumentOpt /* Option */ RAngle %pop();
/*  795 */ WithGenericArgumentOpt /* Option<T>::Some */: WithGenericArgumentList;
/*  796 */ WithGenericArgumentOpt /* Option<T>::None */: ;
/*  797 */ WithGenericArgumentList: WithGenericArgumentItem WithGenericArgumentListList /* Vec */ WithGenericArgumentListOpt /* Option */;
/*  798 */ WithGenericArgumentListList /* Vec<T>::Push */: Comma WithGenericArgumentItem WithGenericArgumentListList;
/*  799 */ WithGenericArgumentListList /* Vec<T>::New */: ;
/*  800 */ WithGenericArgumentListOpt /* Option<T>::Some */: Comma;
/*  801 */ WithGenericArgumentListOpt /* Option<T>::None */: ;
/*  802 */ WithGenericArgumentItem: ScopedIdentifier;
/*  803 */ WithGenericArgumentItem: Number;
/*  804 */ PortDeclaration: LParen PortDeclarationOpt /* Option */ RParen;
/*  805 */ PortDeclarationOpt /* Option<T>::Some */: PortDeclarationList;
/*  806 */ PortDeclarationOpt /* Option<T>::None */: ;
/*  807 */ PortDeclarationList: PortDeclarationGroup PortDeclarationListList /* Vec */ PortDeclarationListOpt /* Option */;
/*  808 */ PortDeclarationListList /* Vec<T>::Push */: Comma PortDeclarationGroup PortDeclarationListList;
/*  809 */ PortDeclarationListList /* Vec<T>::New */: ;
/*  810 */ PortDeclarationListOpt /* Option<T>::Some */: Comma;
/*  811 */ PortDeclarationListOpt /* Option<T>::None */: ;
/*  812 */ PortDeclarationGroup: PortDeclarationGroupList /* Vec */ PortDeclarationGroupGroup;
/*  813 */ PortDeclarationGroupGroup: LBrace PortDeclarationList RBrace;
/*  814 */ PortDeclarationGroupGroup: PortDeclarationItem;
/*  815 */ PortDeclarationGroupList /* Vec<T>::Push */: Attribute PortDeclarationGroupList;
/*  816 */ PortDeclarationGroupList /* Vec<T>::New */: ;
/*  817 */ PortDeclarationItem: Identifier Colon PortDeclarationItemGroup;
/*  818 */ PortDeclarationItemGroup: PortTypeConcrete;
/*  819 */ PortDeclarationItemGroup: PortTypeAbstract;
/*  820 */ PortTypeConcrete: Direction PortTypeConcreteOpt /* Option */ ArrayType PortTypeConcreteOpt0 /* Option */;
/*  821 */ PortTypeConcreteOpt0 /* Option<T>::Some */: Equ PortDefaultValue;
/*  822 */ PortTypeConcreteOpt0 /* Option<T>::None */: ;
/*  823 */ PortTypeConcreteOpt /* Option<T>::Some */: ClockDomain;
/*  824 */ PortTypeConcreteOpt /* Option<T>::None */: ;
/*  825 */ PortDefaultValue: Expression;
/*  826 */ PortTypeAbstract: PortTypeAbstractOpt /* Option */ Interface PortTypeAbstractOpt0 /* Option */ PortTypeAbstractOpt1 /* Option */;
/*  827 */ PortTypeAbstractOpt1 /* Option<T>::Some */: Array;
/*  828 */ PortTypeAbstractOpt1 /* Option<T>::None */: ;
/*  829 */ PortTypeAbstractOpt0 /* Option<T>::Some */: ColonColon Identifier;
/*  830 */ PortTypeAbstractOpt0 /* Option<T>::None */: ;
/*  831 */ PortTypeAbstractOpt /* Option<T>::Some */: ClockDomain;
/*  832 */ PortTypeAbstractOpt /* Option<T>::None */: ;
/*  833 */ Direction: Input;
/*  834 */ Direction: Output;
/*  835 */ Direction: Inout;
/*  836 */ Direction: Modport;
/*  837 */ Direction: Import;
/*  838 */ FunctionDeclaration: Function Identifier FunctionDeclarationOpt /* Option */ FunctionDeclarationOpt0 /* Option */ FunctionDeclarationOpt1 /* Option */ StatementBlock;
/*  839 */ FunctionDeclarationOpt1 /* Option<T>::Some */: MinusGT ScalarType;
/*  840 */ FunctionDeclarationOpt1 /* Option<T>::None */: ;
/*  841 */ FunctionDeclarationOpt0 /* Option<T>::Some */: PortDeclaration;
/*  842 */ FunctionDeclarationOpt0 /* Option<T>::None */: ;
/*  843 */ FunctionDeclarationOpt /* Option<T>::Some */: WithGenericParameter;
/*  844 */ FunctionDeclarationOpt /* Option<T>::None */: ;
/*  845 */ ImportDeclaration: Import ScopedIdentifier ImportDeclarationOpt /* Option */ Semicolon;
/*  846 */ ImportDeclarationOpt /* Option<T>::Some */: ColonColon Star;
/*  847 */ ImportDeclarationOpt /* Option<T>::None */: ;
/*  848 */ UnsafeBlock: Unsafe LParen Identifier RParen LBrace UnsafeBlockList /* Vec */ RBrace;
/*  849 */ UnsafeBlockList /* Vec<T>::Push */: GenerateGroup UnsafeBlockList;
/*  850 */ UnsafeBlockList /* Vec<T>::New */: ;
/*  851 */ ModuleDeclaration: Module Identifier ModuleDeclarationOpt /* Option */ ModuleDeclarationOpt0 /* Option */ ModuleDeclarationOpt1 /* Option */ ModuleDeclarationOpt2 /* Option */ LBrace ModuleDeclarationList /* Vec */ RBrace;
/*  852 */ ModuleDeclarationList /* Vec<T>::Push */: ModuleGroup ModuleDeclarationList;
/*  853 */ ModuleDeclarationList /* Vec<T>::New */: ;
/*  854 */ ModuleDeclarationOpt2 /* Option<T>::Some */: PortDeclaration;
/*  855 */ ModuleDeclarationOpt2 /* Option<T>::None */: ;
/*  856 */ ModuleDeclarationOpt1 /* Option<T>::Some */: WithParameter;
/*  857 */ ModuleDeclarationOpt1 /* Option<T>::None */: ;
/*  858 */ ModuleDeclarationOpt0 /* Option<T>::Some */: For ScopedIdentifier;
/*  859 */ ModuleDeclarationOpt0 /* Option<T>::None */: ;
/*  860 */ ModuleDeclarationOpt /* Option<T>::Some */: WithGenericParameter;
/*  861 */ ModuleDeclarationOpt /* Option<T>::None */: ;
/*  862 */ ModuleGroup: ModuleGroupList /* Vec */ ModuleGroupGroup;
/*  863 */ ModuleGroupGroup: LBrace ModuleGroupGroupList /* Vec */ RBrace;
/*  864 */ ModuleGroupGroupList /* Vec<T>::Push */: ModuleGroup ModuleGroupGroupList;
/*  865 */ ModuleGroupGroupList /* Vec<T>::New */: ;
/*  866 */ ModuleGroupGroup: ModuleItem;
/*  867 */ ModuleGroupList /* Vec<T>::Push */: Attribute ModuleGroupList;
/*  868 */ ModuleGroupList /* Vec<T>::New */: ;
/*  869 */ ModuleItem: GenerateItem;
/*  870 */ InterfaceDeclaration: Interface Identifier InterfaceDeclarationOpt /* Option */ InterfaceDeclarationOpt0 /* Option */ LBrace InterfaceDeclarationList /* Vec */ RBrace;
/*  871 */ InterfaceDeclarationList /* Vec<T>::Push */: InterfaceGroup InterfaceDeclarationList;
/*  872 */ InterfaceDeclarationList /* Vec<T>::New */: ;
/*  873 */ InterfaceDeclarationOpt0 /* Option<T>::Some */: WithParameter;
/*  874 */ InterfaceDeclarationOpt0 /* Option<T>::None */: ;
/*  875 */ InterfaceDeclarationOpt /* Option<T>::Some */: WithGenericParameter;
/*  876 */ InterfaceDeclarationOpt /* Option<T>::None */: ;
/*  877 */ InterfaceGroup: InterfaceGroupList /* Vec */ InterfaceGroupGroup;
/*  878 */ InterfaceGroupGroup: LBrace InterfaceGroupGroupList /* Vec */ RBrace;
/*  879 */ InterfaceGroupGroupList /* Vec<T>::Push */: InterfaceGroup InterfaceGroupGroupList;
/*  880 */ InterfaceGroupGroupList /* Vec<T>::New */: ;
/*  881 */ InterfaceGroupGroup: InterfaceItem;
/*  882 */ InterfaceGroupList /* Vec<T>::Push */: Attribute InterfaceGroupList;
/*  883 */ InterfaceGroupList /* Vec<T>::New */: ;
/*  884 */ InterfaceItem: GenerateItem;
/*  885 */ InterfaceItem: ModportDeclaration;
/*  886 */ GenerateIfDeclaration: If Expression GenerateNamedBlock GenerateIfDeclarationList /* Vec */ GenerateIfDeclarationOpt /* Option */;
/*  887 */ GenerateIfDeclarationList /* Vec<T>::Push */: Else If Expression GenerateOptionalNamedBlock GenerateIfDeclarationList;
/*  888 */ GenerateIfDeclarationList /* Vec<T>::New */: ;
/*  889 */ GenerateIfDeclarationOpt /* Option<T>::Some */: Else GenerateOptionalNamedBlock;
/*  890 */ GenerateIfDeclarationOpt /* Option<T>::None */: ;
/*  891 */ GenerateForDeclaration: For Identifier In Range GenerateForDeclarationOpt /* Option */ GenerateNamedBlock;
/*  892 */ GenerateForDeclarationOpt /* Option<T>::Some */: Step AssignmentOperator Expression;
/*  893 */ GenerateForDeclarationOpt /* Option<T>::None */: ;
/*  894 */ GenerateBlockDeclaration: GenerateNamedBlock;
/*  895 */ GenerateNamedBlock: Colon Identifier LBrace GenerateNamedBlockList /* Vec */ RBrace;
/*  896 */ GenerateNamedBlockList /* Vec<T>::Push */: GenerateGroup GenerateNamedBlockList;
/*  897 */ GenerateNamedBlockList /* Vec<T>::New */: ;
/*  898 */ GenerateOptionalNamedBlock: GenerateOptionalNamedBlockOpt /* Option */ LBrace GenerateOptionalNamedBlockList /* Vec */ RBrace;
/*  899 */ GenerateOptionalNamedBlockList /* Vec<T>::Push */: GenerateGroup GenerateOptionalNamedBlockList;
/*  900 */ GenerateOptionalNamedBlockList /* Vec<T>::New */: ;
/*  901 */ GenerateOptionalNamedBlockOpt /* Option<T>::Some */: Colon Identifier;
/*  902 */ GenerateOptionalNamedBlockOpt /* Option<T>::None */: ;
/*  903 */ GenerateGroup: GenerateGroupList /* Vec */ GenerateGroupGroup;
/*  904 */ GenerateGroupGroup: LBrace GenerateGroupGroupList /* Vec */ RBrace;
/*  905 */ GenerateGroupGroupList /* Vec<T>::Push */: GenerateGroup GenerateGroupGroupList;
/*  906 */ GenerateGroupGroupList /* Vec<T>::New */: ;
/*  907 */ GenerateGroupGroup: GenerateItem;
/*  908 */ GenerateGroupList /* Vec<T>::Push */: Attribute GenerateGroupList;
/*  909 */ GenerateGroupList /* Vec<T>::New */: ;
/*  910 */ GenerateItem: LetDeclaration;
/*  911 */ GenerateItem: VarDeclaration;
/*  912 */ GenerateItem: InstDeclaration;
/*  913 */ GenerateItem: ConstDeclaration;
/*  914 */ GenerateItem: AlwaysFfDeclaration;
/*  915 */ GenerateItem: AlwaysCombDeclaration;
/*  916 */ GenerateItem: AssignDeclaration;
/*  917 */ GenerateItem: FunctionDeclaration;
/*  918 */ GenerateItem: GenerateIfDeclaration;
/*  919 */ GenerateItem: GenerateForDeclaration;
/*  920 */ GenerateItem: GenerateBlockDeclaration;
/*  921 */ GenerateItem: TypeDefDeclaration;
/*  922 */ GenerateItem: EnumDeclaration;
/*  923 */ GenerateItem: StructUnionDeclaration;
/*  924 */ GenerateItem: ImportDeclaration;
/*  925 */ GenerateItem: AliasDeclaration;
/*  926 */ GenerateItem: InitialDeclaration;
/*  927 */ GenerateItem: FinalDeclaration;
/*  928 */ GenerateItem: UnsafeBlock;
/*  929 */ PackageDeclaration: Package Identifier PackageDeclarationOpt /* Option */ PackageDeclarationOpt0 /* Option */ LBrace PackageDeclarationList /* Vec */ RBrace;
/*  930 */ PackageDeclarationList /* Vec<T>::Push */: PackageGroup PackageDeclarationList;
/*  931 */ PackageDeclarationList /* Vec<T>::New */: ;
/*  932 */ PackageDeclarationOpt0 /* Option<T>::Some */: For ScopedIdentifier;
/*  933 */ PackageDeclarationOpt0 /* Option<T>::None */: ;
/*  934 */ PackageDeclarationOpt /* Option<T>::Some */: WithGenericParameter;
/*  935 */ PackageDeclarationOpt /* Option<T>::None */: ;
/*  936 */ PackageGroup: PackageGroupList /* Vec */ PackageGroupGroup;
/*  937 */ PackageGroupGroup: LBrace PackageGroupGroupList /* Vec */ RBrace;
/*  938 */ PackageGroupGroupList /* Vec<T>::Push */: PackageGroup PackageGroupGroupList;
/*  939 */ PackageGroupGroupList /* Vec<T>::New */: ;
/*  940 */ PackageGroupGroup: PackageItem;
/*  941 */ PackageGroupList /* Vec<T>::Push */: Attribute PackageGroupList;
/*  942 */ PackageGroupList /* Vec<T>::New */: ;
/*  943 */ PackageItem: ConstDeclaration;
/*  944 */ PackageItem: TypeDefDeclaration;
/*  945 */ PackageItem: EnumDeclaration;
/*  946 */ PackageItem: StructUnionDeclaration;
/*  947 */ PackageItem: FunctionDeclaration;
/*  948 */ PackageItem: ImportDeclaration;
/*  949 */ PackageItem: AliasDeclaration;
/*  950 */ AliasDeclaration: Alias AliasDeclarationGroup Identifier Equ ScopedIdentifier Semicolon;
/*  951 */ AliasDeclarationGroup: Module;
/*  952 */ AliasDeclarationGroup: Interface;
/*  953 */ AliasDeclarationGroup: Package;
/*  954 */ ProtoModuleDeclaration: Proto Module Identifier ProtoModuleDeclarationOpt /* Option */ ProtoModuleDeclarationOpt0 /* Option */ Semicolon;
/*  955 */ ProtoModuleDeclarationOpt0 /* Option<T>::Some */: PortDeclaration;
/*  956 */ ProtoModuleDeclarationOpt0 /* Option<T>::None */: ;
/*  957 */ ProtoModuleDeclarationOpt /* Option<T>::Some */: WithParameter;
/*  958 */ ProtoModuleDeclarationOpt /* Option<T>::None */: ;
/*  959 */ ProtoPackageDeclaration: Proto Package Identifier LBrace ProtoPackageDeclarationList /* Vec */ RBrace;
/*  960 */ ProtoPackageDeclarationList /* Vec<T>::Push */: ProtoPacakgeItem ProtoPackageDeclarationList;
/*  961 */ ProtoPackageDeclarationList /* Vec<T>::New */: ;
/*  962 */ ProtoPacakgeItem: ProtoConstDeclaration;
/*  963 */ ProtoPacakgeItem: ProtoTypeDefDeclaration;
/*  964 */ ProtoPacakgeItem: EnumDeclaration;
/*  965 */ ProtoPacakgeItem: StructUnionDeclaration;
/*  966 */ ProtoPacakgeItem: ProtoFunctionDeclaration;
/*  967 */ ProtoPacakgeItem: ImportDeclaration;
/*  968 */ ProtoConstDeclaration: Const Identifier Colon ProtoConstDeclarationGroup Semicolon;
/*  969 */ ProtoConstDeclarationGroup: ArrayType;
/*  970 */ ProtoConstDeclarationGroup: Type;
/*  971 */ ProtoTypeDefDeclaration: Type Identifier Semicolon;
/*  972 */ ProtoFunctionDeclaration: Function Identifier ProtoFunctionDeclarationOpt /* Option */ ProtoFunctionDeclarationOpt0 /* Option */ ProtoFunctionDeclarationOpt1 /* Option */ Semicolon;
/*  973 */ ProtoFunctionDeclarationOpt1 /* Option<T>::Some */: MinusGT ScalarType;
/*  974 */ ProtoFunctionDeclarationOpt1 /* Option<T>::None */: ;
/*  975 */ ProtoFunctionDeclarationOpt0 /* Option<T>::Some */: PortDeclaration;
/*  976 */ ProtoFunctionDeclarationOpt0 /* Option<T>::None */: ;
/*  977 */ ProtoFunctionDeclarationOpt /* Option<T>::Some */: WithGenericParameter;
/*  978 */ ProtoFunctionDeclarationOpt /* Option<T>::None */: ;
/*  979 */ EmbedDeclaration: Embed LParen Identifier RParen Identifier EmbedContent;
/*  980 */ EmbedContent: EmbedContentToken : VerylToken;
/*  981 */ EmbedContentToken: LBraceTerm %push(Embed) LBraceTerm LBraceTerm EmbedContentTokenList /* Vec */ RBraceTerm RBraceTerm RBraceTerm %pop() Comments;
/*  982 */ EmbedContentTokenList /* Vec<T>::Push */: EmbedItem EmbedContentTokenList;
/*  983 */ EmbedContentTokenList /* Vec<T>::New */: ;
/*  984 */ EmbedItem: LBraceTerm EmbedItemList /* Vec */ RBraceTerm;
/*  985 */ EmbedItemList /* Vec<T>::Push */: EmbedItem EmbedItemList;
/*  986 */ EmbedItemList /* Vec<T>::New */: ;
/*  987 */ EmbedItem: AnyTerm;
/*  988 */ IncludeDeclaration: Include LParen Identifier Comma StringLiteral RParen Semicolon;
/*  989 */ DescriptionGroup: DescriptionGroupList /* Vec */ DescriptionGroupGroup;
/*  990 */ DescriptionGroupGroup: LBrace DescriptionGroupGroupList /* Vec */ RBrace;
/*  991 */ DescriptionGroupGroupList /* Vec<T>::Push */: DescriptionGroup DescriptionGroupGroupList;
/*  992 */ DescriptionGroupGroupList /* Vec<T>::New */: ;
/*  993 */ DescriptionGroupGroup: DescriptionItem;
/*  994 */ DescriptionGroupList /* Vec<T>::Push */: Attribute DescriptionGroupList;
/*  995 */ DescriptionGroupList /* Vec<T>::New */: ;
/*  996 */ DescriptionItem: DescriptionItemOpt /* Option */ PublicDescriptionItem;
/*  997 */ DescriptionItem: ImportDeclaration;
/*  998 */ DescriptionItem: EmbedDeclaration;
/*  999 */ DescriptionItem: IncludeDeclaration;
/* 1000 */ DescriptionItemOpt /* Option<T>::Some */: Pub;
/* 1001 */ DescriptionItemOpt /* Option<T>::None */: ;
/* 1002 */ PublicDescriptionItem: ModuleDeclaration;
/* 1003 */ PublicDescriptionItem: InterfaceDeclaration;
/* 1004 */ PublicDescriptionItem: PackageDeclaration;
/* 1005 */ PublicDescriptionItem: AliasDeclaration;
/* 1006 */ PublicDescriptionItem: ProtoModuleDeclaration;
/* 1007 */ PublicDescriptionItem: ProtoPackageDeclaration;
/* 1008 */ Veryl: Start VerylList /* Vec */;
/* 1009 */ VerylList /* Vec<T>::Push */: DescriptionGroup VerylList;
/* 1010 */ VerylList /* Vec<T>::New */: ;
