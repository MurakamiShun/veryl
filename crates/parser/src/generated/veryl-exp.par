%start Veryl
%title "Veryl grammar"
%comment "Empty grammar generated by `parol`"
%user_type Token = crate::veryl_token::Token
%user_type VerylToken = crate::veryl_token::VerylToken

%scanner Embed {
    %auto_newline_off
    %auto_ws_off
}
%scanner Generic {}

%%

/*   0 */ CommentsTerm: <INITIAL, Generic>"(?:(?:(?://.*(?:\r\n|\r|\n|$))|(?:(?ms)/\u{2a}.*?\u{2a}/))\s*)+" : Token;
/*   1 */ StringLiteralTerm: <INITIAL, Generic>"\u{0022}(?:\\[\u{0022}\\/bfnrt]|u[0-9a-fA-F]{4}|[^\u{0022}\\\u0000-\u001F])*\u{0022}" : Token;
/*   2 */ ExponentTerm: <INITIAL, Generic>/[0-9]+(?:_[0-9]+)*\.[0-9]+(?:_[0-9]+)*[eE][+-]?[0-9]+(?:_[0-9]+)*/ : Token;
/*   3 */ FixedPointTerm: <INITIAL, Generic>/[0-9]+(?:_[0-9]+)*\.[0-9]+(?:_[0-9]+)*/ : Token;
/*   4 */ BasedTerm: <INITIAL, Generic>/(?:[0-9]+(?:_[0-9]+)*)?'s?[bodh][0-9a-fA-FxzXZ]+(?:_[0-9a-fA-FxzXZ]+)*/ : Token;
/*   5 */ AllBitTerm: <INITIAL, Generic>/(?:[0-9]+(?:_[0-9]+)*)?'[01xzXZ]/ : Token;
/*   6 */ BaseLessTerm: <INITIAL, Generic>/[0-9]+(?:_[0-9]+)*/ : Token;
/*   7 */ MinusColonTerm: '-:' : Token;
/*   8 */ MinusGTTerm: '->' : Token;
/*   9 */ PlusColonTerm: '+:' : Token;
/*  10 */ AssignmentOperatorTerm: "\+=|-=|\*=|/=|%=|&=|\|=|\^=|<<=|>>=|<<<=|>>>=" : Token;
/*  11 */ Operator11Term: "\*\*" : Token;
/*  12 */ Operator10Term: "/|%" : Token;
/*  13 */ Operator09Term: "\+|-" : Token;
/*  14 */ Operator08Term: "<<<|>>>|<<|>>" : Token;
/*  15 */ Operator07Term: "<=|>=|<:|>:" : Token;
/*  16 */ Operator06Term: "===|==\?|!==|!=\?|==|!=" : Token;
/*  17 */ Operator02Term: "&&" : Token;
/*  18 */ Operator01Term: "\|\|" : Token;
/*  19 */ Operator05Term: "&" : Token;
/*  20 */ Operator04Term: "\^~|\^|~\^" : Token;
/*  21 */ Operator03Term: "\|" : Token;
/*  22 */ UnaryOperatorTerm: "~&|~\||!|~" : Token;
/*  23 */ BackQuoteTerm: <INITIAL, Generic>"`" : Token;
/*  24 */ ColonColonLAngleTerm: <INITIAL, Generic>'::<' : Token;
/*  25 */ ColonColonTerm: <INITIAL, Generic>'::' : Token;
/*  26 */ ColonTerm: <INITIAL, Generic>':' : Token;
/*  27 */ CommaTerm: <INITIAL, Generic>',' : Token;
/*  28 */ DotDotEquTerm: <INITIAL, Generic>'..=' : Token;
/*  29 */ DotDotTerm: <INITIAL, Generic>'..' : Token;
/*  30 */ DotTerm: <INITIAL, Generic>'.' : Token;
/*  31 */ EquTerm: <INITIAL, Generic>'=' : Token;
/*  32 */ HashTerm: <INITIAL, Generic>'#' : Token;
/*  33 */ LAngleTerm: <INITIAL, Generic>'<' : Token;
/*  34 */ QuoteLBraceTerm: <INITIAL, Generic>"'\{" : Token;
/*  35 */ LBraceTerm: <INITIAL, Embed, Generic>'{' : Token;
/*  36 */ LBracketTerm: <INITIAL, Generic>'[' : Token;
/*  37 */ LParenTerm: <INITIAL, Generic>'(' : Token;
/*  38 */ RAngleTerm: <INITIAL, Generic>'>' : Token;
/*  39 */ RBraceTerm: <INITIAL, Embed, Generic>'}' : Token;
/*  40 */ RBracketTerm: <INITIAL, Generic>']' : Token;
/*  41 */ RParenTerm: <INITIAL, Generic>')' : Token;
/*  42 */ SemicolonTerm: <INITIAL, Generic>';' : Token;
/*  43 */ StarTerm: <INITIAL, Generic>'*' : Token;
/*  44 */ AlwaysCombTerm: <INITIAL, Generic>/(?-u:\b)always_comb(?-u:\b)/ : Token;
/*  45 */ AlwaysFfTerm: <INITIAL, Generic>/(?-u:\b)always_ff(?-u:\b)/ : Token;
/*  46 */ AssignTerm: <INITIAL, Generic>/(?-u:\b)assign(?-u:\b)/ : Token;
/*  47 */ AsTerm: <INITIAL, Generic>/(?-u:\b)as(?-u:\b)/ : Token;
/*  48 */ BitTerm: <INITIAL, Generic>/(?-u:\b)bit(?-u:\b)/ : Token;
/*  49 */ CaseTerm: <INITIAL, Generic>/(?-u:\b)case(?-u:\b)/ : Token;
/*  50 */ ClockTerm: <INITIAL, Generic>/(?-u:\b)clock(?-u:\b)/ : Token;
/*  51 */ ClockPosedgeTerm: <INITIAL, Generic>/(?-u:\b)clock_posedge(?-u:\b)/ : Token;
/*  52 */ ClockNegedgeTerm: <INITIAL, Generic>/(?-u:\b)clock_negedge(?-u:\b)/ : Token;
/*  53 */ ConstTerm: <INITIAL, Generic>/(?-u:\b)const(?-u:\b)/ : Token;
/*  54 */ ConverseTerm: <INITIAL, Generic>/(?-u:\b)converse(?-u:\b)/ : Token;
/*  55 */ DefaultTerm: <INITIAL, Generic>/(?-u:\b)default(?-u:\b)/ : Token;
/*  56 */ ElseTerm: <INITIAL, Generic>/(?-u:\b)else(?-u:\b)/ : Token;
/*  57 */ EmbedTerm: <INITIAL, Generic>/(?-u:\b)embed(?-u:\b)/ : Token;
/*  58 */ EnumTerm: <INITIAL, Generic>/(?-u:\b)enum(?-u:\b)/ : Token;
/*  59 */ ExportTerm: <INITIAL, Generic>/(?-u:\b)export(?-u:\b)/ : Token;
/*  60 */ F32Term: <INITIAL, Generic>/(?-u:\b)f32(?-u:\b)/ : Token;
/*  61 */ F64Term: <INITIAL, Generic>/(?-u:\b)f64(?-u:\b)/ : Token;
/*  62 */ FinalTerm: <INITIAL, Generic>/(?-u:\b)final(?-u:\b)/ : Token;
/*  63 */ ForTerm: <INITIAL, Generic>/(?-u:\b)for(?-u:\b)/ : Token;
/*  64 */ FunctionTerm: <INITIAL, Generic>/(?-u:\b)function(?-u:\b)/ : Token;
/*  65 */ I32Term: <INITIAL, Generic>/(?-u:\b)i32(?-u:\b)/ : Token;
/*  66 */ I64Term: <INITIAL, Generic>/(?-u:\b)i64(?-u:\b)/ : Token;
/*  67 */ IfResetTerm: <INITIAL, Generic>/(?-u:\b)if_reset(?-u:\b)/ : Token;
/*  68 */ IfTerm: <INITIAL, Generic>/(?-u:\b)if(?-u:\b)/ : Token;
/*  69 */ ImportTerm: <INITIAL, Generic>/(?-u:\b)import(?-u:\b)/ : Token;
/*  70 */ IncludeTerm: <INITIAL, Generic>/(?-u:\b)include(?-u:\b)/ : Token;
/*  71 */ InitialTerm: <INITIAL, Generic>/(?-u:\b)initial(?-u:\b)/ : Token;
/*  72 */ InoutTerm: <INITIAL, Generic>/(?-u:\b)inout(?-u:\b)/ : Token;
/*  73 */ InputTerm: <INITIAL, Generic>/(?-u:\b)input(?-u:\b)/ : Token;
/*  74 */ InsideTerm: <INITIAL, Generic>/(?-u:\b)inside(?-u:\b)/ : Token;
/*  75 */ InstTerm: <INITIAL, Generic>/(?-u:\b)inst(?-u:\b)/ : Token;
/*  76 */ InterfaceTerm: <INITIAL, Generic>/(?-u:\b)interface(?-u:\b)/ : Token;
/*  77 */ InTerm: <INITIAL, Generic>/(?-u:\b)in(?-u:\b)/ : Token;
/*  78 */ LetTerm: <INITIAL, Generic>/(?-u:\b)let(?-u:\b)/ : Token;
/*  79 */ LogicTerm: <INITIAL, Generic>/(?-u:\b)logic(?-u:\b)/ : Token;
/*  80 */ LsbTerm: <INITIAL, Generic>/(?-u:\b)lsb(?-u:\b)/ : Token;
/*  81 */ ModportTerm: <INITIAL, Generic>/(?-u:\b)modport(?-u:\b)/ : Token;
/*  82 */ ModuleTerm: <INITIAL, Generic>/(?-u:\b)module(?-u:\b)/ : Token;
/*  83 */ MsbTerm: <INITIAL, Generic>/(?-u:\b)msb(?-u:\b)/ : Token;
/*  84 */ OutputTerm: <INITIAL, Generic>/(?-u:\b)output(?-u:\b)/ : Token;
/*  85 */ OutsideTerm: <INITIAL, Generic>/(?-u:\b)outside(?-u:\b)/ : Token;
/*  86 */ PackageTerm: <INITIAL, Generic>/(?-u:\b)package(?-u:\b)/ : Token;
/*  87 */ ParamTerm: <INITIAL, Generic>/(?-u:\b)param(?-u:\b)/ : Token;
/*  88 */ ProtoTerm: <INITIAL, Generic>/(?-u:\b)proto(?-u:\b)/ : Token;
/*  89 */ PubTerm: <INITIAL, Generic>/(?-u:\b)pub(?-u:\b)/ : Token;
/*  90 */ RefTerm: <INITIAL, Generic>/(?-u:\b)ref(?-u:\b)/ : Token;
/*  91 */ RepeatTerm: <INITIAL, Generic>/(?-u:\b)repeat(?-u:\b)/ : Token;
/*  92 */ ResetTerm: <INITIAL, Generic>/(?-u:\b)reset(?-u:\b)/ : Token;
/*  93 */ ResetAsyncHighTerm: <INITIAL, Generic>/(?-u:\b)reset_async_high(?-u:\b)/ : Token;
/*  94 */ ResetAsyncLowTerm: <INITIAL, Generic>/(?-u:\b)reset_async_low(?-u:\b)/ : Token;
/*  95 */ ResetSyncHighTerm: <INITIAL, Generic>/(?-u:\b)reset_sync_high(?-u:\b)/ : Token;
/*  96 */ ResetSyncLowTerm: <INITIAL, Generic>/(?-u:\b)reset_sync_low(?-u:\b)/ : Token;
/*  97 */ ReturnTerm: <INITIAL, Generic>/(?-u:\b)return(?-u:\b)/ : Token;
/*  98 */ BreakTerm: <INITIAL, Generic>/(?-u:\b)break(?-u:\b)/ : Token;
/*  99 */ SignedTerm: <INITIAL, Generic>/(?-u:\b)signed(?-u:\b)/ : Token;
/* 100 */ StepTerm: <INITIAL, Generic>/(?-u:\b)step(?-u:\b)/ : Token;
/* 101 */ StringTerm: <INITIAL, Generic>/(?-u:\b)string(?-u:\b)/ : Token;
/* 102 */ StructTerm: <INITIAL, Generic>/(?-u:\b)struct(?-u:\b)/ : Token;
/* 103 */ SwitchTerm: <INITIAL, Generic>/(?-u:\b)switch(?-u:\b)/ : Token;
/* 104 */ TriTerm: <INITIAL, Generic>/(?-u:\b)tri(?-u:\b)/ : Token;
/* 105 */ TypeTerm: <INITIAL, Generic>/(?-u:\b)type(?-u:\b)/ : Token;
/* 106 */ U32Term: <INITIAL, Generic>/(?-u:\b)u32(?-u:\b)/ : Token;
/* 107 */ U64Term: <INITIAL, Generic>/(?-u:\b)u64(?-u:\b)/ : Token;
/* 108 */ UnionTerm: <INITIAL, Generic>/(?-u:\b)union(?-u:\b)/ : Token;
/* 109 */ UnsafeTerm: <INITIAL, Generic>/(?-u:\b)unsafe(?-u:\b)/ : Token;
/* 110 */ VarTerm: <INITIAL, Generic>/(?-u:\b)var(?-u:\b)/ : Token;
/* 111 */ DollarIdentifierTerm: <INITIAL, Generic>/\$[a-zA-Z_][0-9a-zA-Z_$]*/ : Token;
/* 112 */ IdentifierTerm: <INITIAL, Generic>/(?:r#)?[a-zA-Z_][0-9a-zA-Z_$]*/ : Token;
/* 113 */ AnyTerm: <Embed>/[^{}]+/ : Token;
/* 114 */ Comments: CommentsOpt /* Option */;
/* 115 */ CommentsOpt /* Option<T>::Some */: CommentsTerm;
/* 116 */ CommentsOpt /* Option<T>::None */: ;
/* 117 */ StartToken: Comments;
/* 118 */ StringLiteralToken: StringLiteralTerm : Token Comments;
/* 119 */ ExponentToken: ExponentTerm : Token Comments;
/* 120 */ FixedPointToken: FixedPointTerm : Token Comments;
/* 121 */ BasedToken: BasedTerm : Token Comments;
/* 122 */ BaseLessToken: BaseLessTerm : Token Comments;
/* 123 */ AllBitToken: AllBitTerm : Token Comments;
/* 124 */ AssignmentOperatorToken: AssignmentOperatorTerm : Token Comments;
/* 125 */ Operator01Token: Operator01Term : Token Comments;
/* 126 */ Operator02Token: Operator02Term : Token Comments;
/* 127 */ Operator03Token: Operator03Term : Token Comments;
/* 128 */ Operator04Token: Operator04Term : Token Comments;
/* 129 */ Operator05Token: Operator05Term : Token Comments;
/* 130 */ Operator06Token: Operator06Term : Token Comments;
/* 131 */ Operator07Token: Operator07Term : Token Comments;
/* 132 */ Operator08Token: Operator08Term : Token Comments;
/* 133 */ Operator09Token: Operator09Term : Token Comments;
/* 134 */ Operator10Token: Operator10Term : Token Comments;
/* 135 */ Operator11Token: Operator11Term : Token Comments;
/* 136 */ UnaryOperatorToken: UnaryOperatorTerm : Token Comments;
/* 137 */ BackQuoteToken: BackQuoteTerm : Token Comments;
/* 138 */ ColonToken: ColonTerm : Token Comments;
/* 139 */ ColonColonLAngleToken: ColonColonLAngleTerm : Token Comments;
/* 140 */ ColonColonToken: ColonColonTerm : Token Comments;
/* 141 */ CommaToken: CommaTerm : Token Comments;
/* 142 */ DotDotToken: DotDotTerm : Token Comments;
/* 143 */ DotDotEquToken: DotDotEquTerm : Token Comments;
/* 144 */ DotToken: DotTerm : Token Comments;
/* 145 */ EquToken: EquTerm : Token Comments;
/* 146 */ HashToken: HashTerm : Token Comments;
/* 147 */ QuoteLBraceToken: QuoteLBraceTerm : Token Comments;
/* 148 */ LAngleToken: LAngleTerm : Token Comments;
/* 149 */ LBraceToken: LBraceTerm : Token Comments;
/* 150 */ LBracketToken: LBracketTerm : Token Comments;
/* 151 */ LParenToken: LParenTerm : Token Comments;
/* 152 */ MinusColonToken: MinusColonTerm : Token Comments;
/* 153 */ MinusGTToken: MinusGTTerm : Token Comments;
/* 154 */ PlusColonToken: PlusColonTerm : Token Comments;
/* 155 */ RAngleToken: RAngleTerm : Token Comments;
/* 156 */ RBraceToken: RBraceTerm : Token Comments;
/* 157 */ RBracketToken: RBracketTerm : Token Comments;
/* 158 */ RParenToken: RParenTerm : Token Comments;
/* 159 */ SemicolonToken: SemicolonTerm : Token Comments;
/* 160 */ StarToken: StarTerm : Token Comments;
/* 161 */ AlwaysCombToken: AlwaysCombTerm : Token Comments;
/* 162 */ AlwaysFfToken: AlwaysFfTerm : Token Comments;
/* 163 */ AsToken: AsTerm : Token Comments;
/* 164 */ AssignToken: AssignTerm : Token Comments;
/* 165 */ BitToken: BitTerm : Token Comments;
/* 166 */ CaseToken: CaseTerm : Token Comments;
/* 167 */ ClockToken: ClockTerm : Token Comments;
/* 168 */ ClockPosedgeToken: ClockPosedgeTerm : Token Comments;
/* 169 */ ClockNegedgeToken: ClockNegedgeTerm : Token Comments;
/* 170 */ ConstToken: ConstTerm : Token Comments;
/* 171 */ ConverseToken: ConverseTerm : Token Comments;
/* 172 */ DefaultToken: DefaultTerm : Token Comments;
/* 173 */ ElseToken: ElseTerm : Token Comments;
/* 174 */ EmbedToken: EmbedTerm : Token Comments;
/* 175 */ EnumToken: EnumTerm : Token Comments;
/* 176 */ ExportToken: ExportTerm : Token Comments;
/* 177 */ F32Token: F32Term : Token Comments;
/* 178 */ F64Token: F64Term : Token Comments;
/* 179 */ FinalToken: FinalTerm : Token Comments;
/* 180 */ ForToken: ForTerm : Token Comments;
/* 181 */ FunctionToken: FunctionTerm : Token Comments;
/* 182 */ I32Token: I32Term : Token Comments;
/* 183 */ I64Token: I64Term : Token Comments;
/* 184 */ IfResetToken: IfResetTerm : Token Comments;
/* 185 */ IfToken: IfTerm : Token Comments;
/* 186 */ ImportToken: ImportTerm : Token Comments;
/* 187 */ IncludeToken: IncludeTerm : Token Comments;
/* 188 */ InitialToken: InitialTerm : Token Comments;
/* 189 */ InoutToken: InoutTerm : Token Comments;
/* 190 */ InputToken: InputTerm : Token Comments;
/* 191 */ InsideToken: InsideTerm : Token Comments;
/* 192 */ InstToken: InstTerm : Token Comments;
/* 193 */ InterfaceToken: InterfaceTerm : Token Comments;
/* 194 */ InToken: InTerm : Token Comments;
/* 195 */ LetToken: LetTerm : Token Comments;
/* 196 */ LogicToken: LogicTerm : Token Comments;
/* 197 */ LsbToken: LsbTerm : Token Comments;
/* 198 */ ModportToken: ModportTerm : Token Comments;
/* 199 */ ModuleToken: ModuleTerm : Token Comments;
/* 200 */ MsbToken: MsbTerm : Token Comments;
/* 201 */ OutputToken: OutputTerm : Token Comments;
/* 202 */ OutsideToken: OutsideTerm : Token Comments;
/* 203 */ PackageToken: PackageTerm : Token Comments;
/* 204 */ ParamToken: ParamTerm : Token Comments;
/* 205 */ ProtoToken: ProtoTerm : Token Comments;
/* 206 */ PubToken: PubTerm : Token Comments;
/* 207 */ RefToken: RefTerm : Token Comments;
/* 208 */ RepeatToken: RepeatTerm : Token Comments;
/* 209 */ ResetToken: ResetTerm : Token Comments;
/* 210 */ ResetAsyncHighToken: ResetAsyncHighTerm : Token Comments;
/* 211 */ ResetAsyncLowToken: ResetAsyncLowTerm : Token Comments;
/* 212 */ ResetSyncHighToken: ResetSyncHighTerm : Token Comments;
/* 213 */ ResetSyncLowToken: ResetSyncLowTerm : Token Comments;
/* 214 */ ReturnToken: ReturnTerm : Token Comments;
/* 215 */ BreakToken: BreakTerm : Token Comments;
/* 216 */ SignedToken: SignedTerm : Token Comments;
/* 217 */ StepToken: StepTerm : Token Comments;
/* 218 */ StringToken: StringTerm : Token Comments;
/* 219 */ StructToken: StructTerm : Token Comments;
/* 220 */ SwitchToken: SwitchTerm : Token Comments;
/* 221 */ TriToken: TriTerm : Token Comments;
/* 222 */ TypeToken: TypeTerm : Token Comments;
/* 223 */ U32Token: U32Term : Token Comments;
/* 224 */ U64Token: U64Term : Token Comments;
/* 225 */ UnionToken: UnionTerm : Token Comments;
/* 226 */ UnsafeToken: UnsafeTerm : Token Comments;
/* 227 */ VarToken: VarTerm : Token Comments;
/* 228 */ DollarIdentifierToken: DollarIdentifierTerm : Token Comments;
/* 229 */ IdentifierToken: IdentifierTerm : Token Comments;
/* 230 */ Start: StartToken : VerylToken;
/* 231 */ StringLiteral: StringLiteralToken : VerylToken;
/* 232 */ Exponent: ExponentToken : VerylToken;
/* 233 */ FixedPoint: FixedPointToken : VerylToken;
/* 234 */ Based: BasedToken : VerylToken;
/* 235 */ BaseLess: BaseLessToken : VerylToken;
/* 236 */ AllBit: AllBitToken : VerylToken;
/* 237 */ AssignmentOperator: AssignmentOperatorToken : VerylToken;
/* 238 */ Operator01: Operator01Token : VerylToken;
/* 239 */ Operator02: Operator02Token : VerylToken;
/* 240 */ Operator03: Operator03Token : VerylToken;
/* 241 */ Operator04: Operator04Token : VerylToken;
/* 242 */ Operator05: Operator05Token : VerylToken;
/* 243 */ Operator06: Operator06Token : VerylToken;
/* 244 */ Operator07: Operator07Token : VerylToken;
/* 245 */ Operator08: Operator08Token : VerylToken;
/* 246 */ Operator09: Operator09Token : VerylToken;
/* 247 */ Operator10: Operator10Token : VerylToken;
/* 248 */ Operator11: Operator11Token : VerylToken;
/* 249 */ UnaryOperator: UnaryOperatorToken : VerylToken;
/* 250 */ BackQuote: BackQuoteToken : VerylToken;
/* 251 */ Colon: ColonToken : VerylToken;
/* 252 */ ColonColonLAngle: ColonColonLAngleToken : VerylToken;
/* 253 */ ColonColon: ColonColonToken : VerylToken;
/* 254 */ Comma: CommaToken : VerylToken;
/* 255 */ DotDot: DotDotToken : VerylToken;
/* 256 */ DotDotEqu: DotDotEquToken : VerylToken;
/* 257 */ Dot: DotToken : VerylToken;
/* 258 */ Equ: EquToken : VerylToken;
/* 259 */ Hash: HashToken : VerylToken;
/* 260 */ QuoteLBrace: QuoteLBraceToken : VerylToken;
/* 261 */ LAngle: LAngleToken : VerylToken;
/* 262 */ LBrace: LBraceToken : VerylToken;
/* 263 */ LBracket: LBracketToken : VerylToken;
/* 264 */ LParen: LParenToken : VerylToken;
/* 265 */ MinusColon: MinusColonToken : VerylToken;
/* 266 */ MinusGT: MinusGTToken : VerylToken;
/* 267 */ PlusColon: PlusColonToken : VerylToken;
/* 268 */ RAngle: RAngleToken : VerylToken;
/* 269 */ RBrace: RBraceToken : VerylToken;
/* 270 */ RBracket: RBracketToken : VerylToken;
/* 271 */ RParen: RParenToken : VerylToken;
/* 272 */ Semicolon: SemicolonToken : VerylToken;
/* 273 */ Star: StarToken : VerylToken;
/* 274 */ AlwaysComb: AlwaysCombToken : VerylToken;
/* 275 */ AlwaysFf: AlwaysFfToken : VerylToken;
/* 276 */ As: AsToken : VerylToken;
/* 277 */ Assign: AssignToken : VerylToken;
/* 278 */ Bit: BitToken : VerylToken;
/* 279 */ Break: BreakToken : VerylToken;
/* 280 */ Case: CaseToken : VerylToken;
/* 281 */ Clock: ClockToken : VerylToken;
/* 282 */ ClockPosedge: ClockPosedgeToken : VerylToken;
/* 283 */ ClockNegedge: ClockNegedgeToken : VerylToken;
/* 284 */ Const: ConstToken : VerylToken;
/* 285 */ Converse: ConverseToken : VerylToken;
/* 286 */ Defaul: DefaultToken : VerylToken;
/* 287 */ Else: ElseToken : VerylToken;
/* 288 */ Embed: EmbedToken : VerylToken;
/* 289 */ Enum: EnumToken : VerylToken;
/* 290 */ Export: ExportToken : VerylToken;
/* 291 */ F32: F32Token : VerylToken;
/* 292 */ F64: F64Token : VerylToken;
/* 293 */ Final: FinalToken : VerylToken;
/* 294 */ For: ForToken : VerylToken;
/* 295 */ Function: FunctionToken : VerylToken;
/* 296 */ I32: I32Token : VerylToken;
/* 297 */ I64: I64Token : VerylToken;
/* 298 */ If: IfToken : VerylToken;
/* 299 */ IfReset: IfResetToken : VerylToken;
/* 300 */ Import: ImportToken : VerylToken;
/* 301 */ In: InToken : VerylToken;
/* 302 */ Include: IncludeToken : VerylToken;
/* 303 */ Initial: InitialToken : VerylToken;
/* 304 */ Inout: InoutToken : VerylToken;
/* 305 */ Input: InputToken : VerylToken;
/* 306 */ Inside: InsideToken : VerylToken;
/* 307 */ Inst: InstToken : VerylToken;
/* 308 */ Interface: InterfaceToken : VerylToken;
/* 309 */ Let: LetToken : VerylToken;
/* 310 */ Logic: LogicToken : VerylToken;
/* 311 */ Lsb: LsbToken : VerylToken;
/* 312 */ Modport: ModportToken : VerylToken;
/* 313 */ Module: ModuleToken : VerylToken;
/* 314 */ Msb: MsbToken : VerylToken;
/* 315 */ Output: OutputToken : VerylToken;
/* 316 */ Outside: OutsideToken : VerylToken;
/* 317 */ Package: PackageToken : VerylToken;
/* 318 */ Param: ParamToken : VerylToken;
/* 319 */ Proto: ProtoToken : VerylToken;
/* 320 */ Pub: PubToken : VerylToken;
/* 321 */ Ref: RefToken : VerylToken;
/* 322 */ Repeat: RepeatToken : VerylToken;
/* 323 */ Reset: ResetToken : VerylToken;
/* 324 */ ResetAsyncHigh: ResetAsyncHighToken : VerylToken;
/* 325 */ ResetAsyncLow: ResetAsyncLowToken : VerylToken;
/* 326 */ ResetSyncHigh: ResetSyncHighToken : VerylToken;
/* 327 */ ResetSyncLow: ResetSyncLowToken : VerylToken;
/* 328 */ Return: ReturnToken : VerylToken;
/* 329 */ Signed: SignedToken : VerylToken;
/* 330 */ Step: StepToken : VerylToken;
/* 331 */ Strin: StringToken : VerylToken;
/* 332 */ Struct: StructToken : VerylToken;
/* 333 */ Switch: SwitchToken : VerylToken;
/* 334 */ Tri: TriToken : VerylToken;
/* 335 */ Type: TypeToken : VerylToken;
/* 336 */ U32: U32Token : VerylToken;
/* 337 */ U64: U64Token : VerylToken;
/* 338 */ Union: UnionToken : VerylToken;
/* 339 */ Unsafe: UnsafeToken : VerylToken;
/* 340 */ Var: VarToken : VerylToken;
/* 341 */ DollarIdentifier: DollarIdentifierToken : VerylToken;
/* 342 */ Identifier: IdentifierToken : VerylToken;
/* 343 */ Number: IntegralNumber;
/* 344 */ Number: RealNumber;
/* 345 */ IntegralNumber: Based;
/* 346 */ IntegralNumber: BaseLess;
/* 347 */ IntegralNumber: AllBit;
/* 348 */ RealNumber: FixedPoint;
/* 349 */ RealNumber: Exponent;
/* 350 */ HierarchicalIdentifier: Identifier HierarchicalIdentifierList /* Vec */ HierarchicalIdentifierList0 /* Vec */;
/* 351 */ HierarchicalIdentifierList0 /* Vec<T>::Push */: Dot Identifier HierarchicalIdentifierList0List /* Vec */ HierarchicalIdentifierList0;
/* 352 */ HierarchicalIdentifierList0List /* Vec<T>::Push */: Select HierarchicalIdentifierList0List;
/* 353 */ HierarchicalIdentifierList0List /* Vec<T>::New */: ;
/* 354 */ HierarchicalIdentifierList0 /* Vec<T>::New */: ;
/* 355 */ HierarchicalIdentifierList /* Vec<T>::Push */: Select HierarchicalIdentifierList;
/* 356 */ HierarchicalIdentifierList /* Vec<T>::New */: ;
/* 357 */ ScopedIdentifier: ScopedIdentifierGroup ScopedIdentifierList /* Vec */;
/* 358 */ ScopedIdentifierGroup: DollarIdentifier;
/* 359 */ ScopedIdentifierGroup: Identifier ScopedIdentifierOpt /* Option */;
/* 360 */ ScopedIdentifierList /* Vec<T>::Push */: ColonColon Identifier ScopedIdentifierOpt0 /* Option */ ScopedIdentifierList;
/* 361 */ ScopedIdentifierList /* Vec<T>::New */: ;
/* 362 */ ScopedIdentifierOpt0 /* Option<T>::Some */: WithGenericArgument;
/* 363 */ ScopedIdentifierOpt0 /* Option<T>::None */: ;
/* 364 */ ScopedIdentifierOpt /* Option<T>::Some */: WithGenericArgument;
/* 365 */ ScopedIdentifierOpt /* Option<T>::None */: ;
/* 366 */ ExpressionIdentifier: ScopedIdentifier ExpressionIdentifierOpt /* Option */ ExpressionIdentifierList /* Vec */ ExpressionIdentifierList0 /* Vec */;
/* 367 */ ExpressionIdentifierList0 /* Vec<T>::Push */: Dot Identifier ExpressionIdentifierList0List /* Vec */ ExpressionIdentifierList0;
/* 368 */ ExpressionIdentifierList0List /* Vec<T>::Push */: Select ExpressionIdentifierList0List;
/* 369 */ ExpressionIdentifierList0List /* Vec<T>::New */: ;
/* 370 */ ExpressionIdentifierList0 /* Vec<T>::New */: ;
/* 371 */ ExpressionIdentifierList /* Vec<T>::Push */: Select ExpressionIdentifierList;
/* 372 */ ExpressionIdentifierList /* Vec<T>::New */: ;
/* 373 */ ExpressionIdentifierOpt /* Option<T>::Some */: Width;
/* 374 */ ExpressionIdentifierOpt /* Option<T>::None */: ;
/* 375 */ Expression: Expression01 ExpressionList /* Vec */;
/* 376 */ ExpressionList /* Vec<T>::Push */: Operator01 Expression01 ExpressionList;
/* 377 */ ExpressionList /* Vec<T>::New */: ;
/* 378 */ Expression01: Expression02 Expression01List /* Vec */;
/* 379 */ Expression01List /* Vec<T>::Push */: Operator02 Expression02 Expression01List;
/* 380 */ Expression01List /* Vec<T>::New */: ;
/* 381 */ Expression02: Expression03 Expression02List /* Vec */;
/* 382 */ Expression02List /* Vec<T>::Push */: Operator03 Expression03 Expression02List;
/* 383 */ Expression02List /* Vec<T>::New */: ;
/* 384 */ Expression03: Expression04 Expression03List /* Vec */;
/* 385 */ Expression03List /* Vec<T>::Push */: Operator04 Expression04 Expression03List;
/* 386 */ Expression03List /* Vec<T>::New */: ;
/* 387 */ Expression04: Expression05 Expression04List /* Vec */;
/* 388 */ Expression04List /* Vec<T>::Push */: Operator05 Expression05 Expression04List;
/* 389 */ Expression04List /* Vec<T>::New */: ;
/* 390 */ Expression05: Expression06 Expression05List /* Vec */;
/* 391 */ Expression05List /* Vec<T>::Push */: Operator06 Expression06 Expression05List;
/* 392 */ Expression05List /* Vec<T>::New */: ;
/* 393 */ Expression06: Expression07 Expression06List /* Vec */;
/* 394 */ Expression06List /* Vec<T>::Push */: Operator07 Expression07 Expression06List;
/* 395 */ Expression06List /* Vec<T>::New */: ;
/* 396 */ Expression07: Expression08 Expression07List /* Vec */;
/* 397 */ Expression07List /* Vec<T>::Push */: Operator08 Expression08 Expression07List;
/* 398 */ Expression07List /* Vec<T>::New */: ;
/* 399 */ Expression08: Expression09 Expression08List /* Vec */;
/* 400 */ Expression08List /* Vec<T>::Push */: Operator09 Expression09 Expression08List;
/* 401 */ Expression08List /* Vec<T>::New */: ;
/* 402 */ Expression09: Expression10 Expression09List /* Vec */;
/* 403 */ Expression09List /* Vec<T>::Push */: Expression09ListGroup Expression10 Expression09List;
/* 404 */ Expression09ListGroup: Operator10;
/* 405 */ Expression09ListGroup: Star;
/* 406 */ Expression09List /* Vec<T>::New */: ;
/* 407 */ Expression10: Expression11 Expression10List /* Vec */;
/* 408 */ Expression10List /* Vec<T>::Push */: Operator11 Expression11 Expression10List;
/* 409 */ Expression10List /* Vec<T>::New */: ;
/* 410 */ Expression11: Expression12 Expression11Opt /* Option */;
/* 411 */ Expression11Opt /* Option<T>::Some */: As CastingType;
/* 412 */ Expression11Opt /* Option<T>::None */: ;
/* 413 */ Expression12: Expression12List /* Vec */ Factor;
/* 414 */ Expression12List /* Vec<T>::Push */: Expression12ListGroup Expression12List;
/* 415 */ Expression12ListGroup: UnaryOperator;
/* 416 */ Expression12ListGroup: Operator09;
/* 417 */ Expression12ListGroup: Operator05;
/* 418 */ Expression12ListGroup: Operator03;
/* 419 */ Expression12ListGroup: Operator04;
/* 420 */ Expression12List /* Vec<T>::New */: ;
/* 421 */ Factor: Number;
/* 422 */ Factor: IdentifierFactor;
/* 423 */ Factor: LParen Expression RParen;
/* 424 */ Factor: LBrace ConcatenationList RBrace;
/* 425 */ Factor: QuoteLBrace ArrayLiteralList RBrace;
/* 426 */ Factor: IfExpression;
/* 427 */ Factor: CaseExpression;
/* 428 */ Factor: SwitchExpression;
/* 429 */ Factor: StringLiteral;
/* 430 */ Factor: FactorGroup;
/* 431 */ FactorGroup: Msb;
/* 432 */ FactorGroup: Lsb;
/* 433 */ Factor: InsideExpression;
/* 434 */ Factor: OutsideExpression;
/* 435 */ Factor: TypeExpression;
/* 436 */ Factor: FactorTypeFactor;
/* 437 */ IdentifierFactor: ExpressionIdentifier IdentifierFactorOpt /* Option */;
/* 438 */ IdentifierFactorOpt /* Option<T>::Some */: FunctionCall;
/* 439 */ IdentifierFactorOpt /* Option<T>::None */: ;
/* 440 */ FactorTypeFactor: FactorTypeFactorList /* Vec */ FactorType;
/* 441 */ FactorTypeFactorList /* Vec<T>::Push */: TypeModifier FactorTypeFactorList;
/* 442 */ FactorTypeFactorList /* Vec<T>::New */: ;
/* 443 */ FunctionCall: LParen FunctionCallOpt /* Option */ RParen;
/* 444 */ FunctionCallOpt /* Option<T>::Some */: ArgumentList;
/* 445 */ FunctionCallOpt /* Option<T>::None */: ;
/* 446 */ ArgumentList: ArgumentItem ArgumentListList /* Vec */ ArgumentListOpt /* Option */;
/* 447 */ ArgumentListList /* Vec<T>::Push */: Comma ArgumentItem ArgumentListList;
/* 448 */ ArgumentListList /* Vec<T>::New */: ;
/* 449 */ ArgumentListOpt /* Option<T>::Some */: Comma;
/* 450 */ ArgumentListOpt /* Option<T>::None */: ;
/* 451 */ ArgumentItem: Expression;
/* 452 */ ConcatenationList: ConcatenationItem ConcatenationListList /* Vec */ ConcatenationListOpt /* Option */;
/* 453 */ ConcatenationListList /* Vec<T>::Push */: Comma ConcatenationItem ConcatenationListList;
/* 454 */ ConcatenationListList /* Vec<T>::New */: ;
/* 455 */ ConcatenationListOpt /* Option<T>::Some */: Comma;
/* 456 */ ConcatenationListOpt /* Option<T>::None */: ;
/* 457 */ ConcatenationItem: Expression ConcatenationItemOpt /* Option */;
/* 458 */ ConcatenationItemOpt /* Option<T>::Some */: Repeat Expression;
/* 459 */ ConcatenationItemOpt /* Option<T>::None */: ;
/* 460 */ ArrayLiteralList: ArrayLiteralItem ArrayLiteralListList /* Vec */ ArrayLiteralListOpt /* Option */;
/* 461 */ ArrayLiteralListList /* Vec<T>::Push */: Comma ArrayLiteralItem ArrayLiteralListList;
/* 462 */ ArrayLiteralListList /* Vec<T>::New */: ;
/* 463 */ ArrayLiteralListOpt /* Option<T>::Some */: Comma;
/* 464 */ ArrayLiteralListOpt /* Option<T>::None */: ;
/* 465 */ ArrayLiteralItem: ArrayLiteralItemGroup;
/* 466 */ ArrayLiteralItemGroup: Expression ArrayLiteralItemOpt /* Option */;
/* 467 */ ArrayLiteralItemGroup: Defaul Colon Expression;
/* 468 */ ArrayLiteralItemOpt /* Option<T>::Some */: Repeat Expression;
/* 469 */ ArrayLiteralItemOpt /* Option<T>::None */: ;
/* 470 */ IfExpression: If Expression LBrace Expression RBrace IfExpressionList /* Vec */ Else LBrace Expression RBrace;
/* 471 */ IfExpressionList /* Vec<T>::Push */: Else If Expression LBrace Expression RBrace IfExpressionList;
/* 472 */ IfExpressionList /* Vec<T>::New */: ;
/* 473 */ CaseExpression: Case Expression LBrace CaseCondition Colon Expression Comma CaseExpressionList /* Vec */ Defaul Colon Expression CaseExpressionOpt /* Option */ RBrace;
/* 474 */ CaseExpressionList /* Vec<T>::Push */: CaseCondition Colon Expression Comma CaseExpressionList;
/* 475 */ CaseExpressionList /* Vec<T>::New */: ;
/* 476 */ CaseExpressionOpt /* Option<T>::Some */: Comma;
/* 477 */ CaseExpressionOpt /* Option<T>::None */: ;
/* 478 */ SwitchExpression: Switch LBrace SwitchCondition Colon Expression Comma SwitchExpressionList /* Vec */ Defaul Colon Expression SwitchExpressionOpt /* Option */ RBrace;
/* 479 */ SwitchExpressionList /* Vec<T>::Push */: SwitchCondition Colon Expression Comma SwitchExpressionList;
/* 480 */ SwitchExpressionList /* Vec<T>::New */: ;
/* 481 */ SwitchExpressionOpt /* Option<T>::Some */: Comma;
/* 482 */ SwitchExpressionOpt /* Option<T>::None */: ;
/* 483 */ TypeExpression: Type LParen Expression RParen;
/* 484 */ InsideExpression: Inside Expression LBrace RangeList RBrace;
/* 485 */ OutsideExpression: Outside Expression LBrace RangeList RBrace;
/* 486 */ RangeList: RangeItem RangeListList /* Vec */ RangeListOpt /* Option */;
/* 487 */ RangeListList /* Vec<T>::Push */: Comma RangeItem RangeListList;
/* 488 */ RangeListList /* Vec<T>::New */: ;
/* 489 */ RangeListOpt /* Option<T>::Some */: Comma;
/* 490 */ RangeListOpt /* Option<T>::None */: ;
/* 491 */ RangeItem: Range;
/* 492 */ Select: LBracket Expression SelectOpt /* Option */ RBracket;
/* 493 */ SelectOpt /* Option<T>::Some */: SelectOperator Expression;
/* 494 */ SelectOpt /* Option<T>::None */: ;
/* 495 */ SelectOperator: Colon;
/* 496 */ SelectOperator: PlusColon;
/* 497 */ SelectOperator: MinusColon;
/* 498 */ SelectOperator: Step;
/* 499 */ Width: LAngle Expression WidthList /* Vec */ RAngle;
/* 500 */ WidthList /* Vec<T>::Push */: Comma Expression WidthList;
/* 501 */ WidthList /* Vec<T>::New */: ;
/* 502 */ Array: LBracket Expression ArrayList /* Vec */ RBracket;
/* 503 */ ArrayList /* Vec<T>::Push */: Comma Expression ArrayList;
/* 504 */ ArrayList /* Vec<T>::New */: ;
/* 505 */ Range: Expression RangeOpt /* Option */;
/* 506 */ RangeOpt /* Option<T>::Some */: RangeOperator Expression;
/* 507 */ RangeOpt /* Option<T>::None */: ;
/* 508 */ RangeOperator: DotDot;
/* 509 */ RangeOperator: DotDotEqu;
/* 510 */ FixedType: U32;
/* 511 */ FixedType: U64;
/* 512 */ FixedType: I32;
/* 513 */ FixedType: I64;
/* 514 */ FixedType: F32;
/* 515 */ FixedType: F64;
/* 516 */ FixedType: Strin;
/* 517 */ VariableType: Clock;
/* 518 */ VariableType: ClockPosedge;
/* 519 */ VariableType: ClockNegedge;
/* 520 */ VariableType: Reset;
/* 521 */ VariableType: ResetAsyncHigh;
/* 522 */ VariableType: ResetAsyncLow;
/* 523 */ VariableType: ResetSyncHigh;
/* 524 */ VariableType: ResetSyncLow;
/* 525 */ VariableType: Logic;
/* 526 */ VariableType: Bit;
/* 527 */ UserDefinedType: ScopedIdentifier;
/* 528 */ TypeModifier: Tri;
/* 529 */ TypeModifier: Signed;
/* 530 */ FactorType: FactorTypeGroup;
/* 531 */ FactorTypeGroup: VariableType FactorTypeOpt /* Option */;
/* 532 */ FactorTypeGroup: FixedType;
/* 533 */ FactorTypeOpt /* Option<T>::Some */: Width;
/* 534 */ FactorTypeOpt /* Option<T>::None */: ;
/* 535 */ ScalarType: ScalarTypeList /* Vec */ ScalarTypeGroup;
/* 536 */ ScalarTypeGroup: UserDefinedType ScalarTypeOpt /* Option */;
/* 537 */ ScalarTypeGroup: FactorType;
/* 538 */ ScalarTypeList /* Vec<T>::Push */: TypeModifier ScalarTypeList;
/* 539 */ ScalarTypeList /* Vec<T>::New */: ;
/* 540 */ ScalarTypeOpt /* Option<T>::Some */: Width;
/* 541 */ ScalarTypeOpt /* Option<T>::None */: ;
/* 542 */ ArrayType: ScalarType ArrayTypeOpt /* Option */;
/* 543 */ ArrayTypeOpt /* Option<T>::Some */: Array;
/* 544 */ ArrayTypeOpt /* Option<T>::None */: ;
/* 545 */ CastingType: U32;
/* 546 */ CastingType: U64;
/* 547 */ CastingType: I32;
/* 548 */ CastingType: I64;
/* 549 */ CastingType: F32;
/* 550 */ CastingType: F64;
/* 551 */ CastingType: Clock;
/* 552 */ CastingType: ClockPosedge;
/* 553 */ CastingType: ClockNegedge;
/* 554 */ CastingType: Reset;
/* 555 */ CastingType: ResetAsyncHigh;
/* 556 */ CastingType: ResetAsyncLow;
/* 557 */ CastingType: ResetSyncHigh;
/* 558 */ CastingType: ResetSyncLow;
/* 559 */ CastingType: UserDefinedType;
/* 560 */ CastingType: Based;
/* 561 */ CastingType: BaseLess;
/* 562 */ ClockDomain: BackQuote Identifier;
/* 563 */ StatementBlock: LBrace StatementBlockList /* Vec */ RBrace;
/* 564 */ StatementBlockList /* Vec<T>::Push */: StatementBlockGroup StatementBlockList;
/* 565 */ StatementBlockList /* Vec<T>::New */: ;
/* 566 */ StatementBlockGroup: StatementBlockGroupList /* Vec */ StatementBlockGroupGroup;
/* 567 */ StatementBlockGroupGroup: LBrace StatementBlockGroupGroupList /* Vec */ RBrace;
/* 568 */ StatementBlockGroupGroupList /* Vec<T>::Push */: StatementBlockGroup StatementBlockGroupGroupList;
/* 569 */ StatementBlockGroupGroupList /* Vec<T>::New */: ;
/* 570 */ StatementBlockGroupGroup: StatementBlockItem;
/* 571 */ StatementBlockGroupList /* Vec<T>::Push */: Attribute StatementBlockGroupList;
/* 572 */ StatementBlockGroupList /* Vec<T>::New */: ;
/* 573 */ StatementBlockItem: VarDeclaration;
/* 574 */ StatementBlockItem: LetStatement;
/* 575 */ StatementBlockItem: Statement;
/* 576 */ Statement: IdentifierStatement;
/* 577 */ Statement: IfStatement;
/* 578 */ Statement: IfResetStatement;
/* 579 */ Statement: ReturnStatement;
/* 580 */ Statement: BreakStatement;
/* 581 */ Statement: ForStatement;
/* 582 */ Statement: CaseStatement;
/* 583 */ Statement: SwitchStatement;
/* 584 */ LetStatement: Let Identifier Colon LetStatementOpt /* Option */ ArrayType Equ Expression Semicolon;
/* 585 */ LetStatementOpt /* Option<T>::Some */: ClockDomain;
/* 586 */ LetStatementOpt /* Option<T>::None */: ;
/* 587 */ IdentifierStatement: ExpressionIdentifier IdentifierStatementGroup Semicolon;
/* 588 */ IdentifierStatementGroup: FunctionCall;
/* 589 */ IdentifierStatementGroup: Assignment;
/* 590 */ Assignment: AssignmentGroup Expression;
/* 591 */ AssignmentGroup: Equ;
/* 592 */ AssignmentGroup: AssignmentOperator;
/* 593 */ IfStatement: If Expression StatementBlock IfStatementList /* Vec */ IfStatementOpt /* Option */;
/* 594 */ IfStatementList /* Vec<T>::Push */: Else If Expression StatementBlock IfStatementList;
/* 595 */ IfStatementList /* Vec<T>::New */: ;
/* 596 */ IfStatementOpt /* Option<T>::Some */: Else StatementBlock;
/* 597 */ IfStatementOpt /* Option<T>::None */: ;
/* 598 */ IfResetStatement: IfReset StatementBlock IfResetStatementList /* Vec */ IfResetStatementOpt /* Option */;
/* 599 */ IfResetStatementList /* Vec<T>::Push */: Else If Expression StatementBlock IfResetStatementList;
/* 600 */ IfResetStatementList /* Vec<T>::New */: ;
/* 601 */ IfResetStatementOpt /* Option<T>::Some */: Else StatementBlock;
/* 602 */ IfResetStatementOpt /* Option<T>::None */: ;
/* 603 */ ReturnStatement: Return Expression Semicolon;
/* 604 */ BreakStatement: Break Semicolon;
/* 605 */ ForStatement: For Identifier Colon ScalarType In Range ForStatementOpt /* Option */ StatementBlock;
/* 606 */ ForStatementOpt /* Option<T>::Some */: Step AssignmentOperator Expression;
/* 607 */ ForStatementOpt /* Option<T>::None */: ;
/* 608 */ CaseStatement: Case Expression LBrace CaseStatementList /* Vec */ RBrace;
/* 609 */ CaseStatementList /* Vec<T>::Push */: CaseItem CaseStatementList;
/* 610 */ CaseStatementList /* Vec<T>::New */: ;
/* 611 */ CaseItem: CaseItemGroup Colon CaseItemGroup0;
/* 612 */ CaseItemGroup0: Statement;
/* 613 */ CaseItemGroup0: StatementBlock;
/* 614 */ CaseItemGroup: CaseCondition;
/* 615 */ CaseItemGroup: Defaul;
/* 616 */ CaseCondition: RangeItem CaseConditionList /* Vec */;
/* 617 */ CaseConditionList /* Vec<T>::Push */: Comma RangeItem CaseConditionList;
/* 618 */ CaseConditionList /* Vec<T>::New */: ;
/* 619 */ SwitchStatement: Switch LBrace SwitchStatementList /* Vec */ RBrace;
/* 620 */ SwitchStatementList /* Vec<T>::Push */: SwitchItem SwitchStatementList;
/* 621 */ SwitchStatementList /* Vec<T>::New */: ;
/* 622 */ SwitchItem: SwitchItemGroup Colon SwitchItemGroup0;
/* 623 */ SwitchItemGroup0: Statement;
/* 624 */ SwitchItemGroup0: StatementBlock;
/* 625 */ SwitchItemGroup: SwitchCondition;
/* 626 */ SwitchItemGroup: Defaul;
/* 627 */ SwitchCondition: Expression SwitchConditionList /* Vec */;
/* 628 */ SwitchConditionList /* Vec<T>::Push */: Comma Expression SwitchConditionList;
/* 629 */ SwitchConditionList /* Vec<T>::New */: ;
/* 630 */ Attribute: Hash LBracket Identifier AttributeOpt /* Option */ RBracket;
/* 631 */ AttributeOpt /* Option<T>::Some */: LParen AttributeList RParen;
/* 632 */ AttributeOpt /* Option<T>::None */: ;
/* 633 */ AttributeList: AttributeItem AttributeListList /* Vec */ AttributeListOpt /* Option */;
/* 634 */ AttributeListList /* Vec<T>::Push */: Comma AttributeItem AttributeListList;
/* 635 */ AttributeListList /* Vec<T>::New */: ;
/* 636 */ AttributeListOpt /* Option<T>::Some */: Comma;
/* 637 */ AttributeListOpt /* Option<T>::None */: ;
/* 638 */ AttributeItem: Identifier;
/* 639 */ AttributeItem: StringLiteral;
/* 640 */ LetDeclaration: Let Identifier Colon LetDeclarationOpt /* Option */ ArrayType Equ Expression Semicolon;
/* 641 */ LetDeclarationOpt /* Option<T>::Some */: ClockDomain;
/* 642 */ LetDeclarationOpt /* Option<T>::None */: ;
/* 643 */ VarDeclaration: Var Identifier Colon VarDeclarationOpt /* Option */ ArrayType Semicolon;
/* 644 */ VarDeclarationOpt /* Option<T>::Some */: ClockDomain;
/* 645 */ VarDeclarationOpt /* Option<T>::None */: ;
/* 646 */ ConstDeclaration: Const Identifier Colon ConstDeclarationGroup Equ Expression Semicolon;
/* 647 */ ConstDeclarationGroup: ArrayType;
/* 648 */ ConstDeclarationGroup: Type;
/* 649 */ TypeDefDeclaration: Type Identifier Equ ArrayType Semicolon;
/* 650 */ AlwaysFfDeclaration: AlwaysFf AlwaysFfDeclarationOpt /* Option */ StatementBlock;
/* 651 */ AlwaysFfDeclarationOpt /* Option<T>::Some */: AlwaysFfEventList;
/* 652 */ AlwaysFfDeclarationOpt /* Option<T>::None */: ;
/* 653 */ AlwaysFfEventList: LParen AlwaysFfClock AlwaysFfEventListOpt /* Option */ RParen;
/* 654 */ AlwaysFfEventListOpt /* Option<T>::Some */: Comma AlwaysFfReset;
/* 655 */ AlwaysFfEventListOpt /* Option<T>::None */: ;
/* 656 */ AlwaysFfClock: HierarchicalIdentifier;
/* 657 */ AlwaysFfReset: HierarchicalIdentifier;
/* 658 */ AlwaysCombDeclaration: AlwaysComb StatementBlock;
/* 659 */ AssignDeclaration: Assign AssignDestination Equ Expression Semicolon;
/* 660 */ AssignDestination: HierarchicalIdentifier;
/* 661 */ AssignDestination: LBrace AssignConcatenationList RBrace;
/* 662 */ AssignConcatenationList: AssignConcatenationItem AssignConcatenationListList /* Vec */ AssignConcatenationListOpt /* Option */;
/* 663 */ AssignConcatenationListList /* Vec<T>::Push */: Comma AssignConcatenationItem AssignConcatenationListList;
/* 664 */ AssignConcatenationListList /* Vec<T>::New */: ;
/* 665 */ AssignConcatenationListOpt /* Option<T>::Some */: Comma;
/* 666 */ AssignConcatenationListOpt /* Option<T>::None */: ;
/* 667 */ AssignConcatenationItem: HierarchicalIdentifier;
/* 668 */ ModportDeclaration: Modport Identifier LBrace ModportDeclarationOpt /* Option */ ModportDeclarationOpt0 /* Option */ RBrace;
/* 669 */ ModportDeclarationOpt0 /* Option<T>::Some */: DotDot ModportDefault;
/* 670 */ ModportDeclarationOpt0 /* Option<T>::None */: ;
/* 671 */ ModportDeclarationOpt /* Option<T>::Some */: ModportList;
/* 672 */ ModportDeclarationOpt /* Option<T>::None */: ;
/* 673 */ ModportList: ModportGroup ModportListList /* Vec */ ModportListOpt /* Option */;
/* 674 */ ModportListList /* Vec<T>::Push */: Comma ModportGroup ModportListList;
/* 675 */ ModportListList /* Vec<T>::New */: ;
/* 676 */ ModportListOpt /* Option<T>::Some */: Comma;
/* 677 */ ModportListOpt /* Option<T>::None */: ;
/* 678 */ ModportGroup: ModportGroupList /* Vec */ ModportGroupGroup;
/* 679 */ ModportGroupGroup: LBrace ModportList RBrace;
/* 680 */ ModportGroupGroup: ModportItem;
/* 681 */ ModportGroupList /* Vec<T>::Push */: Attribute ModportGroupList;
/* 682 */ ModportGroupList /* Vec<T>::New */: ;
/* 683 */ ModportItem: Identifier Colon Direction;
/* 684 */ ModportDefault: Input;
/* 685 */ ModportDefault: Output;
/* 686 */ ModportDefault: Converse LParen Identifier RParen;
/* 687 */ EnumDeclaration: Enum Identifier EnumDeclarationOpt /* Option */ LBrace EnumList RBrace;
/* 688 */ EnumDeclarationOpt /* Option<T>::Some */: Colon ScalarType;
/* 689 */ EnumDeclarationOpt /* Option<T>::None */: ;
/* 690 */ EnumList: EnumGroup EnumListList /* Vec */ EnumListOpt /* Option */;
/* 691 */ EnumListList /* Vec<T>::Push */: Comma EnumGroup EnumListList;
/* 692 */ EnumListList /* Vec<T>::New */: ;
/* 693 */ EnumListOpt /* Option<T>::Some */: Comma;
/* 694 */ EnumListOpt /* Option<T>::None */: ;
/* 695 */ EnumGroup: EnumGroupList /* Vec */ EnumGroupGroup;
/* 696 */ EnumGroupGroup: LBrace EnumList RBrace;
/* 697 */ EnumGroupGroup: EnumItem;
/* 698 */ EnumGroupList /* Vec<T>::Push */: Attribute EnumGroupList;
/* 699 */ EnumGroupList /* Vec<T>::New */: ;
/* 700 */ EnumItem: Identifier EnumItemOpt /* Option */;
/* 701 */ EnumItemOpt /* Option<T>::Some */: Equ Expression;
/* 702 */ EnumItemOpt /* Option<T>::None */: ;
/* 703 */ StructUnion: Struct;
/* 704 */ StructUnion: Union;
/* 705 */ StructUnionDeclaration: StructUnion Identifier StructUnionDeclarationOpt /* Option */ LBrace StructUnionList RBrace;
/* 706 */ StructUnionDeclarationOpt /* Option<T>::Some */: WithGenericParameter;
/* 707 */ StructUnionDeclarationOpt /* Option<T>::None */: ;
/* 708 */ StructUnionList: StructUnionGroup StructUnionListList /* Vec */ StructUnionListOpt /* Option */;
/* 709 */ StructUnionListList /* Vec<T>::Push */: Comma StructUnionGroup StructUnionListList;
/* 710 */ StructUnionListList /* Vec<T>::New */: ;
/* 711 */ StructUnionListOpt /* Option<T>::Some */: Comma;
/* 712 */ StructUnionListOpt /* Option<T>::None */: ;
/* 713 */ StructUnionGroup: StructUnionGroupList /* Vec */ StructUnionGroupGroup;
/* 714 */ StructUnionGroupGroup: LBrace StructUnionList RBrace;
/* 715 */ StructUnionGroupGroup: StructUnionItem;
/* 716 */ StructUnionGroupList /* Vec<T>::Push */: Attribute StructUnionGroupList;
/* 717 */ StructUnionGroupList /* Vec<T>::New */: ;
/* 718 */ StructUnionItem: Identifier Colon ScalarType;
/* 719 */ InitialDeclaration: Initial StatementBlock;
/* 720 */ FinalDeclaration: Final StatementBlock;
/* 721 */ InstDeclaration: Inst Identifier Colon InstDeclarationOpt /* Option */ ScopedIdentifier InstDeclarationOpt0 /* Option */ InstDeclarationOpt1 /* Option */ InstDeclarationOpt2 /* Option */ Semicolon;
/* 722 */ InstDeclarationOpt2 /* Option<T>::Some */: LParen InstDeclarationOpt3 /* Option */ RParen;
/* 723 */ InstDeclarationOpt3 /* Option<T>::Some */: InstPortList;
/* 724 */ InstDeclarationOpt3 /* Option<T>::None */: ;
/* 725 */ InstDeclarationOpt2 /* Option<T>::None */: ;
/* 726 */ InstDeclarationOpt1 /* Option<T>::Some */: InstParameter;
/* 727 */ InstDeclarationOpt1 /* Option<T>::None */: ;
/* 728 */ InstDeclarationOpt0 /* Option<T>::Some */: Array;
/* 729 */ InstDeclarationOpt0 /* Option<T>::None */: ;
/* 730 */ InstDeclarationOpt /* Option<T>::Some */: ClockDomain;
/* 731 */ InstDeclarationOpt /* Option<T>::None */: ;
/* 732 */ InstParameter: Hash LParen InstParameterOpt /* Option */ RParen;
/* 733 */ InstParameterOpt /* Option<T>::Some */: InstParameterList;
/* 734 */ InstParameterOpt /* Option<T>::None */: ;
/* 735 */ InstParameterList: InstParameterGroup InstParameterListList /* Vec */ InstParameterListOpt /* Option */;
/* 736 */ InstParameterListList /* Vec<T>::Push */: Comma InstParameterGroup InstParameterListList;
/* 737 */ InstParameterListList /* Vec<T>::New */: ;
/* 738 */ InstParameterListOpt /* Option<T>::Some */: Comma;
/* 739 */ InstParameterListOpt /* Option<T>::None */: ;
/* 740 */ InstParameterGroup: InstParameterGroupList /* Vec */ InstParameterGroupGroup;
/* 741 */ InstParameterGroupGroup: LBrace InstParameterList RBrace;
/* 742 */ InstParameterGroupGroup: InstParameterItem;
/* 743 */ InstParameterGroupList /* Vec<T>::Push */: Attribute InstParameterGroupList;
/* 744 */ InstParameterGroupList /* Vec<T>::New */: ;
/* 745 */ InstParameterItem: Identifier InstParameterItemOpt /* Option */;
/* 746 */ InstParameterItemOpt /* Option<T>::Some */: Colon Expression;
/* 747 */ InstParameterItemOpt /* Option<T>::None */: ;
/* 748 */ InstPortList: InstPortGroup InstPortListList /* Vec */ InstPortListOpt /* Option */;
/* 749 */ InstPortListList /* Vec<T>::Push */: Comma InstPortGroup InstPortListList;
/* 750 */ InstPortListList /* Vec<T>::New */: ;
/* 751 */ InstPortListOpt /* Option<T>::Some */: Comma;
/* 752 */ InstPortListOpt /* Option<T>::None */: ;
/* 753 */ InstPortGroup: InstPortGroupList /* Vec */ InstPortGroupGroup;
/* 754 */ InstPortGroupGroup: LBrace InstPortList RBrace;
/* 755 */ InstPortGroupGroup: InstPortItem;
/* 756 */ InstPortGroupList /* Vec<T>::Push */: Attribute InstPortGroupList;
/* 757 */ InstPortGroupList /* Vec<T>::New */: ;
/* 758 */ InstPortItem: Identifier InstPortItemOpt /* Option */;
/* 759 */ InstPortItemOpt /* Option<T>::Some */: Colon Expression;
/* 760 */ InstPortItemOpt /* Option<T>::None */: ;
/* 761 */ WithParameter: Hash LParen WithParameterOpt /* Option */ RParen;
/* 762 */ WithParameterOpt /* Option<T>::Some */: WithParameterList;
/* 763 */ WithParameterOpt /* Option<T>::None */: ;
/* 764 */ WithParameterList: WithParameterGroup WithParameterListList /* Vec */ WithParameterListOpt /* Option */;
/* 765 */ WithParameterListList /* Vec<T>::Push */: Comma WithParameterGroup WithParameterListList;
/* 766 */ WithParameterListList /* Vec<T>::New */: ;
/* 767 */ WithParameterListOpt /* Option<T>::Some */: Comma;
/* 768 */ WithParameterListOpt /* Option<T>::None */: ;
/* 769 */ WithParameterGroup: WithParameterGroupList /* Vec */ WithParameterGroupGroup;
/* 770 */ WithParameterGroupGroup: LBrace WithParameterList RBrace;
/* 771 */ WithParameterGroupGroup: WithParameterItem;
/* 772 */ WithParameterGroupList /* Vec<T>::Push */: Attribute WithParameterGroupList;
/* 773 */ WithParameterGroupList /* Vec<T>::New */: ;
/* 774 */ WithParameterItem: WithParameterItemGroup Identifier Colon WithParameterItemGroup0 Equ Expression;
/* 775 */ WithParameterItemGroup0: ArrayType;
/* 776 */ WithParameterItemGroup0: Type;
/* 777 */ WithParameterItemGroup: Param;
/* 778 */ WithParameterItemGroup: Const;
/* 779 */ GenericBound: Const;
/* 780 */ GenericBound: Type;
/* 781 */ GenericBound: Inst ScopedIdentifier;
/* 782 */ GenericBound: ScopedIdentifier;
/* 783 */ WithGenericParameter: ColonColonLAngle WithGenericParameterList RAngle;
/* 784 */ WithGenericParameterList: WithGenericParameterItem WithGenericParameterListList /* Vec */ WithGenericParameterListOpt /* Option */;
/* 785 */ WithGenericParameterListList /* Vec<T>::Push */: Comma WithGenericParameterItem WithGenericParameterListList;
/* 786 */ WithGenericParameterListList /* Vec<T>::New */: ;
/* 787 */ WithGenericParameterListOpt /* Option<T>::Some */: Comma;
/* 788 */ WithGenericParameterListOpt /* Option<T>::None */: ;
/* 789 */ WithGenericParameterItem: Identifier Colon GenericBound WithGenericParameterItemOpt /* Option */;
/* 790 */ WithGenericParameterItemOpt /* Option<T>::Some */: Equ WithGenericArgumentItem;
/* 791 */ WithGenericParameterItemOpt /* Option<T>::None */: ;
/* 792 */ WithGenericArgument: ColonColonLAngle %push(Generic) WithGenericArgumentOpt /* Option */ RAngle %pop();
/* 793 */ WithGenericArgumentOpt /* Option<T>::Some */: WithGenericArgumentList;
/* 794 */ WithGenericArgumentOpt /* Option<T>::None */: ;
/* 795 */ WithGenericArgumentList: WithGenericArgumentItem WithGenericArgumentListList /* Vec */ WithGenericArgumentListOpt /* Option */;
/* 796 */ WithGenericArgumentListList /* Vec<T>::Push */: Comma WithGenericArgumentItem WithGenericArgumentListList;
/* 797 */ WithGenericArgumentListList /* Vec<T>::New */: ;
/* 798 */ WithGenericArgumentListOpt /* Option<T>::Some */: Comma;
/* 799 */ WithGenericArgumentListOpt /* Option<T>::None */: ;
/* 800 */ WithGenericArgumentItem: ScopedIdentifier;
/* 801 */ WithGenericArgumentItem: Number;
/* 802 */ PortDeclaration: LParen PortDeclarationOpt /* Option */ RParen;
/* 803 */ PortDeclarationOpt /* Option<T>::Some */: PortDeclarationList;
/* 804 */ PortDeclarationOpt /* Option<T>::None */: ;
/* 805 */ PortDeclarationList: PortDeclarationGroup PortDeclarationListList /* Vec */ PortDeclarationListOpt /* Option */;
/* 806 */ PortDeclarationListList /* Vec<T>::Push */: Comma PortDeclarationGroup PortDeclarationListList;
/* 807 */ PortDeclarationListList /* Vec<T>::New */: ;
/* 808 */ PortDeclarationListOpt /* Option<T>::Some */: Comma;
/* 809 */ PortDeclarationListOpt /* Option<T>::None */: ;
/* 810 */ PortDeclarationGroup: PortDeclarationGroupList /* Vec */ PortDeclarationGroupGroup;
/* 811 */ PortDeclarationGroupGroup: LBrace PortDeclarationList RBrace;
/* 812 */ PortDeclarationGroupGroup: PortDeclarationItem;
/* 813 */ PortDeclarationGroupList /* Vec<T>::Push */: Attribute PortDeclarationGroupList;
/* 814 */ PortDeclarationGroupList /* Vec<T>::New */: ;
/* 815 */ PortDeclarationItem: Identifier Colon PortDeclarationItemGroup;
/* 816 */ PortDeclarationItemGroup: PortTypeConcrete;
/* 817 */ PortDeclarationItemGroup: PortTypeAbstract;
/* 818 */ PortTypeConcrete: Direction PortTypeConcreteOpt /* Option */ ArrayType PortTypeConcreteOpt0 /* Option */;
/* 819 */ PortTypeConcreteOpt0 /* Option<T>::Some */: Equ PortDefaultValue;
/* 820 */ PortTypeConcreteOpt0 /* Option<T>::None */: ;
/* 821 */ PortTypeConcreteOpt /* Option<T>::Some */: ClockDomain;
/* 822 */ PortTypeConcreteOpt /* Option<T>::None */: ;
/* 823 */ PortDefaultValue: Expression;
/* 824 */ PortTypeAbstract: PortTypeAbstractOpt /* Option */ Interface PortTypeAbstractOpt0 /* Option */ PortTypeAbstractOpt1 /* Option */;
/* 825 */ PortTypeAbstractOpt1 /* Option<T>::Some */: Array;
/* 826 */ PortTypeAbstractOpt1 /* Option<T>::None */: ;
/* 827 */ PortTypeAbstractOpt0 /* Option<T>::Some */: ColonColon Identifier;
/* 828 */ PortTypeAbstractOpt0 /* Option<T>::None */: ;
/* 829 */ PortTypeAbstractOpt /* Option<T>::Some */: ClockDomain;
/* 830 */ PortTypeAbstractOpt /* Option<T>::None */: ;
/* 831 */ Direction: Input;
/* 832 */ Direction: Output;
/* 833 */ Direction: Inout;
/* 834 */ Direction: Ref;
/* 835 */ Direction: Modport;
/* 836 */ Direction: Import;
/* 837 */ FunctionDeclaration: Function Identifier FunctionDeclarationOpt /* Option */ FunctionDeclarationOpt0 /* Option */ FunctionDeclarationOpt1 /* Option */ StatementBlock;
/* 838 */ FunctionDeclarationOpt1 /* Option<T>::Some */: MinusGT ScalarType;
/* 839 */ FunctionDeclarationOpt1 /* Option<T>::None */: ;
/* 840 */ FunctionDeclarationOpt0 /* Option<T>::Some */: PortDeclaration;
/* 841 */ FunctionDeclarationOpt0 /* Option<T>::None */: ;
/* 842 */ FunctionDeclarationOpt /* Option<T>::Some */: WithGenericParameter;
/* 843 */ FunctionDeclarationOpt /* Option<T>::None */: ;
/* 844 */ ImportDeclaration: Import ScopedIdentifier ImportDeclarationOpt /* Option */ Semicolon;
/* 845 */ ImportDeclarationOpt /* Option<T>::Some */: ColonColon Star;
/* 846 */ ImportDeclarationOpt /* Option<T>::None */: ;
/* 847 */ ExportDeclaration: Export ExportDeclarationGroup Semicolon;
/* 848 */ ExportDeclarationGroup: Star;
/* 849 */ ExportDeclarationGroup: ScopedIdentifier ExportDeclarationOpt /* Option */;
/* 850 */ ExportDeclarationOpt /* Option<T>::Some */: ColonColon Star;
/* 851 */ ExportDeclarationOpt /* Option<T>::None */: ;
/* 852 */ UnsafeBlock: Unsafe LParen Identifier RParen LBrace UnsafeBlockList /* Vec */ RBrace;
/* 853 */ UnsafeBlockList /* Vec<T>::Push */: GenerateGroup UnsafeBlockList;
/* 854 */ UnsafeBlockList /* Vec<T>::New */: ;
/* 855 */ ModuleDeclaration: ModuleDeclarationOpt /* Option */ Module Identifier ModuleDeclarationOpt0 /* Option */ ModuleDeclarationOpt1 /* Option */ ModuleDeclarationOpt2 /* Option */ ModuleDeclarationOpt3 /* Option */ LBrace ModuleDeclarationList /* Vec */ RBrace;
/* 856 */ ModuleDeclarationList /* Vec<T>::Push */: ModuleGroup ModuleDeclarationList;
/* 857 */ ModuleDeclarationList /* Vec<T>::New */: ;
/* 858 */ ModuleDeclarationOpt3 /* Option<T>::Some */: PortDeclaration;
/* 859 */ ModuleDeclarationOpt3 /* Option<T>::None */: ;
/* 860 */ ModuleDeclarationOpt2 /* Option<T>::Some */: WithParameter;
/* 861 */ ModuleDeclarationOpt2 /* Option<T>::None */: ;
/* 862 */ ModuleDeclarationOpt1 /* Option<T>::Some */: For ScopedIdentifier;
/* 863 */ ModuleDeclarationOpt1 /* Option<T>::None */: ;
/* 864 */ ModuleDeclarationOpt0 /* Option<T>::Some */: WithGenericParameter;
/* 865 */ ModuleDeclarationOpt0 /* Option<T>::None */: ;
/* 866 */ ModuleDeclarationOpt /* Option<T>::Some */: Pub;
/* 867 */ ModuleDeclarationOpt /* Option<T>::None */: ;
/* 868 */ ModuleGroup: ModuleGroupList /* Vec */ ModuleGroupGroup;
/* 869 */ ModuleGroupGroup: LBrace ModuleGroupGroupList /* Vec */ RBrace;
/* 870 */ ModuleGroupGroupList /* Vec<T>::Push */: ModuleGroup ModuleGroupGroupList;
/* 871 */ ModuleGroupGroupList /* Vec<T>::New */: ;
/* 872 */ ModuleGroupGroup: ModuleItem;
/* 873 */ ModuleGroupList /* Vec<T>::Push */: Attribute ModuleGroupList;
/* 874 */ ModuleGroupList /* Vec<T>::New */: ;
/* 875 */ ModuleItem: GenerateItem;
/* 876 */ InterfaceDeclaration: InterfaceDeclarationOpt /* Option */ Interface Identifier InterfaceDeclarationOpt0 /* Option */ InterfaceDeclarationOpt1 /* Option */ LBrace InterfaceDeclarationList /* Vec */ RBrace;
/* 877 */ InterfaceDeclarationList /* Vec<T>::Push */: InterfaceGroup InterfaceDeclarationList;
/* 878 */ InterfaceDeclarationList /* Vec<T>::New */: ;
/* 879 */ InterfaceDeclarationOpt1 /* Option<T>::Some */: WithParameter;
/* 880 */ InterfaceDeclarationOpt1 /* Option<T>::None */: ;
/* 881 */ InterfaceDeclarationOpt0 /* Option<T>::Some */: WithGenericParameter;
/* 882 */ InterfaceDeclarationOpt0 /* Option<T>::None */: ;
/* 883 */ InterfaceDeclarationOpt /* Option<T>::Some */: Pub;
/* 884 */ InterfaceDeclarationOpt /* Option<T>::None */: ;
/* 885 */ InterfaceGroup: InterfaceGroupList /* Vec */ InterfaceGroupGroup;
/* 886 */ InterfaceGroupGroup: LBrace InterfaceGroupGroupList /* Vec */ RBrace;
/* 887 */ InterfaceGroupGroupList /* Vec<T>::Push */: InterfaceGroup InterfaceGroupGroupList;
/* 888 */ InterfaceGroupGroupList /* Vec<T>::New */: ;
/* 889 */ InterfaceGroupGroup: InterfaceItem;
/* 890 */ InterfaceGroupList /* Vec<T>::Push */: Attribute InterfaceGroupList;
/* 891 */ InterfaceGroupList /* Vec<T>::New */: ;
/* 892 */ InterfaceItem: GenerateItem;
/* 893 */ InterfaceItem: ModportDeclaration;
/* 894 */ GenerateIfDeclaration: If Expression GenerateNamedBlock GenerateIfDeclarationList /* Vec */ GenerateIfDeclarationOpt /* Option */;
/* 895 */ GenerateIfDeclarationList /* Vec<T>::Push */: Else If Expression GenerateOptionalNamedBlock GenerateIfDeclarationList;
/* 896 */ GenerateIfDeclarationList /* Vec<T>::New */: ;
/* 897 */ GenerateIfDeclarationOpt /* Option<T>::Some */: Else GenerateOptionalNamedBlock;
/* 898 */ GenerateIfDeclarationOpt /* Option<T>::None */: ;
/* 899 */ GenerateForDeclaration: For Identifier In Range GenerateForDeclarationOpt /* Option */ GenerateNamedBlock;
/* 900 */ GenerateForDeclarationOpt /* Option<T>::Some */: Step AssignmentOperator Expression;
/* 901 */ GenerateForDeclarationOpt /* Option<T>::None */: ;
/* 902 */ GenerateBlockDeclaration: GenerateNamedBlock;
/* 903 */ GenerateNamedBlock: Colon Identifier LBrace GenerateNamedBlockList /* Vec */ RBrace;
/* 904 */ GenerateNamedBlockList /* Vec<T>::Push */: GenerateGroup GenerateNamedBlockList;
/* 905 */ GenerateNamedBlockList /* Vec<T>::New */: ;
/* 906 */ GenerateOptionalNamedBlock: GenerateOptionalNamedBlockOpt /* Option */ LBrace GenerateOptionalNamedBlockList /* Vec */ RBrace;
/* 907 */ GenerateOptionalNamedBlockList /* Vec<T>::Push */: GenerateGroup GenerateOptionalNamedBlockList;
/* 908 */ GenerateOptionalNamedBlockList /* Vec<T>::New */: ;
/* 909 */ GenerateOptionalNamedBlockOpt /* Option<T>::Some */: Colon Identifier;
/* 910 */ GenerateOptionalNamedBlockOpt /* Option<T>::None */: ;
/* 911 */ GenerateGroup: GenerateGroupList /* Vec */ GenerateGroupGroup;
/* 912 */ GenerateGroupGroup: LBrace GenerateGroupGroupList /* Vec */ RBrace;
/* 913 */ GenerateGroupGroupList /* Vec<T>::Push */: GenerateGroup GenerateGroupGroupList;
/* 914 */ GenerateGroupGroupList /* Vec<T>::New */: ;
/* 915 */ GenerateGroupGroup: GenerateItem;
/* 916 */ GenerateGroupList /* Vec<T>::Push */: Attribute GenerateGroupList;
/* 917 */ GenerateGroupList /* Vec<T>::New */: ;
/* 918 */ GenerateItem: LetDeclaration;
/* 919 */ GenerateItem: VarDeclaration;
/* 920 */ GenerateItem: InstDeclaration;
/* 921 */ GenerateItem: ConstDeclaration;
/* 922 */ GenerateItem: AlwaysFfDeclaration;
/* 923 */ GenerateItem: AlwaysCombDeclaration;
/* 924 */ GenerateItem: AssignDeclaration;
/* 925 */ GenerateItem: FunctionDeclaration;
/* 926 */ GenerateItem: GenerateIfDeclaration;
/* 927 */ GenerateItem: GenerateForDeclaration;
/* 928 */ GenerateItem: GenerateBlockDeclaration;
/* 929 */ GenerateItem: TypeDefDeclaration;
/* 930 */ GenerateItem: EnumDeclaration;
/* 931 */ GenerateItem: StructUnionDeclaration;
/* 932 */ GenerateItem: ImportDeclaration;
/* 933 */ GenerateItem: InitialDeclaration;
/* 934 */ GenerateItem: FinalDeclaration;
/* 935 */ GenerateItem: UnsafeBlock;
/* 936 */ PackageDeclaration: PackageDeclarationOpt /* Option */ Package Identifier PackageDeclarationOpt0 /* Option */ LBrace PackageDeclarationList /* Vec */ RBrace;
/* 937 */ PackageDeclarationList /* Vec<T>::Push */: PackageGroup PackageDeclarationList;
/* 938 */ PackageDeclarationList /* Vec<T>::New */: ;
/* 939 */ PackageDeclarationOpt0 /* Option<T>::Some */: WithGenericParameter;
/* 940 */ PackageDeclarationOpt0 /* Option<T>::None */: ;
/* 941 */ PackageDeclarationOpt /* Option<T>::Some */: Pub;
/* 942 */ PackageDeclarationOpt /* Option<T>::None */: ;
/* 943 */ PackageGroup: PackageGroupList /* Vec */ PackageGroupGroup;
/* 944 */ PackageGroupGroup: LBrace PackageGroupGroupList /* Vec */ RBrace;
/* 945 */ PackageGroupGroupList /* Vec<T>::Push */: PackageGroup PackageGroupGroupList;
/* 946 */ PackageGroupGroupList /* Vec<T>::New */: ;
/* 947 */ PackageGroupGroup: PackageItem;
/* 948 */ PackageGroupList /* Vec<T>::Push */: Attribute PackageGroupList;
/* 949 */ PackageGroupList /* Vec<T>::New */: ;
/* 950 */ PackageItem: VarDeclaration;
/* 951 */ PackageItem: ConstDeclaration;
/* 952 */ PackageItem: TypeDefDeclaration;
/* 953 */ PackageItem: EnumDeclaration;
/* 954 */ PackageItem: StructUnionDeclaration;
/* 955 */ PackageItem: FunctionDeclaration;
/* 956 */ PackageItem: ImportDeclaration;
/* 957 */ PackageItem: ExportDeclaration;
/* 958 */ ProtoModuleDeclaration: ProtoModuleDeclarationOpt /* Option */ Proto Module Identifier ProtoModuleDeclarationOpt0 /* Option */ ProtoModuleDeclarationOpt1 /* Option */ Semicolon;
/* 959 */ ProtoModuleDeclarationOpt1 /* Option<T>::Some */: PortDeclaration;
/* 960 */ ProtoModuleDeclarationOpt1 /* Option<T>::None */: ;
/* 961 */ ProtoModuleDeclarationOpt0 /* Option<T>::Some */: WithParameter;
/* 962 */ ProtoModuleDeclarationOpt0 /* Option<T>::None */: ;
/* 963 */ ProtoModuleDeclarationOpt /* Option<T>::Some */: Pub;
/* 964 */ ProtoModuleDeclarationOpt /* Option<T>::None */: ;
/* 965 */ EmbedDeclaration: Embed LParen Identifier RParen Identifier EmbedContent;
/* 966 */ EmbedContent: EmbedContentToken : VerylToken;
/* 967 */ EmbedContentToken: LBraceTerm %push(Embed) LBraceTerm LBraceTerm EmbedContentTokenList /* Vec */ RBraceTerm RBraceTerm RBraceTerm %pop() Comments;
/* 968 */ EmbedContentTokenList /* Vec<T>::Push */: EmbedItem EmbedContentTokenList;
/* 969 */ EmbedContentTokenList /* Vec<T>::New */: ;
/* 970 */ EmbedItem: LBraceTerm EmbedItemList /* Vec */ RBraceTerm;
/* 971 */ EmbedItemList /* Vec<T>::Push */: EmbedItem EmbedItemList;
/* 972 */ EmbedItemList /* Vec<T>::New */: ;
/* 973 */ EmbedItem: AnyTerm;
/* 974 */ IncludeDeclaration: Include LParen Identifier Comma StringLiteral RParen Semicolon;
/* 975 */ DescriptionGroup: DescriptionGroupList /* Vec */ DescriptionGroupGroup;
/* 976 */ DescriptionGroupGroup: LBrace DescriptionGroupGroupList /* Vec */ RBrace;
/* 977 */ DescriptionGroupGroupList /* Vec<T>::Push */: DescriptionGroup DescriptionGroupGroupList;
/* 978 */ DescriptionGroupGroupList /* Vec<T>::New */: ;
/* 979 */ DescriptionGroupGroup: DescriptionItem;
/* 980 */ DescriptionGroupList /* Vec<T>::Push */: Attribute DescriptionGroupList;
/* 981 */ DescriptionGroupList /* Vec<T>::New */: ;
/* 982 */ DescriptionItem: ModuleDeclaration;
/* 983 */ DescriptionItem: InterfaceDeclaration;
/* 984 */ DescriptionItem: PackageDeclaration;
/* 985 */ DescriptionItem: ProtoModuleDeclaration;
/* 986 */ DescriptionItem: ImportDeclaration;
/* 987 */ DescriptionItem: EmbedDeclaration;
/* 988 */ DescriptionItem: IncludeDeclaration;
/* 989 */ Veryl: Start VerylList /* Vec */;
/* 990 */ VerylList /* Vec<T>::Push */: DescriptionGroup VerylList;
/* 991 */ VerylList /* Vec<T>::New */: ;
